*19nov7
**I ran a simulation with overlapped field of view i.e. every neuron in layer V1 received input from 25 neurons in a topological manner.
**I tested a couple of initial weights to see how the synaptic weights evolve
***The results are very similar (by eye balling) when initial weight is 0.001 vs 0.0012
****I feel that the topological mapping from layer R to layer V1 would not be a useful strategy at this time because i think that having biological realism in model will require completeness too to make the model useful. And with just a couple of layers to encode image sequences, having topological mapping limits the capacity of the network to encode the changes in virtual game environment and later associate actions to the sequence of images.
samn 10:23 AM
why does topology limit capacity of network to encode changes and associate actions?
10:24 AM
can objects be represented without topology?
Haroon Anwar 10:24 AM
because a couple of layers would not allow merging localized information into spatial sequences
10:24 AM
“can objects be represented without topology?” - no
samn 10:25 AM
how many layers are needed to merge local info into spatial sequence?
Haroon Anwar 10:26 AM
not sure…. would guess 3-4 or so
samn 10:26 AM
can try that then
10:26 AM
and have a variable control whether to use topological mapping
Haroon Anwar 10:27 AM
i am not against topological mapping….just trying to think the potential issues as we build up network
samn 10:27 AM
it would be interesting if the system worked without topological mapping, but also surprising
10:27 AM
since you would think it needs some representation of space including positioning of objects
Haroon Anwar 10:28 AM
i like to make things as biological as possible but then it also require completeness and we dont know how much detail would be enough to capture something at biological level
samn 10:28 AM
if pixels from two rackets are activated with same neurons, how is the neuronal representation separated?
10:28 AM
i'm not sure if we need completeness for what we are doing. besides that, we will never have completeness
Haroon Anwar 10:28 AM
thats an interesting point
10:28 AM
completeness for a task
samn 10:28 AM
ic
Haroon Anwar 10:29 AM
like we talked about layers
samn 10:29 AM
right, we don't know how much detail needed
10:29 AM
can only guess/hypothesize until we have a way to test the system
Haroon Anwar 10:30 AM
when things are merged into a single or two layers and everything is connected to everything, the network can be trained to do a task without making sense
10:30 AM
just increase the number of neurons and connections in the middle layer and it does the magic
samn 10:30 AM
that would be fine too
10:30 AM
even that with more realistic neurons is a step towards more realism
10:30 AM
but my sense is that topology is important for reason mentioned above
Haroon Anwar 10:31 AM
“but my sense is that topology is important for reason mentioned above” - cant agree more…
samn 10:31 AM
you should try both ways
**** 1 Possible solution: "The role of competitive inhibition and top-down feedback in binding during object recognition"
*****In this regard, use Bhezhenov strategy.
****Another issue in the way the model is setup for learning is: hardly a couple of successful events occur (i.e. the player hits the ball with the racket). I wonder what will be a better strategy to overcome this problem.
10:07 AM
not immediate problem but it will be a problem
samn 10:07 AM
can you clarify the problem?
Haroon Anwar 10:07 AM
and we need to find a solution for this
10:07 AM
ok
10:07 AM
in game there are 2 players
10:08 AM
game allows access to 1 player
10:08 AM
its actions and reward
10:08 AM
within each episode, if the player plays randomly, it hardly plays a correct move and gets rewarded
10:14 AM
the player using random strategy gets rewarded, but less than a player with a good strategy
Haroon Anwar 10:14 AM
yes
samn 10:14 AM
and the random strategy also produces punishment too
Haroon Anwar 10:15 AM
i am not sure about that….
10:15 AM
i just noticed reward to be 0 or 1
samn 10:16 AM
well, we will have to build in some punishment too
10:16 AM
for all games they only use 0 or 1 ?
Haroon Anwar 10:16 AM
not sure
10:16 AM
need to check that
samn 10:16 AM
we could make rules such as if no reward for a while, produce a punishment
Haroon Anwar 10:16 AM
i see
samn 10:17 AM
but hopefully they have explicit punishments already. yeah, good to think about different approaches for those issues
Haroon Anwar 10:17 AM
OK
10:17 AM
but i was thinking, how we learn is not only by getting results of our actions
10:18 AM
but also looking at others, how they play
samn 10:18 AM
true
Haroon Anwar 10:18 AM
and try to learn some rules
samn 10:18 AM
there's something called teacher-based learning
10:18 AM
imitation, etc.
Haroon Anwar 10:18 AM
ok
samn 10:19 AM
can try some of that as well...e.g. produce a population of models, transfer some weights from strong models to weaker models
10:19 AM
in that case it's similar to evolution
Haroon Anwar 10:19 AM
yes. so all of these are possible strategies. that can be pursued in parallel
samn 10:19 AM
for more complicated teacher learning have to develop an algorithm that can observe and copy
Haroon Anwar 10:20 AM
agree… but will also need access to rewards and association to actions of other player
samn 10:20 AM
yeah
****Can agent learn about good actions from the computer (i.e. the other player)? A couple of problems in that regard are lack of access to the information regarding the other player's actions and reward.
**To Do List: 1. Include inhibition in the model. 2. Implement a strategy for STDP where the strength of synapses slowly decay over time unless it hits a threshold, in which case, it stays strengthened.
*19nov8
**To Do List (side tracked): 1. Include inhibition in the model. 2. Before implementing homeostatic STDP, implement Bhezhenov model. This model should exist in parallel. 3. Implement simplified motor cortex and use reward based STDP to train it. 4. Implement homeostatic STDP
***PROBLEM UNDERSTANDING BAZHENOV ARCHITECTURE- disuccion with same
****Haroon Anwar 9:53 AM
it says every neuron send an excitatory and inhibitory synapse to 9 neurons
samn 9:53 AM
that's strange
samn 9:53 AM
we of course don't have to follow his paper exactly
Haroon Anwar 9:53 AM
read figure 1 legend
samn 9:53 AM
it's just a general framework, which we've developed similarly previously too
Haroon Anwar 9:54 AM
i understand that. but just trying to understand what they did
samn 9:54 AM
they tried to balance the output by having feedforward inhibition?
Haroon Anwar 9:54 AM
i thought may be i dont understand English
samn 9:54 AM
ic
9:54 AM
you probably understand, but their rule does seem unusual
Haroon Anwar 9:55 AM
so same neuron excites postsynaptic neuron and inhibits too
9:55 AM
but then there has to be some rule to have a balanced excitation
9:55 AM
so its not real inhibition as in biological network
samn 9:56 AM
they might have different delays and time constants, as well as how far it spreads spatially
Haroon Anwar 9:56 AM
its balancing inhibition
samn 9:56 AM
let me read more of the details
Haroon Anwar 9:56 AM
please
samn 10:00 AM
"Output balancing.
Our previous study revealed the importance of balancing the strength of the output synapses [30]. In this new study, implementation of the output part of synaptic balancing was to reduce the rate of synaptic growth in the neurons that already had high total synaptic output. This effectively prevented a very small number of neurons from controlling the entire network. Thus, for each middle-layer cell, increments of the strength of outgoing synapses resulting from rewarded STDP events were divided by the ratio of the current sum of synaptic outputs to the initial sum of synaptic outputs of the same cells (see Methods). The result was that synapses originating from the neurons with many strong outputs were not able to increase their synaptic strength as quickly as synapses from the neurons with a weak output. This gave a competitive advantage to the later neurons. It helped to control synaptic output, thus preventing over-representation by the cells whose activities were most often correlated with the rewards (see S1 Fig). The performance of the full model simulated without this rule is shown by the red line in Fig 3."
10:00 AM
so they increment the input synapse of cells that already have high weights by a smaller increment?
10:00 AM
sorry, the output
10:00 AM
synapses
Haroon Anwar 10:01 AM
but how does inhibition play role in that
samn 10:01 AM
yeah, it doesn't mention inhibition there
10:01 AM
where was the inhibition mentioned?
Haroon Anwar 10:01 AM
in the architecture
samn 10:02 AM
ic, Feedforward synaptic inhibition was implemented in the model (see Methods) and was necessary for optimal behavior of the network. Thus each layer projecting excitatory connections to the following layer was also projecting inhibition and the total strength of inhibition was equal to the total strength of excitation.
Haroon Anwar 10:02 AM
yes that too
10:02 AM
dont understand the role of this inhibition
samn 10:03 AM
some way to maintain sparse firing and prevent incorrect output
Haroon Anwar 10:03 AM
i see
samn 10:04 AM
they don't seem to explain too much at finer level of detail
Haroon Anwar 10:04 AM
no
samn 10:04 AM
we could test that later on. see how individual synapses being turned on or off impact very specific behaviors
Haroon Anwar 10:04 AM
ok
samn 10:04 AM
or groups of synapses
10:05 AM
did you see the mod file i had to maintaining a target firing rate? it's just one way to have homeostatic weights
10:05 AM
i mean homeostatic synaptic scaling
10:05 AM
/u/samn/syscale
Haroon Anwar 10:05 AM
so for now, previously i was thinking about having inhibition driven by inhibitory neurons
10:05 AM
no
10:05 AM
can you send me that
samn 10:06 AM
yeah, i agree we should keep inhibitory and excitatory neurons separate

 *** Do we need inhibition to be cell based (inhibition implements contrast enhancement or define receptive fields) or region based (with some temporal difference different hierarchical regions inhibit other regions)?
 ***for connectivity could have broad inputs to interneurons, with some spatial dependence on prbability too
 ***factors for connectivity: how strongly the E cells are activated will determine how strongly the I cells have to get activated
spatial dependence of E -> E wiring will influence spatial dependence of E -> I and I -> I and I -> E wiring
for now i would make it parameterized so you can play with it and see what works
***O-Reilly model uses k-winner-take-all competitive inhibition:
****Input; V1 - 3600 neurons; V2/V4 (overlapping field of views) - 2800 neurons that receive from 320 neighboring V1 neurons; IT - 200 neurons - receive inputs from 2800 neurons; Feedforward - 80-90%; Feedback between adjacent - 10-20%; k-winner take all inhibitory competition rule — k most active units remain active over time. each layer has different k, but is generally in the range of 10-20% of neurons in the layer.
***for network balacing use sam's homeostatic synaptic scaling

*19nov12
**Things to do today: 
***1. to implement inhibition, use gabaa syn model. 
***2. drive inhibitory neurons using hh model but with higher firing rate then excitatory neurons.
***3. Extend Bazhenov architecture to O'Reilly architecture (Front. Psych. 2012 paper):
****Input; V1 - 3600 neurons; V2/V4 (overlapping field of views) - 2800 neurons that receive from 320 neighboring V1 neurons; IT - 200 neurons - receive inputs from 2800 neurons; Feedforward - 80-90%; Feedback between adjacent - 10-20%; k-winner take all inhibitory competition rule — k most active units remain active over time. each layer has different k, but is generally in the range of 10-20% of neurons in the layer.
****Base on O'Reilly's architecture: try using R: 6400, V1: 6400, each neuron in V1 receive input from overlapping 25 neurons in R. 1600 neurons in V2/V4. each neuron in V2/V4 receives 25 neurons from V1. 400 neurons in IT with each neuron receiving inputs from 25 neurons in V2/V4. 

*19nov13
*** Based on the paper "Recruitment of inhibition and excitation across mouse visual cortex depends on the hierarchy of interconnecting areas by Rinaldo David D’Souza1*, Andrew Max Meier1, Pawan Bista1, Quanxin Wang2, Andreas Burkhalter1"
****In L2/3 FF (V1->PM) pathway, EPSC recorded from PV cells were larger than those from Pyr cells.
****FF excitation of inhibitory PV neurons relative to neighboring Pyr neuron is stronger than FB excitation of PV neurons. In both cases PV excitation is stronger than Pyr excitation.
****Larger EPSC in PV cells could be a result of either higher density of excitatory input (higher weight of synaptic connections) or due to larger area over which individual PV cells are contacted by inter areal projections, or both.
****The difference in relative excitation of PV and Pyr was bigger in FF(V1->PM) than in FF(LM->PM: the pathway is V1->LM->PM). 
****in contrast, the difference was smaller in FB (PM->V1) than FB(LM->V1).
****Rules are different in L5.

*19nov14
**Implemented divergent connectivity function
**Included inhibitory neurons: 1600 InV1, 400 InV4 and 100 InIT. These neurons are driven by excitation from R, V1 and V4 respectively.
***for all pre(E) to post(I), the overlap is different: 15x15 for R to InV1, 25x25 for V1 to InV4 and 25x25 for V4 to InIT.
**Feedback inhibition implemented: InV1 inhibit neurons in R, InV4 inhibit neurons in V1 and InIT inhibit neurons in V4.
***for all pre(I) to post(E), the overlap is 5x5 neurons i.e. every post synaptic neuron receives inhibition from 25 neighboring neurons. 
**To DO: add poisson noise to inhibitory neurons so that the neurons are close to threshold. this is to increase firing rate of inhibitory neurons.

*19nov15
**Run the simulation for 10s with same firing rate for both excitatory and inhibitory neurons. Only save the raster.
**Add noise stim to inhibitory neurons to increase their firing rates and run the simulation.
**I had only feedback inhibition and feedforward excitation. Now i have included feedforward inhibition as well as feedbackward excitation.
***QUESTION: Is there any evidence of feedforward inhibition and feedbackward excitation in cortex? any biological numbers for such connectivity?
**To do: implement local inhibition- previously we had only feedforward and feedbackward inhibition.
***What are the rules for local inhibition in terms of receptive fields.

*19nov18
**Ran simulation for 10 sec with strong feedback excitation (weight of 0.02)-- observed high firing rates for excitatory and inhibtory neurons (just obseration)
**Ran simulation for 10 sec without feedback excitation-- observed firing rates (R = 0.686, V1 = 1.96, V4 = 3.75, IT = 11.7, IV1 = 21.2, IV4 = 11, IIT = 15.2 Hz)
**Ran simulation for 10 sec with weaker feedback excitation (weight of 0.002)-- observed firing rates (R = 0.7, V1 = 2.5, V4 = 4.85, IT = 11.9, IV1 = 21.2, IV4 = 11.2, IIT = 14.2 Hz)
**Running simulation for 20 sec with weaker feedback excitation (weight of 0.002) and saving at 2 ms instead of 0.2 ms
**Include local inhibition and excitation.

*19nov19
**Include local inhibition and excitation (using some general statistics).

**19nov20
**Tried installing atari environment for gym open ai on neurosim, but due to dependencies could not succeeded. 
**Tried installing atari environment for gym open ai on KONG, which worked but netpyne didn't work becaue NEURON is not installed with python3.
***pip install gym --user
***pip install atari-py --user
***Contacted ARCS for help in installing NEURON with python3
** Tried again installing atari environment for gym open ai on neurosim: tried on no.neurosim.downstate.edu
***pip3 install gym --user (it worked)
***pip3 install atari-py --user (it worked)
**Running trainSmartAgent.py on neurosim. (it could not run render therefore i commented out render command)
**Compare neurosim vs personal magic


***NEUROSIM
Creating network of 7 cell populations on 1 hosts...
  Number of cells on node 0: 16900 
  Done; cell creation time = 2.68 s.
Making connections...
  Number of connections on node 0: 2318471 
  Done; cell connection time = 430.00 s.
Adding stims...
  Number of stims on node 0: 8500 
  Done; cell stims creation time = 1.27 s.


***Personal Mac
Creating network of 7 cell populations on 1 hosts...
  Number of cells on node 0: 16900 
  Done; cell creation time = 1.61 s.
Making connections...
  Number of connections on node 0: 2318471 
  Done; cell connection time = 325.40 s.
Adding stims...
  Number of stims on node 0: 8500 
  Done; cell stims creation time = 0.82 s.

*19nov21
***To run simulation on neurosim- always use py3env to use python3.
***To run simulation in parallel using 8 cores on neurosim - use mpirun -n 8 python trainSmartAgent.py
***run time on neurosim using 8 cores - Done; run time = 5936.18 s; real-time ratio: 0.00.
***One problem remains: Plotting raster plot.
***Additional analyses to include: evolving spike rates and .....

*19nov26
**Yesterday, I made changes in the script to save the firing times of all cells.
**Salva told me that we can only use .pkl or .json to save data from plotRaster
***e.g. simConfig.analysis['plotRaster'] = {'popRates':'overlay','saveData':'RasterData.pkl','showFig':True}

*19dec4
**Yesterday, I ran analyzeSpikeRate.py on neurosim to analyze population average firing rates. I ntoiced extremely high values for frequencies, which was due to a bug in the code.
**Today, i fixed the code and reran on neurosim. Firing rate of all populations rose initially and then decayed to a stable firing rate. This analysis was done on 100 s of simulation.
**Nest step is to implement motor cortex. First, i will keep the motor cortex in my model simple.
**Two layers: 
**Input layer with 100 excitatory neurons and 25 inhibitory neurons.
**Output layer with 4 excitatory neurons only.
**Feedforward [IT to MI]: 25 E to 1 E, 225 E to 1 I, 25 I to 1 I, 
**Feedbackward [MI to IT]: 1 E to 9 E, 1 I to 25 E, No I to I
**Feedforward [MI to MO]: 400 E to 1 E (all to all by using probability of connection 1)
**Feedbackward [MO to MI]: 1 E to 121 E 
**There was a bug in connParams. Fixed now.

*19dec5
Analyzing...
  Cells: 17404
  Connections: 3189957 (183.29 per cell)
  Spikes: 770534 (4.43 Hz)
  Simulated time: 10.0 s; 1 workers
  Run time: 1838.15 s
Saving output as model_output.pkl ... 
Finished saving!
  Done; saving time = 995.82 s.
Plotting raster...
Saving figure data as RasterData.pkl ... 
  Done; plotting time = 98.44 s

Total time = 3753.03 s

*19dec6
**Sam suggested: May be should increase number of neurons in motor output layer (MO).
**Change MO from 2x2(4) to 10x10(100)
**Increase number of MO neurons from 4 to 100. Also changed the connectivity from MO to MI and MI to MO.
**Ran the simulation after changing MO as described above. Below are some runtime stats.
Analyzing...
  Cells: 17500
  Connections: 3212180 (183.55 per cell)
  Spikes: 762715 (4.36 Hz)
  Simulated time: 10.0 s; 1 workers
  Run time: 1810.90 s
  Done; saving time = 0.22 s.
Plotting raster...
Saving figure data as RasterData.pkl ... 
  Done; plotting time = 92.46 s
**Replace connections between Visual Cortex and Motor Cortex from STDP to Reward-based STDP.
**Keeping connections within every layer of Motor Cortex standard STDP.

*19dec10
**function playGame is modified to take a list of actions (5 actions) and returns rewards (5 rewards) associated with those actions.
**generate actions based on activity of MO.

*19dec11
**record firing rate of populations of neurons for 20 ms and use that rate to generate actions.
***100 MO neurons are divided into 50 neurons for Right-move(up) and 50 neurons for left-move(down) action.
***Those 50 neurons are further divided into groups of 10 neurons with each group respoisnble for 1 actions out of a sequence of 5 actions.

*19dec12
**Error detected in code in function playGame.

*19dec13
**Fixed the error and reran the simulation.
**action is generated based on activitiy of MO.
**RL code included---mainly modified from Salva's RL model. I don't understand rank and pc.broadcast related script.
**Still need to test the code.
**When i tested the code, i noticed that the firing rate of neuronal population generating actions was 0 most of the times.
**The reason might be that the connection weights reduced to 0 but have not checked that yet.
**So after discussing with Sam, I have made a list of things to test with the model as Below:
1. turn off the -1 and only use 0 or 1, what happens?
2. compare the results of full model simulation with the simulation after completing tuning off reward, punishment.
3. compare the results of full model simulation with the simulation after completely turning off STDP.
4. compare the results of full model simulation with the simulation after using RL-STDP for all synapses.
5. Can do 2 phase learning: phase 1 for STDP between visual layers. training is terminated when the firing rates become stable. Then use those weights for visual connections and train RL-STDP connections.
6. For different configurations, play with starting weights by increasing.
7. could try saving weights from visual learning, then restore them into the network, and continue from there with RL

Also for later he suggested: for the longer term should think about how to avoid "catastrophic forgetting" <- which is what that guy hananel mentioned - when certain neural networks have to learn > 1 thing, the new info/memory/task sometimes interferes with the previously learned. i think the bazhenov model/paper mentions that problem with a solution too (might involve homeostatic plasticity)

*19dec16
**implemented a function to record RL and NonRL weights separately and save at different cellular resolution.
**For every simulation, run for 100 sec, record weights for every 10th neuron.
***A few observations:
1. A lot of time steps, the firing rate of output neurons is 0HZ.
2. When the firing rate is 0 Hz, the action is "Don't move". So most of the times the racket is not moving.
***Find out why the firing rate of output layer is 0?
**While running the simulation, i could not save weights..... need debugging.

*19dec17
**Start debugging the code to save weights.
***I noticed that i was not passing argument sim to the function saveWeights(sim). I made this correction and now rerunning the simulation.
***Another problem detected: precision of t such that it never gives DT%1000==0


*19dec19
**On neurosim: Save the rasterdata and weights for bothRLandNonRL case.
**On neurosim: Run the simulation with only RL. i.e. turn RLon = 1 in STDPparams.
**Reduced model has 1102 neurons and 50260 connections (45.61 per cell)
***1. Reduced model with both RL and nonRL. Also no movement if firing rate of R neuron is equal to firing rate of L neuron.
***2. Reduced model with only RL for all neurons. Also no movement if firing rate of R neuron is equal to firing rate of L neuron.
***3. Reduced model with only RL for all neurons. Also no movement if firing rate of R neuron is equal to firing rate of L neuron.
***1.2. Reduced model with both RL and nonRL. Move randomly if firing rate of R neuron is equal to firing rate of L neuron.
***1.3. RECORD actions and rewards.

*19dec23
**Ran 100 sec simulation of reduced model with recording actions and rewards.
**actions were chosen based on the firing rate of MO neurons except when the firing rate was not decisive.

*19dec24
**run 100 sec simulation of reduced model with recording actions and rewards.
**assign reward = 1 if its 0. and 0 if its 1.

*19dec26
**run 100 sec simulation of reduced model with no actions but randomly generated rewards for RL.
***I want to see how does the network behave if the environment does not change after 1st episode (_NoAction.py). 
****e.g. how NonRL weights evolve: this will give some hint on whether change in NonRL is random or because of the image sequences.
****e.g. how RL weights evolve: this will be random or not.

*19dec30
**Problems:
***I told Sam about my frustration with the reward system in the game i.e. Model gets +1 only if the computer/other player makes a mistake. He argued that Model can get +1 also when It plays a good move. But I said that at this point model is not at that cognitive level to acieve that kind of smartness. Though I am not convinced that model will ever do that, can still hope for that.
***Sam was concerned about sudden drop of weights. I told him that is because of so many -1s. He suggested that I might mask -1 in the beginning and also slow down the change in weight due to -1.
***I will use a threshold for weights to activate punishment in RL.
***I will also decrease the change in weight due to punishment in RL.
***The other problem I observed was that the weights keep increasing even in the absense of new scenes. I think this will make difficult for model to learn much about the game environment as most of the activity is intrinsic (not evoked by the image).
***Sam wants me to save movies and also plot activity of output motor neurons.
**Before I do anything I discussed with Sam, I will implement my idea: GUIDE MODEL TO PLAY THE GAME BASED ON VECTOR ALGEBRA. (local dir: SMARTAgent_Reduced_12302019)
***GUIDE MODEL TO PLAY THE GAME BASED ON VECTOR ALGEBRA ---> Done. Running now.
***Change fixed number of trials to complete episodes i.e. number of trials until one of the players score 20. use 'done' and also record total episodes.

*19dec31
**The simulation I ran with VECTOR ALGEBRA using 2 different values of RLhebbwt (0.001 and 0.0001) were done. But I realized i made a mistake in RL signal i.e. i used 0 as +1.
**I will re run these simulations and also record activity of the motor neurons.

    #I don't understand the code below. Copied from Salva's RL model
    vec = h.Vector()
    if sim.rank == 0:
        rewards, epCount = sim.SMARTAgent.playGame(actions, epCount)
        critic = sum(rewards) # get critic signal (-1, 0 or 1)
        sim.pc.broadcast(vec.from_python([critic]), 0) # convert python list to hoc vector for broadcast data received from arm
    else: # other workers
        sim.pc.broadcast(vec, 0)
        critic = vec.to_python()[0] #till here I dont understand


**running reduced model with VECTOR ALEBRA and recording RLWeights, NonRLWeights, ActionsAndRewards, FiringRate of MotorNeurons in MO, binned 20 ms, ActionsPerEpisode

*20jan2
**I created a folder 'SMARTAgent_Reduced_12302019/Dec31' and saved the output files and analysis of the simulation ran on Dec31. The simulation was run using RLparams as
STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.00001, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.0001, 'RLantiwt': -0.000,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0} ---> check RLdescription.txt
**create a new dir 'SMARTAgent_Reduced_12302019/Jan2_0' and run simulation with STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.00001, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.001, 'RLantiwt': -0.000,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0} in folder 'SMARTAgent_Reduced_12302019'
**create a new dir 'SMARTAgent_Reduced_12302019/Jan2' and run another simulation with STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.00001, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.001, 'RLantiwt': -0.0001,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}
**create a new dir 'SMARTAgent_Reduced_12302019/Jan2_1' and run another simulation with STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.00001, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.01, 'RLantiwt': -0.0001,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}

*20jan3
**create a new dir 'SMARTAgent_Reduced_12302019/Jan3' and run another simulation with STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.00001, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.001, 'RLantiwt': -0.00001,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}
**create a new dir 'SMARTAgent_Reduced_12302019/Jan3_1' and run another simulation with STDPparamsRL = {'hebbwt': 0.0001, 'antiwt':-0.00001, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.001, 'RLantiwt': -0.00001,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}
**Some ideas to test: 
***1. decrease inhibition (i think right now the activity is too sparse to have eligibitly established).
***2. To have better chances of learning, increase the window so that the chances for eligibility increases.
**create a new dir 'SMARTAgent_Reduced_12302019/Jan3_2' and run another simulation with same parameters as the simulation in Jan3_1. Additionally, only use +1 (line 734). Run for 10sec (line 589)
***Though there were only two +1 rewards, the weight kept increasing. So rerun the simulation with +1 and 0.

*20jan6
**creating 2 cell model 'SMARTAgent_2Cell_01062020' to understand and debug RL-model.

*20jan7
**running 2 cell model showed that:
1)RL weight change must be smaller or equal to the hebb weight change otherwise too many punishments reduce the weight to 0.
2)with RL = 1 and hebbwt assigned, the model implements hebb stdp and RL, both.
**running reduced model simulation with RL weight change adjusted to hebbwt in 'SMARTAgent_Reduced_12302019/Jan7' using 
STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.0000, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.00001, 'RLantiwt': -0.000,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0} 
**running reduced model simulation with RL weight change adjusted to hebbwt in 'SMARTAgent_Reduced_12302019/Jan7_1' using 
STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.0000, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.00005, 'RLantiwt': -0.000,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}
**running reduced model simulation with RL weight change adjusted to hebbwt in 'SMARTAgent_Reduced_12302019/Jan7_2' using
STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.0000, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.0001, 'RLantiwt': -0.000,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}

*20jan9
**Do we need STDP between neurons in visual cortex? May be not. As there is an existing topological map, activation of neurons in V1 will encode spatial information about the visual space. and neurons in V4 and IT will encode associations between objects in visual scenes.
**run reduced model without nonRL-STDP.
**running reduced model simulation without nonRL-STDP in 'SMARTAgent_Reduced_12302019/Jan9'.
**D1R-expressing medium spiny neurons reinforce, while D2R-expressing MSNs encode punsihment. High concentrations of DA preferentially activate D1R-expressing direct pathway neurons, while low level of DA preferentially activates D2R expressing indirect pathway neurons.
**Kravitz and Kreitzer suggest LTP of the direct pathway and LTD of the indirect pathway mediates reinforcement, whereas LTP of the indirect pathway and LTD of direct pathway mediates punishment in substentia niagra compacta (SNc) neurons. 
**STDP works good.
**Reward based weight adjustment looks weird:
example 1:
t=500.600000 (BEFORE) tlaspre=499.200000, tlastpost=400.000000, flag=0.000000, w=-1.000000, deltaw=0.000000 
t=500.600000 (AFTER) tlaspre=499.200000, tlastpost=500.600000, flag=0.000000, w=-1.000000, deltaw=0.000000 

t= 520.0000000000497 - adjusting weights based on RL critic value: -1
t=520.000000, RL-hebb =0.001000, deltaw=-0.001000 
t=520.000000, RL-antihebb =0.000000, deltaw=-0.001000 
RL event: t = 520.000000 ms; reinf = -1.000000; RLhebbwt = 0.001000; RLlenhebb = 100.000000; tlasthebbelig = 500.600000; deltaw = -0.001000

example 2:
t=780.200000 (BEFORE) tlaspre=758.000000, tlastpost=779.000000, flag=0.000000, w=1.000000, deltaw=0.000000 
t=780.200000 (AFTER) tlaspre=780.200000, tlastpost=779.000000, flag=0.000000, w=1.000000, deltaw=0.000000

t=798.800000 (BEFORE) tlaspre=780.200000, tlastpost=779.000000, flag=0.000000, w=1.000000, deltaw=0.000000 
t=798.800000 (AFTER) tlaspre=798.800000, tlastpost=779.000000, flag=0.000000, w=1.000000, deltaw=0.000000 
eligibility established -- see above and now reward/punishment delivered at time 800ms -- see below

t= 800.0000000001133 - adjusting weights based on RL critic value: -1
t=800.000000, RL-hebb =0.001000, deltaw=-0.001000 
t=800.000000, RL-antihebb =-0.000200, deltaw=-0.000800 
RL event: t = 800.000000 ms; reinf = -1.000000; RLhebbwt = 0.001000; RLlenhebb = 100.000000; tlasthebbelig = 779.000000; deltaw = -0.000800

example 3:
t=801.200000 (BEFORE) tlaspre=798.800000, tlastpost=779.000000, flag=0.000000, w=-1.000000, deltaw=0.000000 
t=801.200000 (AFTER) tlaspre=798.800000, tlastpost=801.200000, flag=0.000000, w=-1.000000, deltaw=0.000000 

t=818.000000 (BEFORE) tlaspre=798.800000, tlastpost=801.200000, flag=0.000000, w=1.000000, deltaw=0.000000 
t=818.000000 (AFTER) tlaspre=818.000000, tlastpost=801.200000, flag=0.000000, w=1.000000, deltaw=0.000000

t= 820.0000000001179 - adjusting weights based on RL critic value: -1
t=820.000000, RL-hebb =0.001000, deltaw=-0.001000 
t=820.000000, RL-antihebb =-0.000200, deltaw=-0.000800 
RL event: t = 820.000000 ms; reinf = -1.000000; RLhebbwt = 0.001000; RLlenhebb = 100.000000; tlasthebbelig = 801.200000; deltaw = -0.000800

example 4:
t=940.800000 (BEFORE) tlaspre=923.800000, tlastpost=881.000000, flag=0.000000, w=1.000000, deltaw=0.000000 
t=940.800000 (AFTER) tlaspre=940.800000, tlastpost=881.000000, flag=0.000000, w=1.000000, deltaw=0.000000

t=944.800000 (BEFORE) tlaspre=940.800000, tlastpost=881.000000, flag=0.000000, w=-1.000000, deltaw=0.000000 
t=944.800000 (AFTER) tlaspre=940.800000, tlastpost=944.800000, flag=0.000000, w=-1.000000, deltaw=0.000000

t=959.400000 (BEFORE) tlaspre=940.800000, tlastpost=944.800000, flag=0.000000, w=1.000000, deltaw=0.000000 
t=959.400000 (AFTER) tlaspre=959.400000, tlastpost=944.800000, flag=0.000000, w=1.000000, deltaw=0.000000

t= 960.0000000001497 - adjusting weights based on RL critic value: -1
t=960.000000, RL-hebb =0.001000, deltaw=-0.001000 
t=960.000000, RL-antihebb =0.000000, deltaw=-0.001000 
RL event: t = 960.000000 ms; reinf = -1.000000; RLhebbwt = 0.001000; RLlenhebb = 100.000000; tlasthebbelig = 944.800000; deltaw = -0.001000

example 5:

t=1059.400000 (BEFORE) tlaspre=1038.400000, tlastpost=1032.400000, flag=0.000000, w=-1.000000, deltaw=0.000000 
t=1059.400000 (AFTER) tlaspre=1038.400000, tlastpost=1059.400000, flag=0.000000, w=-1.000000, deltaw=0.000000 

t= 1080.0000000001132 - adjusting weights based on RL critic value: 1
t=1080.000000, RL-hebb =0.001000, deltaw=0.001000 
t=1080.000000, RL-antihebb =-0.000200, deltaw=0.000800 
RL event: t = 1080.000000 ms; reinf = 1.000000; RLhebbwt = 0.001000; RLlenhebb = 100.000000; tlasthebbelig = 1059.400000; deltaw = 0.000800


another example with more information: (both tlasthebbelig and tlastantielig)

t= 860.000000000127 - adjusting weights based on RL critic value: 1
t=860.000000, RL-hebb =0.001000, deltaw=0.001000 
t=860.000000, RL-antihebb =-0.000200, deltaw=0.000800 
RL event: t = 860.000000 ms; reinf = 1.000000; RLhebbwt = 0.001000; RLlenhebb = 100.000000; tlasthebbelig = 839.000000; tlastantielig = 840.400000; deltaw = 0.000800


**Still unsure how tlasthebbelig and tlastantielig set. Now I understand. It's explained below, with RLon = 1 and STDPon = 0
***eligibility is establised by comparing times of pre- and post-synaptic spikes.
*** the function receives w. if w>=0, its a presynaptic spike. if w<0 its postsynaptic spike.
*** if presynaptic spike at time t, it will look at the time of last postsynaptic spike. and therefore look for antihebbian eligibility.
*** if postsynaptic spike at time t, it will look at the time of last presynaptic spike and therefore look for hebbian eligibility.

**In the example below 2 spike events were printed

***spike event 1:
t=1253.600000 (BEFORE) tlaspre=1232.600000, tlastpost=1219.600000, tlasthebbelig=1219.600000, tlastantielig=-1.000000, flag=0.000000, w=-1.000000, deltaw=0.000000 
t=1253.600000 (AFTER) tlaspre=1232.600000, tlastpost=1253.600000, tlasthebbelig=1253.600000, tlastantielig=-1.000000, flag=0.000000, w=-1.000000, deltaw=0.000000 

--at time 1253.6 ms, a postsynaptic spike occurs (because w = -1), therefore the mechanism compares time of last presynaptic spike which is 1232.6 ms
--the time difference between current postsynaptic spike and last presynaptic spike is 20 ms. 
--tpost-tpre (20 ms) is less than 100 ms therefore the eligibilty trace is activated at 1253.6 ms for hebbian plasticity.

***spike event 2:
t=1259.000000 (BEFORE) tlaspre=1232.600000, tlastpost=1253.600000, tlasthebbelig=1253.600000, tlastantielig=-1.000000, flag=0.000000, w=1.000000, deltaw=0.000000 
t=1259.000000 (AFTER) tlaspre=1259.000000, tlastpost=1253.600000, tlasthebbelig=1253.600000, tlastantielig=1259.000000, flag=0.000000, w=1.000000, deltaw=0.000000

--at time 1259 ms, a presynaptic spike accurs (because w = 1), therefore the mechanism compares time of last postsynaptic spike which is 1253.6 ms.
-- the time difference between current presynaptic spike and last postsynaptic spike is 5.4 ms.
--tpre-tpost (5.4 ms) is less than 10 ms therefore the eligibility trace is activated at 1259.0 ms for antihebbian plasticity.

*** a reward/punishment arrives at 1260 ms

t= 1259.9999999999495 - adjusting weights based on RL critic value: 1
t=1260.000000, RL-hebb =0.001000, deltaw=0.001000 
t=1260.000000, RL-antihebb =-0.000200, deltaw=0.000800 
RL event: t = 1260.000000 ms; reinf = 1.000000; RLhebbwt = 0.001000; RLlenhebb = 100.000000; tlasthebbelig = 1253.600000; tlastantielig = 1259.000000; deltaw = 0.000800

-- at time 1260 ms, eligibility for both hebbian and antihebbian were active (hebbian was active till 1353.6 ms and antihebb was active till 1359 ms).
-- since its a reward... it will implement positive reinforcement.
-- if it was a negative, both hebbian and antihebbian plasticities will be reversed.

** right now the window for hebbian plasticity is 100 ms where as antihebbian plasticity is 10 ms.
** the eligibility for both hebbian and anithebbian stays active for 100 ms.

**What happens when both RLon and STDPon are 1. See the example below.

t=47.200000 (AFTER) tlaspre=25.800000, tlastpost=47.200000, tlasthebbelig=47.200000, tlastantielig=-1.000000, flag=0.000000, w=-1.000000, deltaw=0.000000 
t=48.200000 (BEFORE) tlaspre=25.800000, tlastpost=47.200000, tlasthebbelig=47.200000, tlastantielig=-1.000000, flag=-1.000000, w=-1.000000, deltaw=0.000000 
Hebbian STDP event: t = 48.200000 ms; tlastpre = 25.800000; w = -1.000000; deltaw = 0.000118

t= 60.00000000000058 - adjusting weights based on RL critic value: -1
t=60.000000, RL-hebb =0.001000, deltaw=-0.001000 
t=60.000000, RL-antihebb =0.000000, deltaw=-0.001000 
RL event: t = 60.000000 ms; reinf = -1.000000; RLhebbwt = 0.001000; RLlenhebb = 100.000000; tlasthebbelig = 47.200000; tlastantielig = -1.000000; deltaw = -0.001000

**Sent 2 messages (Slack) to Sam on Jan10,2020 for discussion
Message 1:
While building SmartAgent model, i incorporated stdp.mod from RL_arm model 
(https://github.com/Neurosim-lab/netpyne/blob/development/examples/RL_arm/params.py)
and used the parameters: 
STDPparams = {'hebbwt': 0.00001, 'antiwt':-0.00001, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.001, 'RLantiwt': -0.000, \
    'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}.
As earlier, i didn't carefully looked at all these parameters and didn't try to understand the meaning of each of these
parameters, while running a reduced verson of SmartAgent, I noticed a drop in the activity of postsynaptic neurons which 
were connected with presynaptic neurons using STDPparams as declared above. on dissecting these mechanisms, i found out:
1. It was using STDP-based and RL-based weight adjustments. It was because, by default STDPon is set to 1 and I didn't set STDPon to 0.
1.1. Before I further dive into the working of the mechanisms, i wonder why this choice was made? I am not against using this strategy 
but want to understand biological rationale behind this choice
2. The second set of parameters, i wondered about were 'RLhebbwt': 0.001, 'RLantiwt': -0.000.
2.1. RLhebbwt defines the change in weight, when RLon is 1 and hebbeligibilty is active. 
2.1.1 hebbeligibility is active for 100 ms if postsynaptic neuron fires within 50 ms ('RLwindhebb': 50) of presynaptic neuron. by default RLwindhebb is 10 ms.  
2.1.2 when there is a reward (+1), and hebbelegibility is active for less than 100 ms, the weight increases.
2.1.3 when there is a punishment (-1), and hebbelegibility is active for less than 100 ms, the weight decreases.
2.2. RLantiwt defines the change in weight, when RLon is 1 and antieligibility is active.
2.2.1. antieligibility is active for 100 ms if presynaptic neuron fires after postsynaptic neuron within 10 ms. (default: 'RLwindanti': 10) 
2.2.2. when there is a reward (+1), and antieligibility is active for less than 100 ms, the weight decreases.
2.2.3. when there is a punishment (-1), and antieligibility is active for less than 100 ms, the weight increases.
2.2.4. However, this mechanism is inactive because RLantiwt': -0.000.
2.2.5. So the question is why was it set to be inactive? Should I use it? What is the biological relevance of this mechanism?
3. The biggest issue in my model is that because the postsynaptic neurons are driven by presynaptic neurons, 
if the connection weight drops to 0, the postsynaptic neurons become inactive. Probably, need to have some baseline activity in the model for all neurons.

Message 2: 
Also just for discussion, if there is a topologically mapped neurons across multiple layers, i have been wondering why would we need STDP to encode spatial information. Same question from other side: how would STDP help encode visual information, all i can think (also see in the model) of is that it increase firing rate globally. I understand the basic concept but cant wrap my head around how this can be useful. Of course, i am trying both ways i.e. with STDP (adjustable weights) and without STDP (fixed weights) in Visual cortex.

*20jan13
**Things to do:
***Develop analytical tools/scripts to dissect the circuit to see how the activity is encoded hierarchically. V1 vs V4 vs IT etc
***Add noise to the Motor neurons so that these neurons can fire in the absence of synaptic input. This will give a chance to recover if the connection weights are depressed to 0.
***Remove STDP in Visual areas.
***what is the firing rate of neurons and their population in the absence of plasticity?
***How to have a better control over the racket movements in the aigame?

*20jan14
**add background noise firing rate with noise to excitatory cells.
netParams.stimSourceParams['ebkg'] = {'type': 'NetStim', 'rate': 5, 'noise': 0.3}
netParams.stimTargetParams['ebkg->all'] = {'source': 'ebkg', 'conds': {'cellType': ['EV1','EV4','EIT', 'EMI', 'EMO']}, 'weight': 0.01, 'delay': 'max(1, normal(5,2))', 'synMech': 'AMPA'}  
**In folder 'SMARTAgent_Reduced_01142020/AllConns0' set weights of all connections to 0 to see the background activity of the network i.e. R will fire based on the input and E cells will fire based on ebkg and i cells will fire based on bkg.
**In folder 'SMARTAgent_Reduced_01142020/AllConns0ExceptReccurent' set wights of all connections to 0 except recurrent connections and background activity as in the above case.
**In folder 'SMARTAgent_Reduced_01142020/AllConns0ExceptFeedForwardExcit' set weights of all connections to 0 except feedforward excitatory connections and background activity.
**When compared AllConns0 with AllConns0ExceptRecurrent, found no difference. Rerunning ALlConns0ExceptRecurrent with higher connection strength (0.0001 --> 0.001) 

*20jan15
**For 'SMARTAgent_Reduced_01142020/AllConns0ExceptFeedForwardExcit', we had used weight of 0.002 and had run simulation for 100 sec.
*** Comparing the firing rate to the baseline, it seemed that 0.002 was high. 
***So for comparison at different values for weights, i reran the simulation for 10 sec with 0.002.
***Running simulation for 10 sec with weight of 0.001 and 0.0005

*20jan16
**worked on plotting neural activity to show spatial patterns of neurons activated in diffent layers.
**finished in matlab and started implementing in python.

*20jan17
**finished plotting neural activity to show spatial patterns of neurons activated in different layers.
**found that: 
1) The activity didnt propagate across the layers faithfully. Rather only noise was seen across layers.
2) Sam thinks that noise is good however, the activity should be propagated across layers faithfully.
2.1) For propagation, he suggested may be we should increase the strength of the connections.
2.2) I think the limitation is time step for playing game i.e. 20 ms. it allows only to detect 50Hz stimulation, any input driving lower frequency will not bre represented.
2.2.1) Solution could be shifting either the activiation curve to increase firing rates or increase the time step for playing game. If we increase step to 100 ms. this will allow to encode atleast 10Hz input.
3) Also for comparison, Sam suggested that we should also plot the actual input image.

*20jan20
**Implemented saving input frames to the model.
**Now can show the input images together with model's spatial activity of neuron in each layer.

*20jan23
**In folder 'SMARTAgent_Reduced_01232020/AllConns0' --- set all conn weights 0 and see the effect of noise in each area.
***Saw all populations firing at baseline rate except MO. Found that MIi was plotted instead of MO. Fixed now.
**In folder 'SMARTAgent_Reduced_01232020/AllConns0ExceptFeedForwardExcit'
***The inhibition rate was similar to the simulation when there were no connections. Increased e.g. V1-->InV1 0.0001 to 0.001
****0.001 seems insufficient as only InV1 firing rate increases.
***Try increasing to 0.002 and then to 0.004 and so on.
***Seems like the problem is not with the weight of connections but the connection probability.

*20jan24
***Increase connection probability for within area Exct-->Inhib from 0.02 to 0.2 and keep strength 0.002
****Strength of 0.002 was too high for IV1 and IV4. Rerunning with strength of 0.001 and prob Conn 0.23
***The lowest number of neuron in any area is 9. So i decided to choose 0.23 as connection probability so that atleast I get 2 connections
****Both increasing weight and prob connections do not work for all the areas. If presynaptic area has too many neurons then using same prob for that area will connect a lots of presynaptic neuron with each postsynaptic neuron.
****A quick fix to this problem might be to have a fixed convergence on to postsynaptic area. I choose 9. (SMARTAgent_Reduced_01232020/AllConns0ExceptFeedForwardExcit/ChangeProb2Convergence/)
***Using convergence of 9 instead of conn prob of 0.02 or 0.23 seems to work better. Now increasing weight from 0.001 to 0.002
**Now fix inhibition within area. (SMARTAgent_Reduced_01232020/FFExcitAndWithinAreaInhibition)
***change 'probability': 0.02 to 'divergence': 9
***change 'weight': 0.0001 to 'weight': 0.001 in subfolder 0_001; to 'weight': 0.002 in subfolder 0_002 and 0_005.

*20jan27
**I was using convergence and divergence factor of 9 for connectivity from E to I and I to E within layers that we decided to change.
**I changed E to I and I to E connectivity using spatial overlap of 9 (3x3 in square window) for E to I within layers and 25 (5x5 in square window) for I to E within layers.
**Now I will test the connections and strength.
***To see if the connections list are generated as expected or not, I printed the lists as below
List MI to InMI
[[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], 
[2, 2], [3, 2], [4, 2], [7, 2], [8, 2], [9, 2], [2, 3], [3, 3], [4, 3], [7, 3], [8, 3], [9, 3], [12, 3], [13, 3], [14, 3], 
[3, 4], [4, 4], [8, 4], [9, 4], [13, 4], [14, 4], [5, 5], [6, 5], [7, 5], [10, 5], [11, 5], [12, 5], [15, 5], [16, 5], [17, 5], 
[10, 6], [11, 6], [12, 6], [15, 6], [16, 6], [17, 6], [20, 6], [21, 6], [22, 6], [11, 7], [12, 7], [13, 7], [16, 7], [17, 7], [18, 7], [21, 7], [22, 7], [23, 7], 
[13, 8], [14, 8], [18, 8], [19, 8], [23, 8], [24, 8]]
List InMI to MI
[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], 
[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [8, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [8, 3], 
[0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [8, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [8, 5], 
[0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [8, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7], [8, 7], 
[0, 8], [1, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8]]

**Found wrong connections in List MI to InMI.
**Fixed the bug. Hopefully it is fixed. Atleast for this case:
List MI to InMI
[[0, 0], [1, 0], [5, 0], [6, 0], [1, 1], [2, 1], [3, 1], [6, 1], [7, 1], [8, 1], 
[3, 2], [4, 2], [8, 2], [9, 2], [5, 3], [6, 3], [10, 3], [11, 3], [15, 3], [16, 3], 
[6, 4], [7, 4], [8, 4], [11, 4], [12, 4], [13, 4], [16, 4], [17, 4], [18, 4], 
[8, 5], [9, 5], [13, 5], [14, 5], [18, 5], [19, 5], [15, 6], [16, 6], [20, 6], [21, 6], 
[16, 7], [17, 7], [18, 7], [21, 7], [22, 7], [23, 7], [18, 8], [19, 8], [23, 8], [24, 8]]

**Found wrong connections in List InMI to MI.
**Fixed the bug. Hopefully it is fixed.

MI to InMI
[[0, 0], [1, 0], [5, 0], [6, 0], [1, 1], [2, 1], [3, 1], [6, 1], [7, 1], [8, 1], 
[3, 2], [4, 2], [8, 2], [9, 2], [5, 3], [6, 3], [10, 3], [11, 3], [15, 3], [16, 3], 
[6, 4], [7, 4], [8, 4], [11, 4], [12, 4], [13, 4], [16, 4], [17, 4], [18, 4], 
[8, 5], [9, 5], [13, 5], [14, 5], [18, 5], [19, 5], [15, 6], [16, 6], [20, 6], [21, 6], 
[16, 7], [17, 7], [18, 7], [21, 7], [22, 7], [23, 7], [18, 8], [19, 8], [23, 8], [24, 8]]
InMI to MI
[[0, 0], [0, 1], [0, 2], [0, 5], [0, 6], [0, 7], [0, 10], [0, 11], [0, 12], [1, 0], 
[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], 
[2, 2], [2, 3], [2, 4], [2, 7], [2, 8], [2, 9], [2, 12], [2, 13], [2, 14], 
[3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [3, 10], [3, 11], [3, 12], [3, 15], [3, 16], [3, 17], [3, 20], [3, 21], [3, 22], 
[4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 23], [4, 24], 
[5, 2], [5, 3], [5, 4], [5, 7], [5, 8], [5, 9], [5, 12], [5, 13], [5, 14], [5, 17], [5, 18], [5, 19], [5, 22], [5, 23], [5, 24], 
[6, 10], [6, 11], [6, 12], [6, 15], [6, 16], [6, 17], [6, 20], [6, 21], [6, 22], 
[7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 20], [7, 21], [7, 22], [7, 23], [7, 24], 
[8, 12], [8, 13], [8, 14], [8, 17], [8, 18], [8, 19], [8, 22], [8, 23], [8, 24]]

**print the following connections: Feedforward E->E, Within layer E->I and I->E.

*20jan28
**testing the connectivity----

E to V1
[[0, 0], [1, 0], [2, 0], [20, 0], [21, 0], [22, 0], [40, 0], [41, 0], [42, 0], [0, 1], [1, 1], [2, 1], [3, 1], [20, 1], [21, 1], [22, 1], [23, 1], [40, 1], [41, 1], [42, 1], [43, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [20, 2], [21, 2], [22, 2], [23, 2], [24, 2], [40, 2], [41, 2], [42, 2], [43, 2], [44, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [21, 3], [22, 3], [23, 3], [24, 3], [25, 3], [41, 3], [42, 3], [43, 3], [44, 3], [45, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [22, 4], [23, 4], [24, 4], [25, 4], [26, 4], [42, 4], [43, 4], [44, 4], [45, 4], [46, 4], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [23, 5], [24, 5], [25, 5], [26, 5], [27, 5], [43, 5], [44, 5], [45, 5], [46, 5], [47, 5], [4, 6], [5, 6], [6, 6], [7, 6], [8, 6], [24, 6], [25, 6], [26, 6], [27, 6], [28, 6], [44, 6], [45, 6], [46, 6], [47, 6], [48, 6], [5, 7], [6, 7], [7, 7], [8, 7], [9, 7], [25, 7], [26, 7], [27, 7], [28, 7], [29, 7], [45, 7], [46, 7], [47, 7], [48, 7], [49, 7], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [26, 8], [27, 8], [28, 8], [29, 8], [30, 8], [46, 8], [47, 8], [48, 8], [49, 8], [50, 8], [7, 9], [8, 9], [9, 9], [10, 9], [11, 9], [27, 9], [28, 9], [29, 9], [30, 9], [31, 9], [47, 9], [48, 9], [49, 9], [50, 9], [51, 9], [8, 10], [9, 10], [10, 10], [11, 10], [12, 10], [28, 10], [29, 10], [30, 10], [31, 10], [32, 10], [48, 10], [49, 10], [50, 10], [51, 10], [52, 10], [9, 11], [10, 11], [11, 11], [12, 11], [13, 11], [29, 11], [30, 11], [31, 11], [32, 11], [33, 11], [49, 11], [50, 11], [51, 11], [52, 11], [53, 11], [10, 12], [11, 12], [12, 12], [13, 12], [14, 12], [30, 12], [31, 12], [32, 12], [33, 12], [34, 12], [50, 12], [51, 12], [52, 12], [53, 12], [54, 12], [11, 13], [12, 13], [13, 13], [14, 13], [15, 13], [31, 13], [32, 13], [33, 13], [34, 13], [35, 13], [51, 13], [52, 13], [53, 13], [54, 13], [55, 13], [12, 14], [13, 14], [14, 14], [15, 14], [16, 14], [32, 14], [33, 14], [34, 14], [35, 14], [36, 14], [52, 14], [53, 14], [54, 14], [55, 14], [56, 14], [13, 15], [14, 15], [15, 15], [16, 15], [17, 15], [33, 15], [34, 15], [35, 15], [36, 15], [37, 15], [53, 15], [54, 15], [55, 15], [56, 15], [57, 15], [14, 16], [15, 16], [16, 16], [17, 16], [18, 16], [34, 16], [35, 16], [36, 16], [37, 16], [38, 16], [54, 16], [55, 16], [56, 16], [57, 16], [58, 16], [15, 17], [16, 17], [17, 17], [18, 17], [19, 17], [35, 17], [36, 17], [37, 17], [38, 17], [39, 17], [55, 17], [56, 17], [57, 17], [58, 17], [59, 17], [16, 18], [17, 18], [18, 18], [19, 18], [36, 18], [37, 18], [38, 18], [39, 18], [56, 18], [57, 18], [58, 18], [59, 18], [17, 19], [18, 19], [19, 19], [37, 19], [38, 19], [39, 19], [57, 19], [58, 19], [59, 19], [0, 20], [1, 20], [2, 20], [20, 20], [21, 20], [22, 20], [40, 20], [41, 20], [42, 20], [60, 20], [61, 20], [62, 20], [0, 21], [1, 21], [2, 21], [3, 21], [20, 21], [21, 21], [22, 21], [23, 21], [40, 21], [41, 21], [42, 21], [43, 21], [60, 21], [61, 21], [62, 21], [63, 21], [0, 22], [1, 22], [2, 22], [3, 22], [4, 22], [20, 22], [21, 22], [22, 22], [23, 22], [24, 22], [40, 22], [41, 22], [42, 22], [43, 22], [44, 22], [60, 22], [61, 22], [62, 22], [63, 22], [64, 22], [1, 23], [2, 23], [3, 23], [4, 23], [5, 23], [21, 23], [22, 23], [23, 23], [24, 23], [25, 23], [41, 23], [42, 23], [43, 23], [44, 23], [45, 23], [61, 23], [62, 23], [63, 23], [64, 23], [65, 23], [2, 24], [3, 24], [4, 24], [5, 24], [6, 24], [22, 24], [23, 24], [24, 24], [25, 24], [26, 24], [42, 24], [43, 24], [44, 24], [45, 24], [46, 24], [62, 24], [63, 24], [64, 24], [65, 24], [66, 24], [3, 25], [4, 25], [5, 25], [6, 25], [7, 25], [23, 25], [24, 25], [25, 25], [26, 25], [27, 25], [43, 25], [44, 25], [45, 25], [46, 25], [47, 25], [63, 25], [64, 25], [65, 25], [66, 25], [67, 25], [4, 26], [5, 26], [6, 26], [7, 26], [8, 26], [24, 26], [25, 26], [26, 26], [27, 26], [28, 26], [44, 26], [45, 26], [46, 26], [47, 26], [48, 26], [64, 26], [65, 26], [66, 26], [67, 26], [68, 26], [5, 27], [6, 27], [7, 27], [8, 27], [9, 27], [25, 27], [26, 27], [27, 27], [28, 27], [29, 27], [45, 27], [46, 27], [47, 27], [48, 27], [49, 27], [65, 27], [66, 27], [67, 27], [68, 27], [69, 27], [6, 28], [7, 28], [8, 28], [9, 28], [10, 28], [26, 28], [27, 28], [28, 28], [29, 28], [30, 28], [46, 28], [47, 28], [48, 28], [49, 28], [50, 28], [66, 28], [67, 28], [68, 28], [69, 28], [70, 28], [7, 29], [8, 29], [9, 29], [10, 29], [11, 29], [27, 29], [28, 29], [29, 29], [30, 29], [31, 29], [47, 29], [48, 29], [49, 29], [50, 29], [51, 29], [67, 29], [68, 29], [69, 29], [70, 29], [71, 29], [8, 30], [9, 30], [10, 30], [11, 30], [12, 30], [28, 30], [29, 30], [30, 30], [31, 30], [32, 30], [48, 30], [49, 30], [50, 30], [51, 30], [52, 30], [68, 30], [69, 30], [70, 30], [71, 30], [72, 30], [9, 31], [10, 31], [11, 31], [12, 31], [13, 31], [29, 31], [30, 31], [31, 31], [32, 31], [33, 31], [49, 31], [50, 31], [51, 31], [52, 31], [53, 31], [69, 31], [70, 31], [71, 31], [72, 31], [73, 31], [10, 32], [11, 32], [12, 32], [13, 32], [14, 32], [30, 32], [31, 32], [32, 32], [33, 32], [34, 32], [50, 32], [51, 32], [52, 32], [53, 32], [54, 32], [70, 32], [71, 32], [72, 32], [73, 32], [74, 32], [11, 33], [12, 33], [13, 33], [14, 33], [15, 33], [31, 33], [32, 33], [33, 33], [34, 33], [35, 33], [51, 33], [52, 33], [53, 33], [54, 33], [55, 33], [71, 33], [72, 33], [73, 33], [74, 33], [75, 33], [12, 34], [13, 34], [14, 34], [15, 34], [16, 34], [32, 34], [33, 34], [34, 34], [35, 34], [36, 34], [52, 34], [53, 34], [54, 34], [55, 34], [56, 34], [72, 34], [73, 34], [74, 34], [75, 34], [76, 34], [13, 35], [14, 35], [15, 35], [16, 35], [17, 35], [33, 35], [34, 35], [35, 35], [36, 35], [37, 35], [53, 35], [54, 35], [55, 35], [56, 35], [57, 35], [73, 35], [74, 35], [75, 35], [76, 35], [77, 35], [14, 36], [15, 36], [16, 36], [17, 36], [18, 36], [34, 36], [35, 36], [36, 36], [37, 36], [38, 36], [54, 36], [55, 36], [56, 36], [57, 36], [58, 36], [74, 36], [75, 36], [76, 36], [77, 36], [78, 36], [15, 37], [16, 37], [17, 37], [18, 37], [19, 37], [35, 37], [36, 37], [37, 37], [38, 37], [39, 37], [55, 37], [56, 37], [57, 37], [58, 37], [59, 37], [75, 37], [76, 37], [77, 37], [78, 37], [79, 37], [16, 38], [17, 38], [18, 38], [19, 38], [36, 38], [37, 38], [38, 38], [39, 38], [56, 38], [57, 38], [58, 38], [59, 38], [76, 38], [77, 38], [78, 38], [79, 38], [17, 39], [18, 39], [19, 39], [37, 39], [38, 39], [39, 39], [57, 39], [58, 39], [59, 39], [77, 39], [78, 39], [79, 39], [0, 40], [1, 40], [2, 40], [20, 40], [21, 40], [22, 40], [40, 40], [41, 40], [42, 40], [60, 40], [61, 40], [62, 40], [80, 40], [81, 40], [82, 40], [0, 41], [1, 41], [2, 41], [3, 41], [20, 41], [21, 41], [22, 41], [23, 41], [40, 41], [41, 41], [42, 41], [43, 41], [60, 41], [61, 41], [62, 41], [63, 41], [80, 41], [81, 41], [82, 41], [83, 41], [0, 42], [1, 42], [2, 42], [3, 42], [4, 42], [20, 42], [21, 42], [22, 42], [23, 42], [24, 42], [40, 42], [41, 42], [42, 42], [43, 42], [44, 42], [60, 42], [61, 42], [62, 42], [63, 42], [64, 42], [80, 42], [81, 42], [82, 42], [83, 42], [84, 42], [1, 43], [2, 43], [3, 43], [4, 43], [5, 43], [21, 43], [22, 43], [23, 43], [24, 43], [25, 43], [41, 43], [42, 43], [43, 43], [44, 43], [45, 43], [61, 43], [62, 43], [63, 43], [64, 43], [65, 43], [81, 43], [82, 43], [83, 43], [84, 43], [85, 43], [2, 44], [3, 44], [4, 44], [5, 44], [6, 44], [22, 44], [23, 44], [24, 44], [25, 44], [26, 44], [42, 44], [43, 44], [44, 44], [45, 44], [46, 44], [62, 44], [63, 44], [64, 44], [65, 44], [66, 44], [82, 44], [83, 44], [84, 44], [85, 44], [86, 44], [3, 45], [4, 45], [5, 45], [6, 45], [7, 45], [23, 45], [24, 45], [25, 45], [26, 45], [27, 45], [43, 45], [44, 45], [45, 45], [46, 45], [47, 45], [63, 45], [64, 45], [65, 45], [66, 45], [67, 45], [83, 45], [84, 45], [85, 45], [86, 45], [87, 45], [4, 46], [5, 46], [6, 46], [7, 46], [8, 46], [24, 46], [25, 46], [26, 46], [27, 46], [28, 46], [44, 46], [45, 46], [46, 46], [47, 46], [48, 46], [64, 46], [65, 46], [66, 46], [67, 46], [68, 46], [84, 46], [85, 46], [86, 46], [87, 46], [88, 46], [5, 47], [6, 47], [7, 47], [8, 47], [9, 47], [25, 47], [26, 47], [27, 47], [28, 47], [29, 47], [45, 47], [46, 47], [47, 47], [48, 47], [49, 47], [65, 47], [66, 47], [67, 47], [68, 47], [69, 47], [85, 47], [86, 47], [87, 47], [88, 47], [89, 47], [6, 48], [7, 48], [8, 48], [9, 48], [10, 48], [26, 48], [27, 48], [28, 48], [29, 48], [30, 48], [46, 48], [47, 48], [48, 48], [49, 48], [50, 48], [66, 48], [67, 48], [68, 48], [69, 48], [70, 48], [86, 48], [87, 48], [88, 48], [89, 48], [90, 48], [7, 49], [8, 49], [9, 49], [10, 49], [11, 49], [27, 49], [28, 49], [29, 49], [30, 49], [31, 49], [47, 49], [48, 49], [49, 49], [50, 49], [51, 49], [67, 49], [68, 49], [69, 49], [70, 49], [71, 49], [87, 49], [88, 49], [89, 49], [90, 49], [91, 49], [8, 50], [9, 50], [10, 50], [11, 50], [12, 50], [28, 50], [29, 50], [30, 50], [31, 50], [32, 50], [48, 50], [49, 50], [50, 50], [51, 50], [52, 50], [68, 50], [69, 50], [70, 50], [71, 50], [72, 50], [88, 50], [89, 50], [90, 50], [91, 50], [92, 50], [9, 51], [10, 51], [11, 51], [12, 51], [13, 51], [29, 51], [30, 51], [31, 51], [32, 51], [33, 51], [49, 51], [50, 51], [51, 51], [52, 51], [53, 51], [69, 51], [70, 51], [71, 51], [72, 51], [73, 51], [89, 51], [90, 51], [91, 51], [92, 51], [93, 51], [10, 52], [11, 52], [12, 52], [13, 52], [14, 52], [30, 52], [31, 52], [32, 52], [33, 52], [34, 52], [50, 52], [51, 52], [52, 52], [53, 52], [54, 52], [70, 52], [71, 52], [72, 52], [73, 52], [74, 52], [90, 52], [91, 52], [92, 52], [93, 52], [94, 52], [11, 53], [12, 53], [13, 53], [14, 53], [15, 53], [31, 53], [32, 53], [33, 53], [34, 53], [35, 53], [51, 53], [52, 53], [53, 53], [54, 53], [55, 53], [71, 53], [72, 53], [73, 53], [74, 53], [75, 53], [91, 53], [92, 53], [93, 53], [94, 53], [95, 53], [12, 54], [13, 54], [14, 54], [15, 54], [16, 54], [32, 54], [33, 54], [34, 54], [35, 54], [36, 54], [52, 54], [53, 54], [54, 54], [55, 54], [56, 54], [72, 54], [73, 54], [74, 54], [75, 54], [76, 54], [92, 54], [93, 54], [94, 54], [95, 54], [96, 54], [13, 55], [14, 55], [15, 55], [16, 55], [17, 55], [33, 55], [34, 55], [35, 55], [36, 55], [37, 55], [53, 55], [54, 55], [55, 55], [56, 55], [57, 55], [73, 55], [74, 55], [75, 55], [76, 55], [77, 55], [93, 55], [94, 55], [95, 55], [96, 55], [97, 55], [14, 56], [15, 56], [16, 56], [17, 56], [18, 56], [34, 56], [35, 56], [36, 56], [37, 56], [38, 56], [54, 56], [55, 56], [56, 56], [57, 56], [58, 56], [74, 56], [75, 56], [76, 56], [77, 56], [78, 56], [94, 56], [95, 56], [96, 56], [97, 56], [98, 56], [15, 57], [16, 57], [17, 57], [18, 57], [19, 57], [35, 57], [36, 57], [37, 57], [38, 57], [39, 57], [55, 57], [56, 57], [57, 57], [58, 57], [59, 57], [75, 57], [76, 57], [77, 57], [78, 57], [79, 57], [95, 57], [96, 57], [97, 57], [98, 57], [99, 57], [16, 58], [17, 58], [18, 58], [19, 58], [36, 58], [37, 58], [38, 58], [39, 58], [56, 58], [57, 58], [58, 58], [59, 58], [76, 58], [77, 58], [78, 58], [79, 58], [96, 58], [97, 58], [98, 58], [99, 58], [17, 59], [18, 59], [19, 59], [37, 59], [38, 59], [39, 59], [57, 59], [58, 59], [59, 59], [77, 59], [78, 59], [79, 59], [97, 59], [98, 59], [99, 59], [20, 60], [21, 60], [22, 60], [40, 60], [41, 60], [42, 60], [60, 60], [61, 60], [62, 60], [80, 60], [81, 60], [82, 60], [100, 60], [101, 60], [102, 60], [20, 61], [21, 61], [22, 61], [23, 61], [40, 61], [41, 61], [42, 61], [43, 61], [60, 61], [61, 61], [62, 61], [63, 61], [80, 61], [81, 61], [82, 61], [83, 61], [100, 61], [101, 61], [102, 61], [103, 61], [20, 62], [21, 62], [22, 62], [23, 62], [24, 62], [40, 62], [41, 62], [42, 62], [43, 62], [44, 62], [60, 62], [61, 62], [62, 62], [63, 62], [64, 62], [80, 62], [81, 62], [82, 62], [83, 62], [84, 62], [100, 62], [101, 62], [102, 62], [103, 62], [104, 62], [21, 63], [22, 63], [23, 63], [24, 63], [25, 63], [41, 63], [42, 63], [43, 63], [44, 63], [45, 63], [61, 63], [62, 63], [63, 63], [64, 63], [65, 63], [81, 63], [82, 63], [83, 63], [84, 63], [85, 63], [101, 63], [102, 63], [103, 63], [104, 63], [105, 63], [22, 64], [23, 64], [24, 64], [25, 64], [26, 64], [42, 64], [43, 64], [44, 64], [45, 64], [46, 64], [62, 64], [63, 64], [64, 64], [65, 64], [66, 64], [82, 64], [83, 64], [84, 64], [85, 64], [86, 64], [102, 64], [103, 64], [104, 64], [105, 64], [106, 64], [23, 65], [24, 65], [25, 65], [26, 65], [27, 65], [43, 65], [44, 65], [45, 65], [46, 65], [47, 65], [63, 65], [64, 65], [65, 65], [66, 65], [67, 65], [83, 65], [84, 65], [85, 65], [86, 65], [87, 65], [103, 65], [104, 65], [105, 65], [106, 65], [107, 65], [24, 66], [25, 66], [26, 66], [27, 66], [28, 66], [44, 66], [45, 66], [46, 66], [47, 66], [48, 66], [64, 66], [65, 66], [66, 66], [67, 66], [68, 66], [84, 66], [85, 66], [86, 66], [87, 66], [88, 66], [104, 66], [105, 66], [106, 66], [107, 66], [108, 66], [25, 67], [26, 67], [27, 67], [28, 67], [29, 67], [45, 67], [46, 67], [47, 67], [48, 67], [49, 67], [65, 67], [66, 67], [67, 67], [68, 67], [69, 67], [85, 67], [86, 67], [87, 67], [88, 67], [89, 67], [105, 67], [106, 67], [107, 67], [108, 67], [109, 67], [26, 68], [27, 68], [28, 68], [29, 68], [30, 68], [46, 68], [47, 68], [48, 68], [49, 68], [50, 68], [66, 68], [67, 68], [68, 68], [69, 68], [70, 68], [86, 68], [87, 68], [88, 68], [89, 68], [90, 68], [106, 68], [107, 68], [108, 68], [109, 68], [110, 68], [27, 69], [28, 69], [29, 69], [30, 69], [31, 69], [47, 69], [48, 69], [49, 69], [50, 69], [51, 69], [67, 69], [68, 69], [69, 69], [70, 69], [71, 69], [87, 69], [88, 69], [89, 69], [90, 69], [91, 69], [107, 69], [108, 69], [109, 69], [110, 69], [111, 69], [28, 70], [29, 70], [30, 70], [31, 70], [32, 70], [48, 70], [49, 70], [50, 70], [51, 70], [52, 70], [68, 70], [69, 70], [70, 70], [71, 70], [72, 70], [88, 70], [89, 70], [90, 70], [91, 70], [92, 70], [108, 70], [109, 70], [110, 70], [111, 70], [112, 70], [29, 71], [30, 71], [31, 71], [32, 71], [33, 71], [49, 71], [50, 71], [51, 71], [52, 71], [53, 71], [69, 71], [70, 71], [71, 71], [72, 71], [73, 71], [89, 71], [90, 71], [91, 71], [92, 71], [93, 71], [109, 71], [110, 71], [111, 71], [112, 71], [113, 71], [30, 72], [31, 72], [32, 72], [33, 72], [34, 72], [50, 72], [51, 72], [52, 72], [53, 72], [54, 72], [70, 72], [71, 72], [72, 72], [73, 72], [74, 72], [90, 72], [91, 72], [92, 72], [93, 72], [94, 72], [110, 72], [111, 72], [112, 72], [113, 72], [114, 72], [31, 73], [32, 73], [33, 73], [34, 73], [35, 73], [51, 73], [52, 73], [53, 73], [54, 73], [55, 73], [71, 73], [72, 73], [73, 73], [74, 73], [75, 73], [91, 73], [92, 73], [93, 73], [94, 73], [95, 73], [111, 73], [112, 73], [113, 73], [114, 73], [115, 73], [32, 74], [33, 74], [34, 74], [35, 74], [36, 74], [52, 74], [53, 74], [54, 74], [55, 74], [56, 74], [72, 74], [73, 74], [74, 74], [75, 74], [76, 74], [92, 74], [93, 74], [94, 74], [95, 74], [96, 74], [112, 74], [113, 74], [114, 74], [115, 74], [116, 74], [33, 75], [34, 75], [35, 75], [36, 75], [37, 75], [53, 75], [54, 75], [55, 75], [56, 75], [57, 75], [73, 75], [74, 75], [75, 75], [76, 75], [77, 75], [93, 75], [94, 75], [95, 75], [96, 75], [97, 75], [113, 75], [114, 75], [115, 75], [116, 75], [117, 75], [34, 76], [35, 76], [36, 76], [37, 76], [38, 76], [54, 76], [55, 76], [56, 76], [57, 76], [58, 76], [74, 76], [75, 76], [76, 76], [77, 76], [78, 76], [94, 76], [95, 76], [96, 76], [97, 76], [98, 76], [114, 76], [115, 76], [116, 76], [117, 76], [118, 76], [35, 77], [36, 77], [37, 77], [38, 77], [39, 77], [55, 77], [56, 77], [57, 77], [58, 77], [59, 77], [75, 77], [76, 77], [77, 77], [78, 77], [79, 77], [95, 77], [96, 77], [97, 77], [98, 77], [99, 77], [115, 77], [116, 77], [117, 77], [118, 77], [119, 77], [36, 78], [37, 78], [38, 78], [39, 78], [56, 78], [57, 78], [58, 78], [59, 78], [76, 78], [77, 78], [78, 78], [79, 78], [96, 78], [97, 78], [98, 78], [99, 78], [116, 78], [117, 78], [118, 78], [119, 78], [37, 79], [38, 79], [39, 79], [57, 79], [58, 79], [59, 79], [77, 79], [78, 79], [79, 79], [97, 79], [98, 79], [99, 79], [117, 79], [118, 79], [119, 79], [40, 80], [41, 80], [42, 80], [60, 80], [61, 80], [62, 80], [80, 80], [81, 80], [82, 80], [100, 80], [101, 80], [102, 80], [120, 80], [121, 80], [122, 80], [40, 81], [41, 81], [42, 81], [43, 81], [60, 81], [61, 81], [62, 81], [63, 81], [80, 81], [81, 81], [82, 81], [83, 81], [100, 81], [101, 81], [102, 81], [103, 81], [120, 81], [121, 81], [122, 81], [123, 81], [40, 82], [41, 82], [42, 82], [43, 82], [44, 82], [60, 82], [61, 82], [62, 82], [63, 82], [64, 82], [80, 82], [81, 82], [82, 82], [83, 82], [84, 82], [100, 82], [101, 82], [102, 82], [103, 82], [104, 82], [120, 82], [121, 82], [122, 82], [123, 82], [124, 82], [41, 83], [42, 83], [43, 83], [44, 83], [45, 83], [61, 83], [62, 83], [63, 83], [64, 83], [65, 83], [81, 83], [82, 83], [83, 83], [84, 83], [85, 83], [101, 83], [102, 83], [103, 83], [104, 83], [105, 83], [121, 83], [122, 83], [123, 83], [124, 83], [125, 83], [42, 84], [43, 84], [44, 84], [45, 84], [46, 84], [62, 84], [63, 84], [64, 84], [65, 84], [66, 84], [82, 84], [83, 84], [84, 84], [85, 84], [86, 84], [102, 84], [103, 84], [104, 84], [105, 84], [106, 84], [122, 84], [123, 84], [124, 84], [125, 84], [126, 84], [43, 85], [44, 85], [45, 85], [46, 85], [47, 85], [63, 85], [64, 85], [65, 85], [66, 85], [67, 85], [83, 85], [84, 85], [85, 85], [86, 85], [87, 85], [103, 85], [104, 85], [105, 85], [106, 85], [107, 85], [123, 85], [124, 85], [125, 85], [126, 85], [127, 85], [44, 86], [45, 86], [46, 86], [47, 86], [48, 86], [64, 86], [65, 86], [66, 86], [67, 86], [68, 86], [84, 86], [85, 86], [86, 86], [87, 86], [88, 86], [104, 86], [105, 86], [106, 86], [107, 86], [108, 86], [124, 86], [125, 86], [126, 86], [127, 86], [128, 86], [45, 87], [46, 87], [47, 87], [48, 87], [49, 87], [65, 87], [66, 87], [67, 87], [68, 87], [69, 87], [85, 87], [86, 87], [87, 87], [88, 87], [89, 87], [105, 87], [106, 87], [107, 87], [108, 87], [109, 87], [125, 87], [126, 87], [127, 87], [128, 87], [129, 87], [46, 88], [47, 88], [48, 88], [49, 88], [50, 88], [66, 88], [67, 88], [68, 88], [69, 88], [70, 88], [86, 88], [87, 88], [88, 88], [89, 88], [90, 88], [106, 88], [107, 88], [108, 88], [109, 88], [110, 88], [126, 88], [127, 88], [128, 88], [129, 88], [130, 88], [47, 89], [48, 89], [49, 89], [50, 89], [51, 89], [67, 89], [68, 89], [69, 89], [70, 89], [71, 89], [87, 89], [88, 89], [89, 89], [90, 89], [91, 89], [107, 89], [108, 89], [109, 89], [110, 89], [111, 89], [127, 89], [128, 89], [129, 89], [130, 89], [131, 89], [48, 90], [49, 90], [50, 90], [51, 90], [52, 90], [68, 90], [69, 90], [70, 90], [71, 90], [72, 90], [88, 90], [89, 90], [90, 90], [91, 90], [92, 90], [108, 90], [109, 90], [110, 90], [111, 90], [112, 90], [128, 90], [129, 90], [130, 90], [131, 90], [132, 90], [49, 91], [50, 91], [51, 91], [52, 91], [53, 91], [69, 91], [70, 91], [71, 91], [72, 91], [73, 91], [89, 91], [90, 91], [91, 91], [92, 91], [93, 91], [109, 91], [110, 91], [111, 91], [112, 91], [113, 91], [129, 91], [130, 91], [131, 91], [132, 91], [133, 91], [50, 92], [51, 92], [52, 92], [53, 92], [54, 92], [70, 92], [71, 92], [72, 92], [73, 92], [74, 92], [90, 92], [91, 92], [92, 92], [93, 92], [94, 92], [110, 92], [111, 92], [112, 92], [113, 92], [114, 92], [130, 92], [131, 92], [132, 92], [133, 92], [134, 92], [51, 93], [52, 93], [53, 93], [54, 93], [55, 93], [71, 93], [72, 93], [73, 93], [74, 93], [75, 93], [91, 93], [92, 93], [93, 93], [94, 93], [95, 93], [111, 93], [112, 93], [113, 93], [114, 93], [115, 93], [131, 93], [132, 93], [133, 93], [134, 93], [135, 93], [52, 94], [53, 94], [54, 94], [55, 94], [56, 94], [72, 94], [73, 94], [74, 94], [75, 94], [76, 94], [92, 94], [93, 94], [94, 94], [95, 94], [96, 94], [112, 94], [113, 94], [114, 94], [115, 94], [116, 94], [132, 94], [133, 94], [134, 94], [135, 94], [136, 94], [53, 95], [54, 95], [55, 95], [56, 95], [57, 95], [73, 95], [74, 95], [75, 95], [76, 95], [77, 95], [93, 95], [94, 95], [95, 95], [96, 95], [97, 95], [113, 95], [114, 95], [115, 95], [116, 95], [117, 95], [133, 95], [134, 95], [135, 95], [136, 95], [137, 95], [54, 96], [55, 96], [56, 96], [57, 96], [58, 96], [74, 96], [75, 96], [76, 96], [77, 96], [78, 96], [94, 96], [95, 96], [96, 96], [97, 96], [98, 96], [114, 96], [115, 96], [116, 96], [117, 96], [118, 96], [134, 96], [135, 96], [136, 96], [137, 96], [138, 96], [55, 97], [56, 97], [57, 97], [58, 97], [59, 97], [75, 97], [76, 97], [77, 97], [78, 97], [79, 97], [95, 97], [96, 97], [97, 97], [98, 97], [99, 97], [115, 97], [116, 97], [117, 97], [118, 97], [119, 97], [135, 97], [136, 97], [137, 97], [138, 97], [139, 97], [56, 98], [57, 98], [58, 98], [59, 98], [76, 98], [77, 98], [78, 98], [79, 98], [96, 98], [97, 98], [98, 98], [99, 98], [116, 98], [117, 98], [118, 98], [119, 98], [136, 98], [137, 98], [138, 98], [139, 98], [57, 99], [58, 99], [59, 99], [77, 99], [78, 99], [79, 99], [97, 99], [98, 99], [99, 99], [117, 99], [118, 99], [119, 99], [137, 99], [138, 99], [139, 99], [60, 100], [61, 100], [62, 100], [80, 100], [81, 100], [82, 100], [100, 100], [101, 100], [102, 100], [120, 100], [121, 100], [122, 100], [140, 100], [141, 100], [142, 100], [60, 101], [61, 101], [62, 101], [63, 101], [80, 101], [81, 101], [82, 101], [83, 101], [100, 101], [101, 101], [102, 101], [103, 101], [120, 101], [121, 101], [122, 101], [123, 101], [140, 101], [141, 101], [142, 101], [143, 101], [60, 102], [61, 102], [62, 102], [63, 102], [64, 102], [80, 102], [81, 102], [82, 102], [83, 102], [84, 102], [100, 102], [101, 102], [102, 102], [103, 102], [104, 102], [120, 102], [121, 102], [122, 102], [123, 102], [124, 102], [140, 102], [141, 102], [142, 102], [143, 102], [144, 102], [61, 103], [62, 103], [63, 103], [64, 103], [65, 103], [81, 103], [82, 103], [83, 103], [84, 103], [85, 103], [101, 103], [102, 103], [103, 103], [104, 103], [105, 103], [121, 103], [122, 103], [123, 103], [124, 103], [125, 103], [141, 103], [142, 103], [143, 103], [144, 103], [145, 103], [62, 104], [63, 104], [64, 104], [65, 104], [66, 104], [82, 104], [83, 104], [84, 104], [85, 104], [86, 104], [102, 104], [103, 104], [104, 104], [105, 104], [106, 104], [122, 104], [123, 104], [124, 104], [125, 104], [126, 104], [142, 104], [143, 104], [144, 104], [145, 104], [146, 104], [63, 105], [64, 105], [65, 105], [66, 105], [67, 105], [83, 105], [84, 105], [85, 105], [86, 105], [87, 105], [103, 105], [104, 105], [105, 105], [106, 105], [107, 105], [123, 105], [124, 105], [125, 105], [126, 105], [127, 105], [143, 105], [144, 105], [145, 105], [146, 105], [147, 105], [64, 106], [65, 106], [66, 106], [67, 106], [68, 106], [84, 106], [85, 106], [86, 106], [87, 106], [88, 106], [104, 106], [105, 106], [106, 106], [107, 106], [108, 106], [124, 106], [125, 106], [126, 106], [127, 106], [128, 106], [144, 106], [145, 106], [146, 106], [147, 106], [148, 106], [65, 107], [66, 107], [67, 107], [68, 107], [69, 107], [85, 107], [86, 107], [87, 107], [88, 107], [89, 107], [105, 107], [106, 107], [107, 107], [108, 107], [109, 107], [125, 107], [126, 107], [127, 107], [128, 107], [129, 107], [145, 107], [146, 107], [147, 107], [148, 107], [149, 107], [66, 108], [67, 108], [68, 108], [69, 108], [70, 108], [86, 108], [87, 108], [88, 108], [89, 108], [90, 108], [106, 108], [107, 108], [108, 108], [109, 108], [110, 108], [126, 108], [127, 108], [128, 108], [129, 108], [130, 108], [146, 108], [147, 108], [148, 108], [149, 108], [150, 108], [67, 109], [68, 109], [69, 109], [70, 109], [71, 109], [87, 109], [88, 109], [89, 109], [90, 109], [91, 109], [107, 109], [108, 109], [109, 109], [110, 109], [111, 109], [127, 109], [128, 109], [129, 109], [130, 109], [131, 109], [147, 109], [148, 109], [149, 109], [150, 109], [151, 109], [68, 110], [69, 110], [70, 110], [71, 110], [72, 110], [88, 110], [89, 110], [90, 110], [91, 110], [92, 110], [108, 110], [109, 110], [110, 110], [111, 110], [112, 110], [128, 110], [129, 110], [130, 110], [131, 110], [132, 110], [148, 110], [149, 110], [150, 110], [151, 110], [152, 110], [69, 111], [70, 111], [71, 111], [72, 111], [73, 111], [89, 111], [90, 111], [91, 111], [92, 111], [93, 111], [109, 111], [110, 111], [111, 111], [112, 111], [113, 111], [129, 111], [130, 111], [131, 111], [132, 111], [133, 111], [149, 111], [150, 111], [151, 111], [152, 111], [153, 111], [70, 112], [71, 112], [72, 112], [73, 112], [74, 112], [90, 112], [91, 112], [92, 112], [93, 112], [94, 112], [110, 112], [111, 112], [112, 112], [113, 112], [114, 112], [130, 112], [131, 112], [132, 112], [133, 112], [134, 112], [150, 112], [151, 112], [152, 112], [153, 112], [154, 112], [71, 113], [72, 113], [73, 113], [74, 113], [75, 113], [91, 113], [92, 113], [93, 113], [94, 113], [95, 113], [111, 113], [112, 113], [113, 113], [114, 113], [115, 113], [131, 113], [132, 113], [133, 113], [134, 113], [135, 113], [151, 113], [152, 113], [153, 113], [154, 113], [155, 113], [72, 114], [73, 114], [74, 114], [75, 114], [76, 114], [92, 114], [93, 114], [94, 114], [95, 114], [96, 114], [112, 114], [113, 114], [114, 114], [115, 114], [116, 114], [132, 114], [133, 114], [134, 114], [135, 114], [136, 114], [152, 114], [153, 114], [154, 114], [155, 114], [156, 114], [73, 115], [74, 115], [75, 115], [76, 115], [77, 115], [93, 115], [94, 115], [95, 115], [96, 115], [97, 115], [113, 115], [114, 115], [115, 115], [116, 115], [117, 115], [133, 115], [134, 115], [135, 115], [136, 115], [137, 115], [153, 115], [154, 115], [155, 115], [156, 115], [157, 115], [74, 116], [75, 116], [76, 116], [77, 116], [78, 116], [94, 116], [95, 116], [96, 116], [97, 116], [98, 116], [114, 116], [115, 116], [116, 116], [117, 116], [118, 116], [134, 116], [135, 116], [136, 116], [137, 116], [138, 116], [154, 116], [155, 116], [156, 116], [157, 116], [158, 116], [75, 117], [76, 117], [77, 117], [78, 117], [79, 117], [95, 117], [96, 117], [97, 117], [98, 117], [99, 117], [115, 117], [116, 117], [117, 117], [118, 117], [119, 117], [135, 117], [136, 117], [137, 117], [138, 117], [139, 117], [155, 117], [156, 117], [157, 117], [158, 117], [159, 117], [76, 118], [77, 118], [78, 118], [79, 118], [96, 118], [97, 118], [98, 118], [99, 118], [116, 118], [117, 118], [118, 118], [119, 118], [136, 118], [137, 118], [138, 118], [139, 118], [156, 118], [157, 118], [158, 118], [159, 118], [77, 119], [78, 119], [79, 119], [97, 119], [98, 119], [99, 119], [117, 119], [118, 119], [119, 119], [137, 119], [138, 119], [139, 119], [157, 119], [158, 119], [159, 119], [80, 120], [81, 120], [82, 120], [100, 120], [101, 120], [102, 120], [120, 120], [121, 120], [122, 120], [140, 120], [141, 120], [142, 120], [160, 120], [161, 120], [162, 120], [80, 121], [81, 121], [82, 121], [83, 121], [100, 121], [101, 121], [102, 121], [103, 121], [120, 121], [121, 121], [122, 121], [123, 121], [140, 121], [141, 121], [142, 121], [143, 121], [160, 121], [161, 121], [162, 121], [163, 121], [80, 122], [81, 122], [82, 122], [83, 122], [84, 122], [100, 122], [101, 122], [102, 122], [103, 122], [104, 122], [120, 122], [121, 122], [122, 122], [123, 122], [124, 122], [140, 122], [141, 122], [142, 122], [143, 122], [144, 122], [160, 122], [161, 122], [162, 122], [163, 122], [164, 122], [81, 123], [82, 123], [83, 123], [84, 123], [85, 123], [101, 123], [102, 123], [103, 123], [104, 123], [105, 123], [121, 123], [122, 123], [123, 123], [124, 123], [125, 123], [141, 123], [142, 123], [143, 123], [144, 123], [145, 123], [161, 123], [162, 123], [163, 123], [164, 123], [165, 123], [82, 124], [83, 124], [84, 124], [85, 124], [86, 124], [102, 124], [103, 124], [104, 124], [105, 124], [106, 124], [122, 124], [123, 124], [124, 124], [125, 124], [126, 124], [142, 124], [143, 124], [144, 124], [145, 124], [146, 124], [162, 124], [163, 124], [164, 124], [165, 124], [166, 124], [83, 125], [84, 125], [85, 125], [86, 125], [87, 125], [103, 125], [104, 125], [105, 125], [106, 125], [107, 125], [123, 125], [124, 125], [125, 125], [126, 125], [127, 125], [143, 125], [144, 125], [145, 125], [146, 125], [147, 125], [163, 125], [164, 125], [165, 125], [166, 125], [167, 125], [84, 126], [85, 126], [86, 126], [87, 126], [88, 126], [104, 126], [105, 126], [106, 126], [107, 126], [108, 126], [124, 126], [125, 126], [126, 126], [127, 126], [128, 126], [144, 126], [145, 126], [146, 126], [147, 126], [148, 126], [164, 126], [165, 126], [166, 126], [167, 126], [168, 126], [85, 127], [86, 127], [87, 127], [88, 127], [89, 127], [105, 127], [106, 127], [107, 127], [108, 127], [109, 127], [125, 127], [126, 127], [127, 127], [128, 127], [129, 127], [145, 127], [146, 127], [147, 127], [148, 127], [149, 127], [165, 127], [166, 127], [167, 127], [168, 127], [169, 127], [86, 128], [87, 128], [88, 128], [89, 128], [90, 128], [106, 128], [107, 128], [108, 128], [109, 128], [110, 128], [126, 128], [127, 128], [128, 128], [129, 128], [130, 128], [146, 128], [147, 128], [148, 128], [149, 128], [150, 128], [166, 128], [167, 128], [168, 128], [169, 128], [170, 128], [87, 129], [88, 129], [89, 129], [90, 129], [91, 129], [107, 129], [108, 129], [109, 129], [110, 129], [111, 129], [127, 129], [128, 129], [129, 129], [130, 129], [131, 129], [147, 129], [148, 129], [149, 129], [150, 129], [151, 129], [167, 129], [168, 129], [169, 129], [170, 129], [171, 129], [88, 130], [89, 130], [90, 130], [91, 130], [92, 130], [108, 130], [109, 130], [110, 130], [111, 130], [112, 130], [128, 130], [129, 130], [130, 130], [131, 130], [132, 130], [148, 130], [149, 130], [150, 130], [151, 130], [152, 130], [168, 130], [169, 130], [170, 130], [171, 130], [172, 130], [89, 131], [90, 131], [91, 131], [92, 131], [93, 131], [109, 131], [110, 131], [111, 131], [112, 131], [113, 131], [129, 131], [130, 131], [131, 131], [132, 131], [133, 131], [149, 131], [150, 131], [151, 131], [152, 131], [153, 131], [169, 131], [170, 131], [171, 131], [172, 131], [173, 131], [90, 132], [91, 132], [92, 132], [93, 132], [94, 132], [110, 132], [111, 132], [112, 132], [113, 132], [114, 132], [130, 132], [131, 132], [132, 132], [133, 132], [134, 132], [150, 132], [151, 132], [152, 132], [153, 132], [154, 132], [170, 132], [171, 132], [172, 132], [173, 132], [174, 132], [91, 133], [92, 133], [93, 133], [94, 133], [95, 133], [111, 133], [112, 133], [113, 133], [114, 133], [115, 133], [131, 133], [132, 133], [133, 133], [134, 133], [135, 133], [151, 133], [152, 133], [153, 133], [154, 133], [155, 133], [171, 133], [172, 133], [173, 133], [174, 133], [175, 133], [92, 134], [93, 134], [94, 134], [95, 134], [96, 134], [112, 134], [113, 134], [114, 134], [115, 134], [116, 134], [132, 134], [133, 134], [134, 134], [135, 134], [136, 134], [152, 134], [153, 134], [154, 134], [155, 134], [156, 134], [172, 134], [173, 134], [174, 134], [175, 134], [176, 134], [93, 135], [94, 135], [95, 135], [96, 135], [97, 135], [113, 135], [114, 135], [115, 135], [116, 135], [117, 135], [133, 135], [134, 135], [135, 135], [136, 135], [137, 135], [153, 135], [154, 135], [155, 135], [156, 135], [157, 135], [173, 135], [174, 135], [175, 135], [176, 135], [177, 135], [94, 136], [95, 136], [96, 136], [97, 136], [98, 136], [114, 136], [115, 136], [116, 136], [117, 136], [118, 136], [134, 136], [135, 136], [136, 136], [137, 136], [138, 136], [154, 136], [155, 136], [156, 136], [157, 136], [158, 136], [174, 136], [175, 136], [176, 136], [177, 136], [178, 136], [95, 137], [96, 137], [97, 137], [98, 137], [99, 137], [115, 137], [116, 137], [117, 137], [118, 137], [119, 137], [135, 137], [136, 137], [137, 137], [138, 137], [139, 137], [155, 137], [156, 137], [157, 137], [158, 137], [159, 137], [175, 137], [176, 137], [177, 137], [178, 137], [179, 137], [96, 138], [97, 138], [98, 138], [99, 138], [116, 138], [117, 138], [118, 138], [119, 138], [136, 138], [137, 138], [138, 138], [139, 138], [156, 138], [157, 138], [158, 138], [159, 138], [176, 138], [177, 138], [178, 138], [179, 138], [97, 139], [98, 139], [99, 139], [117, 139], [118, 139], [119, 139], [137, 139], [138, 139], [139, 139], [157, 139], [158, 139], [159, 139], [177, 139], [178, 139], [179, 139], [100, 140], [101, 140], [102, 140], [120, 140], [121, 140], [122, 140], [140, 140], [141, 140], [142, 140], [160, 140], [161, 140], [162, 140], [180, 140], [181, 140], [182, 140], [100, 141], [101, 141], [102, 141], [103, 141], [120, 141], [121, 141], [122, 141], [123, 141], [140, 141], [141, 141], [142, 141], [143, 141], [160, 141], [161, 141], [162, 141], [163, 141], [180, 141], [181, 141], [182, 141], [183, 141], [100, 142], [101, 142], [102, 142], [103, 142], [104, 142], [120, 142], [121, 142], [122, 142], [123, 142], [124, 142], [140, 142], [141, 142], [142, 142], [143, 142], [144, 142], [160, 142], [161, 142], [162, 142], [163, 142], [164, 142], [180, 142], [181, 142], [182, 142], [183, 142], [184, 142], [101, 143], [102, 143], [103, 143], [104, 143], [105, 143], [121, 143], [122, 143], [123, 143], [124, 143], [125, 143], [141, 143], [142, 143], [143, 143], [144, 143], [145, 143], [161, 143], [162, 143], [163, 143], [164, 143], [165, 143], [181, 143], [182, 143], [183, 143], [184, 143], [185, 143], [102, 144], [103, 144], [104, 144], [105, 144], [106, 144], [122, 144], [123, 144], [124, 144], [125, 144], [126, 144], [142, 144], [143, 144], [144, 144], [145, 144], [146, 144], [162, 144], [163, 144], [164, 144], [165, 144], [166, 144], [182, 144], [183, 144], [184, 144], [185, 144], [186, 144], [103, 145], [104, 145], [105, 145], [106, 145], [107, 145], [123, 145], [124, 145], [125, 145], [126, 145], [127, 145], [143, 145], [144, 145], [145, 145], [146, 145], [147, 145], [163, 145], [164, 145], [165, 145], [166, 145], [167, 145], [183, 145], [184, 145], [185, 145], [186, 145], [187, 145], [104, 146], [105, 146], [106, 146], [107, 146], [108, 146], [124, 146], [125, 146], [126, 146], [127, 146], [128, 146], [144, 146], [145, 146], [146, 146], [147, 146], [148, 146], [164, 146], [165, 146], [166, 146], [167, 146], [168, 146], [184, 146], [185, 146], [186, 146], [187, 146], [188, 146], [105, 147], [106, 147], [107, 147], [108, 147], [109, 147], [125, 147], [126, 147], [127, 147], [128, 147], [129, 147], [145, 147], [146, 147], [147, 147], [148, 147], [149, 147], [165, 147], [166, 147], [167, 147], [168, 147], [169, 147], [185, 147], [186, 147], [187, 147], [188, 147], [189, 147], [106, 148], [107, 148], [108, 148], [109, 148], [110, 148], [126, 148], [127, 148], [128, 148], [129, 148], [130, 148], [146, 148], [147, 148], [148, 148], [149, 148], [150, 148], [166, 148], [167, 148], [168, 148], [169, 148], [170, 148], [186, 148], [187, 148], [188, 148], [189, 148], [190, 148], [107, 149], [108, 149], [109, 149], [110, 149], [111, 149], [127, 149], [128, 149], [129, 149], [130, 149], [131, 149], [147, 149], [148, 149], [149, 149], [150, 149], [151, 149], [167, 149], [168, 149], [169, 149], [170, 149], [171, 149], [187, 149], [188, 149], [189, 149], [190, 149], [191, 149], [108, 150], [109, 150], [110, 150], [111, 150], [112, 150], [128, 150], [129, 150], [130, 150], [131, 150], [132, 150], [148, 150], [149, 150], [150, 150], [151, 150], [152, 150], [168, 150], [169, 150], [170, 150], [171, 150], [172, 150], [188, 150], [189, 150], [190, 150], [191, 150], [192, 150], [109, 151], [110, 151], [111, 151], [112, 151], [113, 151], [129, 151], [130, 151], [131, 151], [132, 151], [133, 151], [149, 151], [150, 151], [151, 151], [152, 151], [153, 151], [169, 151], [170, 151], [171, 151], [172, 151], [173, 151], [189, 151], [190, 151], [191, 151], [192, 151], [193, 151], [110, 152], [111, 152], [112, 152], [113, 152], [114, 152], [130, 152], [131, 152], [132, 152], [133, 152], [134, 152], [150, 152], [151, 152], [152, 152], [153, 152], [154, 152], [170, 152], [171, 152], [172, 152], [173, 152], [174, 152], [190, 152], [191, 152], [192, 152], [193, 152], [194, 152], [111, 153], [112, 153], [113, 153], [114, 153], [115, 153], [131, 153], [132, 153], [133, 153], [134, 153], [135, 153], [151, 153], [152, 153], [153, 153], [154, 153], [155, 153], [171, 153], [172, 153], [173, 153], [174, 153], [175, 153], [191, 153], [192, 153], [193, 153], [194, 153], [195, 153], [112, 154], [113, 154], [114, 154], [115, 154], [116, 154], [132, 154], [133, 154], [134, 154], [135, 154], [136, 154], [152, 154], [153, 154], [154, 154], [155, 154], [156, 154], [172, 154], [173, 154], [174, 154], [175, 154], [176, 154], [192, 154], [193, 154], [194, 154], [195, 154], [196, 154], [113, 155], [114, 155], [115, 155], [116, 155], [117, 155], [133, 155], [134, 155], [135, 155], [136, 155], [137, 155], [153, 155], [154, 155], [155, 155], [156, 155], [157, 155], [173, 155], [174, 155], [175, 155], [176, 155], [177, 155], [193, 155], [194, 155], [195, 155], [196, 155], [197, 155], [114, 156], [115, 156], [116, 156], [117, 156], [118, 156], [134, 156], [135, 156], [136, 156], [137, 156], [138, 156], [154, 156], [155, 156], [156, 156], [157, 156], [158, 156], [174, 156], [175, 156], [176, 156], [177, 156], [178, 156], [194, 156], [195, 156], [196, 156], [197, 156], [198, 156], [115, 157], [116, 157], [117, 157], [118, 157], [119, 157], [135, 157], [136, 157], [137, 157], [138, 157], [139, 157], [155, 157], [156, 157], [157, 157], [158, 157], [159, 157], [175, 157], [176, 157], [177, 157], [178, 157], [179, 157], [195, 157], [196, 157], [197, 157], [198, 157], [199, 157], [116, 158], [117, 158], [118, 158], [119, 158], [136, 158], [137, 158], [138, 158], [139, 158], [156, 158], [157, 158], [158, 158], [159, 158], [176, 158], [177, 158], [178, 158], [179, 158], [196, 158], [197, 158], [198, 158], [199, 158], [117, 159], [118, 159], [119, 159], [137, 159], [138, 159], [139, 159], [157, 159], [158, 159], [159, 159], [177, 159], [178, 159], [179, 159], [197, 159], [198, 159], [199, 159], [120, 160], [121, 160], [122, 160], [140, 160], [141, 160], [142, 160], [160, 160], [161, 160], [162, 160], [180, 160], [181, 160], [182, 160], [200, 160], [201, 160], [202, 160], [120, 161], [121, 161], [122, 161], [123, 161], [140, 161], [141, 161], [142, 161], [143, 161], [160, 161], [161, 161], [162, 161], [163, 161], [180, 161], [181, 161], [182, 161], [183, 161], [200, 161], [201, 161], [202, 161], [203, 161], [120, 162], [121, 162], [122, 162], [123, 162], [124, 162], [140, 162], [141, 162], [142, 162], [143, 162], [144, 162], [160, 162], [161, 162], [162, 162], [163, 162], [164, 162], [180, 162], [181, 162], [182, 162], [183, 162], [184, 162], [200, 162], [201, 162], [202, 162], [203, 162], [204, 162], [121, 163], [122, 163], [123, 163], [124, 163], [125, 163], [141, 163], [142, 163], [143, 163], [144, 163], [145, 163], [161, 163], [162, 163], [163, 163], [164, 163], [165, 163], [181, 163], [182, 163], [183, 163], [184, 163], [185, 163], [201, 163], [202, 163], [203, 163], [204, 163], [205, 163], [122, 164], [123, 164], [124, 164], [125, 164], [126, 164], [142, 164], [143, 164], [144, 164], [145, 164], [146, 164], [162, 164], [163, 164], [164, 164], [165, 164], [166, 164], [182, 164], [183, 164], [184, 164], [185, 164], [186, 164], [202, 164], [203, 164], [204, 164], [205, 164], [206, 164], [123, 165], [124, 165], [125, 165], [126, 165], [127, 165], [143, 165], [144, 165], [145, 165], [146, 165], [147, 165], [163, 165], [164, 165], [165, 165], [166, 165], [167, 165], [183, 165], [184, 165], [185, 165], [186, 165], [187, 165], [203, 165], [204, 165], [205, 165], [206, 165], [207, 165], [124, 166], [125, 166], [126, 166], [127, 166], [128, 166], [144, 166], [145, 166], [146, 166], [147, 166], [148, 166], [164, 166], [165, 166], [166, 166], [167, 166], [168, 166], [184, 166], [185, 166], [186, 166], [187, 166], [188, 166], [204, 166], [205, 166], [206, 166], [207, 166], [208, 166], [125, 167], [126, 167], [127, 167], [128, 167], [129, 167], [145, 167], [146, 167], [147, 167], [148, 167], [149, 167], [165, 167], [166, 167], [167, 167], [168, 167], [169, 167], [185, 167], [186, 167], [187, 167], [188, 167], [189, 167], [205, 167], [206, 167], [207, 167], [208, 167], [209, 167], [126, 168], [127, 168], [128, 168], [129, 168], [130, 168], [146, 168], [147, 168], [148, 168], [149, 168], [150, 168], [166, 168], [167, 168], [168, 168], [169, 168], [170, 168], [186, 168], [187, 168], [188, 168], [189, 168], [190, 168], [206, 168], [207, 168], [208, 168], [209, 168], [210, 168], [127, 169], [128, 169], [129, 169], [130, 169], [131, 169], [147, 169], [148, 169], [149, 169], [150, 169], [151, 169], [167, 169], [168, 169], [169, 169], [170, 169], [171, 169], [187, 169], [188, 169], [189, 169], [190, 169], [191, 169], [207, 169], [208, 169], [209, 169], [210, 169], [211, 169], [128, 170], [129, 170], [130, 170], [131, 170], [132, 170], [148, 170], [149, 170], [150, 170], [151, 170], [152, 170], [168, 170], [169, 170], [170, 170], [171, 170], [172, 170], [188, 170], [189, 170], [190, 170], [191, 170], [192, 170], [208, 170], [209, 170], [210, 170], [211, 170], [212, 170], [129, 171], [130, 171], [131, 171], [132, 171], [133, 171], [149, 171], [150, 171], [151, 171], [152, 171], [153, 171], [169, 171], [170, 171], [171, 171], [172, 171], [173, 171], [189, 171], [190, 171], [191, 171], [192, 171], [193, 171], [209, 171], [210, 171], [211, 171], [212, 171], [213, 171], [130, 172], [131, 172], [132, 172], [133, 172], [134, 172], [150, 172], [151, 172], [152, 172], [153, 172], [154, 172], [170, 172], [171, 172], [172, 172], [173, 172], [174, 172], [190, 172], [191, 172], [192, 172], [193, 172], [194, 172], [210, 172], [211, 172], [212, 172], [213, 172], [214, 172], [131, 173], [132, 173], [133, 173], [134, 173], [135, 173], [151, 173], [152, 173], [153, 173], [154, 173], [155, 173], [171, 173], [172, 173], [173, 173], [174, 173], [175, 173], [191, 173], [192, 173], [193, 173], [194, 173], [195, 173], [211, 173], [212, 173], [213, 173], [214, 173], [215, 173], [132, 174], [133, 174], [134, 174], [135, 174], [136, 174], [152, 174], [153, 174], [154, 174], [155, 174], [156, 174], [172, 174], [173, 174], [174, 174], [175, 174], [176, 174], [192, 174], [193, 174], [194, 174], [195, 174], [196, 174], [212, 174], [213, 174], [214, 174], [215, 174], [216, 174], [133, 175], [134, 175], [135, 175], [136, 175], [137, 175], [153, 175], [154, 175], [155, 175], [156, 175], [157, 175], [173, 175], [174, 175], [175, 175], [176, 175], [177, 175], [193, 175], [194, 175], [195, 175], [196, 175], [197, 175], [213, 175], [214, 175], [215, 175], [216, 175], [217, 175], [134, 176], [135, 176], [136, 176], [137, 176], [138, 176], [154, 176], [155, 176], [156, 176], [157, 176], [158, 176], [174, 176], [175, 176], [176, 176], [177, 176], [178, 176], [194, 176], [195, 176], [196, 176], [197, 176], [198, 176], [214, 176], [215, 176], [216, 176], [217, 176], [218, 176], [135, 177], [136, 177], [137, 177], [138, 177], [139, 177], [155, 177], [156, 177], [157, 177], [158, 177], [159, 177], [175, 177], [176, 177], [177, 177], [178, 177], [179, 177], [195, 177], [196, 177], [197, 177], [198, 177], [199, 177], [215, 177], [216, 177], [217, 177], [218, 177], [219, 177], [136, 178], [137, 178], [138, 178], [139, 178], [156, 178], [157, 178], [158, 178], [159, 178], [176, 178], [177, 178], [178, 178], [179, 178], [196, 178], [197, 178], [198, 178], [199, 178], [216, 178], [217, 178], [218, 178], [219, 178], [137, 179], [138, 179], [139, 179], [157, 179], [158, 179], [159, 179], [177, 179], [178, 179], [179, 179], [197, 179], [198, 179], [199, 179], [217, 179], [218, 179], [219, 179], [140, 180], [141, 180], [142, 180], [160, 180], [161, 180], [162, 180], [180, 180], [181, 180], [182, 180], [200, 180], [201, 180], [202, 180], [220, 180], [221, 180], [222, 180], [140, 181], [141, 181], [142, 181], [143, 181], [160, 181], [161, 181], [162, 181], [163, 181], [180, 181], [181, 181], [182, 181], [183, 181], [200, 181], [201, 181], [202, 181], [203, 181], [220, 181], [221, 181], [222, 181], [223, 181], [140, 182], [141, 182], [142, 182], [143, 182], [144, 182], [160, 182], [161, 182], [162, 182], [163, 182], [164, 182], [180, 182], [181, 182], [182, 182], [183, 182], [184, 182], [200, 182], [201, 182], [202, 182], [203, 182], [204, 182], [220, 182], [221, 182], [222, 182], [223, 182], [224, 182], [141, 183], [142, 183], [143, 183], [144, 183], [145, 183], [161, 183], [162, 183], [163, 183], [164, 183], [165, 183], [181, 183], [182, 183], [183, 183], [184, 183], [185, 183], [201, 183], [202, 183], [203, 183], [204, 183], [205, 183], [221, 183], [222, 183], [223, 183], [224, 183], [225, 183], [142, 184], [143, 184], [144, 184], [145, 184], [146, 184], [162, 184], [163, 184], [164, 184], [165, 184], [166, 184], [182, 184], [183, 184], [184, 184], [185, 184], [186, 184], [202, 184], [203, 184], [204, 184], [205, 184], [206, 184], [222, 184], [223, 184], [224, 184], [225, 184], [226, 184], [143, 185], [144, 185], [145, 185], [146, 185], [147, 185], [163, 185], [164, 185], [165, 185], [166, 185], [167, 185], [183, 185], [184, 185], [185, 185], [186, 185], [187, 185], [203, 185], [204, 185], [205, 185], [206, 185], [207, 185], [223, 185], [224, 185], [225, 185], [226, 185], [227, 185], [144, 186], [145, 186], [146, 186], [147, 186], [148, 186], [164, 186], [165, 186], [166, 186], [167, 186], [168, 186], [184, 186], [185, 186], [186, 186], [187, 186], [188, 186], [204, 186], [205, 186], [206, 186], [207, 186], [208, 186], [224, 186], [225, 186], [226, 186], [227, 186], [228, 186], [145, 187], [146, 187], [147, 187], [148, 187], [149, 187], [165, 187], [166, 187], [167, 187], [168, 187], [169, 187], [185, 187], [186, 187], [187, 187], [188, 187], [189, 187], [205, 187], [206, 187], [207, 187], [208, 187], [209, 187], [225, 187], [226, 187], [227, 187], [228, 187], [229, 187], [146, 188], [147, 188], [148, 188], [149, 188], [150, 188], [166, 188], [167, 188], [168, 188], [169, 188], [170, 188], [186, 188], [187, 188], [188, 188], [189, 188], [190, 188], [206, 188], [207, 188], [208, 188], [209, 188], [210, 188], [226, 188], [227, 188], [228, 188], [229, 188], [230, 188], [147, 189], [148, 189], [149, 189], [150, 189], [151, 189], [167, 189], [168, 189], [169, 189], [170, 189], [171, 189], [187, 189], [188, 189], [189, 189], [190, 189], [191, 189], [207, 189], [208, 189], [209, 189], [210, 189], [211, 189], [227, 189], [228, 189], [229, 189], [230, 189], [231, 189], [148, 190], [149, 190], [150, 190], [151, 190], [152, 190], [168, 190], [169, 190], [170, 190], [171, 190], [172, 190], [188, 190], [189, 190], [190, 190], [191, 190], [192, 190], [208, 190], [209, 190], [210, 190], [211, 190], [212, 190], [228, 190], [229, 190], [230, 190], [231, 190], [232, 190], [149, 191], [150, 191], [151, 191], [152, 191], [153, 191], [169, 191], [170, 191], [171, 191], [172, 191], [173, 191], [189, 191], [190, 191], [191, 191], [192, 191], [193, 191], [209, 191], [210, 191], [211, 191], [212, 191], [213, 191], [229, 191], [230, 191], [231, 191], [232, 191], [233, 191], [150, 192], [151, 192], [152, 192], [153, 192], [154, 192], [170, 192], [171, 192], [172, 192], [173, 192], [174, 192], [190, 192], [191, 192], [192, 192], [193, 192], [194, 192], [210, 192], [211, 192], [212, 192], [213, 192], [214, 192], [230, 192], [231, 192], [232, 192], [233, 192], [234, 192], [151, 193], [152, 193], [153, 193], [154, 193], [155, 193], [171, 193], [172, 193], [173, 193], [174, 193], [175, 193], [191, 193], [192, 193], [193, 193], [194, 193], [195, 193], [211, 193], [212, 193], [213, 193], [214, 193], [215, 193], [231, 193], [232, 193], [233, 193], [234, 193], [235, 193], [152, 194], [153, 194], [154, 194], [155, 194], [156, 194], [172, 194], [173, 194], [174, 194], [175, 194], [176, 194], [192, 194], [193, 194], [194, 194], [195, 194], [196, 194], [212, 194], [213, 194], [214, 194], [215, 194], [216, 194], [232, 194], [233, 194], [234, 194], [235, 194], [236, 194], [153, 195], [154, 195], [155, 195], [156, 195], [157, 195], [173, 195], [174, 195], [175, 195], [176, 195], [177, 195], [193, 195], [194, 195], [195, 195], [196, 195], [197, 195], [213, 195], [214, 195], [215, 195], [216, 195], [217, 195], [233, 195], [234, 195], [235, 195], [236, 195], [237, 195], [154, 196], [155, 196], [156, 196], [157, 196], [158, 196], [174, 196], [175, 196], [176, 196], [177, 196], [178, 196], [194, 196], [195, 196], [196, 196], [197, 196], [198, 196], [214, 196], [215, 196], [216, 196], [217, 196], [218, 196], [234, 196], [235, 196], [236, 196], [237, 196], [238, 196], [155, 197], [156, 197], [157, 197], [158, 197], [159, 197], [175, 197], [176, 197], [177, 197], [178, 197], [179, 197], [195, 197], [196, 197], [197, 197], [198, 197], [199, 197], [215, 197], [216, 197], [217, 197], [218, 197], [219, 197], [235, 197], [236, 197], [237, 197], [238, 197], [239, 197], [156, 198], [157, 198], [158, 198], [159, 198], [176, 198], [177, 198], [178, 198], [179, 198], [196, 198], [197, 198], [198, 198], [199, 198], [216, 198], [217, 198], [218, 198], [219, 198], [236, 198], [237, 198], [238, 198], [239, 198], [157, 199], [158, 199], [159, 199], [177, 199], [178, 199], [179, 199], [197, 199], [198, 199], [199, 199], [217, 199], [218, 199], [219, 199], [237, 199], [238, 199], [239, 199], [160, 200], [161, 200], [162, 200], [180, 200], [181, 200], [182, 200], [200, 200], [201, 200], [202, 200], [220, 200], [221, 200], [222, 200], [240, 200], [241, 200], [242, 200], [160, 201], [161, 201], [162, 201], [163, 201], [180, 201], [181, 201], [182, 201], [183, 201], [200, 201], [201, 201], [202, 201], [203, 201], [220, 201], [221, 201], [222, 201], [223, 201], [240, 201], [241, 201], [242, 201], [243, 201], [160, 202], [161, 202], [162, 202], [163, 202], [164, 202], [180, 202], [181, 202], [182, 202], [183, 202], [184, 202], [200, 202], [201, 202], [202, 202], [203, 202], [204, 202], [220, 202], [221, 202], [222, 202], [223, 202], [224, 202], [240, 202], [241, 202], [242, 202], [243, 202], [244, 202], [161, 203], [162, 203], [163, 203], [164, 203], [165, 203], [181, 203], [182, 203], [183, 203], [184, 203], [185, 203], [201, 203], [202, 203], [203, 203], [204, 203], [205, 203], [221, 203], [222, 203], [223, 203], [224, 203], [225, 203], [241, 203], [242, 203], [243, 203], [244, 203], [245, 203], [162, 204], [163, 204], [164, 204], [165, 204], [166, 204], [182, 204], [183, 204], [184, 204], [185, 204], [186, 204], [202, 204], [203, 204], [204, 204], [205, 204], [206, 204], [222, 204], [223, 204], [224, 204], [225, 204], [226, 204], [242, 204], [243, 204], [244, 204], [245, 204], [246, 204], [163, 205], [164, 205], [165, 205], [166, 205], [167, 205], [183, 205], [184, 205], [185, 205], [186, 205], [187, 205], [203, 205], [204, 205], [205, 205], [206, 205], [207, 205], [223, 205], [224, 205], [225, 205], [226, 205], [227, 205], [243, 205], [244, 205], [245, 205], [246, 205], [247, 205], [164, 206], [165, 206], [166, 206], [167, 206], [168, 206], [184, 206], [185, 206], [186, 206], [187, 206], [188, 206], [204, 206], [205, 206], [206, 206], [207, 206], [208, 206], [224, 206], [225, 206], [226, 206], [227, 206], [228, 206], [244, 206], [245, 206], [246, 206], [247, 206], [248, 206], [165, 207], [166, 207], [167, 207], [168, 207], [169, 207], [185, 207], [186, 207], [187, 207], [188, 207], [189, 207], [205, 207], [206, 207], [207, 207], [208, 207], [209, 207], [225, 207], [226, 207], [227, 207], [228, 207], [229, 207], [245, 207], [246, 207], [247, 207], [248, 207], [249, 207], [166, 208], [167, 208], [168, 208], [169, 208], [170, 208], [186, 208], [187, 208], [188, 208], [189, 208], [190, 208], [206, 208], [207, 208], [208, 208], [209, 208], [210, 208], [226, 208], [227, 208], [228, 208], [229, 208], [230, 208], [246, 208], [247, 208], [248, 208], [249, 208], [250, 208], [167, 209], [168, 209], [169, 209], [170, 209], [171, 209], [187, 209], [188, 209], [189, 209], [190, 209], [191, 209], [207, 209], [208, 209], [209, 209], [210, 209], [211, 209], [227, 209], [228, 209], [229, 209], [230, 209], [231, 209], [247, 209], [248, 209], [249, 209], [250, 209], [251, 209], [168, 210], [169, 210], [170, 210], [171, 210], [172, 210], [188, 210], [189, 210], [190, 210], [191, 210], [192, 210], [208, 210], [209, 210], [210, 210], [211, 210], [212, 210], [228, 210], [229, 210], [230, 210], [231, 210], [232, 210], [248, 210], [249, 210], [250, 210], [251, 210], [252, 210], [169, 211], [170, 211], [171, 211], [172, 211], [173, 211], [189, 211], [190, 211], [191, 211], [192, 211], [193, 211], [209, 211], [210, 211], [211, 211], [212, 211], [213, 211], [229, 211], [230, 211], [231, 211], [232, 211], [233, 211], [249, 211], [250, 211], [251, 211], [252, 211], [253, 211], [170, 212], [171, 212], [172, 212], [173, 212], [174, 212], [190, 212], [191, 212], [192, 212], [193, 212], [194, 212], [210, 212], [211, 212], [212, 212], [213, 212], [214, 212], [230, 212], [231, 212], [232, 212], [233, 212], [234, 212], [250, 212], [251, 212], [252, 212], [253, 212], [254, 212], [171, 213], [172, 213], [173, 213], [174, 213], [175, 213], [191, 213], [192, 213], [193, 213], [194, 213], [195, 213], [211, 213], [212, 213], [213, 213], [214, 213], [215, 213], [231, 213], [232, 213], [233, 213], [234, 213], [235, 213], [251, 213], [252, 213], [253, 213], [254, 213], [255, 213], [172, 214], [173, 214], [174, 214], [175, 214], [176, 214], [192, 214], [193, 214], [194, 214], [195, 214], [196, 214], [212, 214], [213, 214], [214, 214], [215, 214], [216, 214], [232, 214], [233, 214], [234, 214], [235, 214], [236, 214], [252, 214], [253, 214], [254, 214], [255, 214], [256, 214], [173, 215], [174, 215], [175, 215], [176, 215], [177, 215], [193, 215], [194, 215], [195, 215], [196, 215], [197, 215], [213, 215], [214, 215], [215, 215], [216, 215], [217, 215], [233, 215], [234, 215], [235, 215], [236, 215], [237, 215], [253, 215], [254, 215], [255, 215], [256, 215], [257, 215], [174, 216], [175, 216], [176, 216], [177, 216], [178, 216], [194, 216], [195, 216], [196, 216], [197, 216], [198, 216], [214, 216], [215, 216], [216, 216], [217, 216], [218, 216], [234, 216], [235, 216], [236, 216], [237, 216], [238, 216], [254, 216], [255, 216], [256, 216], [257, 216], [258, 216], [175, 217], [176, 217], [177, 217], [178, 217], [179, 217], [195, 217], [196, 217], [197, 217], [198, 217], [199, 217], [215, 217], [216, 217], [217, 217], [218, 217], [219, 217], [235, 217], [236, 217], [237, 217], [238, 217], [239, 217], [255, 217], [256, 217], [257, 217], [258, 217], [259, 217], [176, 218], [177, 218], [178, 218], [179, 218], [196, 218], [197, 218], [198, 218], [199, 218], [216, 218], [217, 218], [218, 218], [219, 218], [236, 218], [237, 218], [238, 218], [239, 218], [256, 218], [257, 218], [258, 218], [259, 218], [177, 219], [178, 219], [179, 219], [197, 219], [198, 219], [199, 219], [217, 219], [218, 219], [219, 219], [237, 219], [238, 219], [239, 219], [257, 219], [258, 219], [259, 219], [180, 220], [181, 220], [182, 220], [200, 220], [201, 220], [202, 220], [220, 220], [221, 220], [222, 220], [240, 220], [241, 220], [242, 220], [260, 220], [261, 220], [262, 220], [180, 221], [181, 221], [182, 221], [183, 221], [200, 221], [201, 221], [202, 221], [203, 221], [220, 221], [221, 221], [222, 221], [223, 221], [240, 221], [241, 221], [242, 221], [243, 221], [260, 221], [261, 221], [262, 221], [263, 221], [180, 222], [181, 222], [182, 222], [183, 222], [184, 222], [200, 222], [201, 222], [202, 222], [203, 222], [204, 222], [220, 222], [221, 222], [222, 222], [223, 222], [224, 222], [240, 222], [241, 222], [242, 222], [243, 222], [244, 222], [260, 222], [261, 222], [262, 222], [263, 222], [264, 222], [181, 223], [182, 223], [183, 223], [184, 223], [185, 223], [201, 223], [202, 223], [203, 223], [204, 223], [205, 223], [221, 223], [222, 223], [223, 223], [224, 223], [225, 223], [241, 223], [242, 223], [243, 223], [244, 223], [245, 223], [261, 223], [262, 223], [263, 223], [264, 223], [265, 223], [182, 224], [183, 224], [184, 224], [185, 224], [186, 224], [202, 224], [203, 224], [204, 224], [205, 224], [206, 224], [222, 224], [223, 224], [224, 224], [225, 224], [226, 224], [242, 224], [243, 224], [244, 224], [245, 224], [246, 224], [262, 224], [263, 224], [264, 224], [265, 224], [266, 224], [183, 225], [184, 225], [185, 225], [186, 225], [187, 225], [203, 225], [204, 225], [205, 225], [206, 225], [207, 225], [223, 225], [224, 225], [225, 225], [226, 225], [227, 225], [243, 225], [244, 225], [245, 225], [246, 225], [247, 225], [263, 225], [264, 225], [265, 225], [266, 225], [267, 225], [184, 226], [185, 226], [186, 226], [187, 226], [188, 226], [204, 226], [205, 226], [206, 226], [207, 226], [208, 226], [224, 226], [225, 226], [226, 226], [227, 226], [228, 226], [244, 226], [245, 226], [246, 226], [247, 226], [248, 226], [264, 226], [265, 226], [266, 226], [267, 226], [268, 226], [185, 227], [186, 227], [187, 227], [188, 227], [189, 227], [205, 227], [206, 227], [207, 227], [208, 227], [209, 227], [225, 227], [226, 227], [227, 227], [228, 227], [229, 227], [245, 227], [246, 227], [247, 227], [248, 227], [249, 227], [265, 227], [266, 227], [267, 227], [268, 227], [269, 227], [186, 228], [187, 228], [188, 228], [189, 228], [190, 228], [206, 228], [207, 228], [208, 228], [209, 228], [210, 228], [226, 228], [227, 228], [228, 228], [229, 228], [230, 228], [246, 228], [247, 228], [248, 228], [249, 228], [250, 228], [266, 228], [267, 228], [268, 228], [269, 228], [270, 228], [187, 229], [188, 229], [189, 229], [190, 229], [191, 229], [207, 229], [208, 229], [209, 229], [210, 229], [211, 229], [227, 229], [228, 229], [229, 229], [230, 229], [231, 229], [247, 229], [248, 229], [249, 229], [250, 229], [251, 229], [267, 229], [268, 229], [269, 229], [270, 229], [271, 229], [188, 230], [189, 230], [190, 230], [191, 230], [192, 230], [208, 230], [209, 230], [210, 230], [211, 230], [212, 230], [228, 230], [229, 230], [230, 230], [231, 230], [232, 230], [248, 230], [249, 230], [250, 230], [251, 230], [252, 230], [268, 230], [269, 230], [270, 230], [271, 230], [272, 230], [189, 231], [190, 231], [191, 231], [192, 231], [193, 231], [209, 231], [210, 231], [211, 231], [212, 231], [213, 231], [229, 231], [230, 231], [231, 231], [232, 231], [233, 231], [249, 231], [250, 231], [251, 231], [252, 231], [253, 231], [269, 231], [270, 231], [271, 231], [272, 231], [273, 231], [190, 232], [191, 232], [192, 232], [193, 232], [194, 232], [210, 232], [211, 232], [212, 232], [213, 232], [214, 232], [230, 232], [231, 232], [232, 232], [233, 232], [234, 232], [250, 232], [251, 232], [252, 232], [253, 232], [254, 232], [270, 232], [271, 232], [272, 232], [273, 232], [274, 232], [191, 233], [192, 233], [193, 233], [194, 233], [195, 233], [211, 233], [212, 233], [213, 233], [214, 233], [215, 233], [231, 233], [232, 233], [233, 233], [234, 233], [235, 233], [251, 233], [252, 233], [253, 233], [254, 233], [255, 233], [271, 233], [272, 233], [273, 233], [274, 233], [275, 233], [192, 234], [193, 234], [194, 234], [195, 234], [196, 234], [212, 234], [213, 234], [214, 234], [215, 234], [216, 234], [232, 234], [233, 234], [234, 234], [235, 234], [236, 234], [252, 234], [253, 234], [254, 234], [255, 234], [256, 234], [272, 234], [273, 234], [274, 234], [275, 234], [276, 234], [193, 235], [194, 235], [195, 235], [196, 235], [197, 235], [213, 235], [214, 235], [215, 235], [216, 235], [217, 235], [233, 235], [234, 235], [235, 235], [236, 235], [237, 235], [253, 235], [254, 235], [255, 235], [256, 235], [257, 235], [273, 235], [274, 235], [275, 235], [276, 235], [277, 235], [194, 236], [195, 236], [196, 236], [197, 236], [198, 236], [214, 236], [215, 236], [216, 236], [217, 236], [218, 236], [234, 236], [235, 236], [236, 236], [237, 236], [238, 236], [254, 236], [255, 236], [256, 236], [257, 236], [258, 236], [274, 236], [275, 236], [276, 236], [277, 236], [278, 236], [195, 237], [196, 237], [197, 237], [198, 237], [199, 237], [215, 237], [216, 237], [217, 237], [218, 237], [219, 237], [235, 237], [236, 237], [237, 237], [238, 237], [239, 237], [255, 237], [256, 237], [257, 237], [258, 237], [259, 237], [275, 237], [276, 237], [277, 237], [278, 237], [279, 237], [196, 238], [197, 238], [198, 238], [199, 238], [216, 238], [217, 238], [218, 238], [219, 238], [236, 238], [237, 238], [238, 238], [239, 238], [256, 238], [257, 238], [258, 238], [259, 238], [276, 238], [277, 238], [278, 238], [279, 238], [197, 239], [198, 239], [199, 239], [217, 239], [218, 239], [219, 239], [237, 239], [238, 239], [239, 239], [257, 239], [258, 239], [259, 239], [277, 239], [278, 239], [279, 239], [200, 240], [201, 240], [202, 240], [220, 240], [221, 240], [222, 240], [240, 240], [241, 240], [242, 240], [260, 240], [261, 240], [262, 240], [280, 240], [281, 240], [282, 240], [200, 241], [201, 241], [202, 241], [203, 241], [220, 241], [221, 241], [222, 241], [223, 241], [240, 241], [241, 241], [242, 241], [243, 241], [260, 241], [261, 241], [262, 241], [263, 241], [280, 241], [281, 241], [282, 241], [283, 241], [200, 242], [201, 242], [202, 242], [203, 242], [204, 242], [220, 242], [221, 242], [222, 242], [223, 242], [224, 242], [240, 242], [241, 242], [242, 242], [243, 242], [244, 242], [260, 242], [261, 242], [262, 242], [263, 242], [264, 242], [280, 242], [281, 242], [282, 242], [283, 242], [284, 242], [201, 243], [202, 243], [203, 243], [204, 243], [205, 243], [221, 243], [222, 243], [223, 243], [224, 243], [225, 243], [241, 243], [242, 243], [243, 243], [244, 243], [245, 243], [261, 243], [262, 243], [263, 243], [264, 243], [265, 243], [281, 243], [282, 243], [283, 243], [284, 243], [285, 243], [202, 244], [203, 244], [204, 244], [205, 244], [206, 244], [222, 244], [223, 244], [224, 244], [225, 244], [226, 244], [242, 244], [243, 244], [244, 244], [245, 244], [246, 244], [262, 244], [263, 244], [264, 244], [265, 244], [266, 244], [282, 244], [283, 244], [284, 244], [285, 244], [286, 244], [203, 245], [204, 245], [205, 245], [206, 245], [207, 245], [223, 245], [224, 245], [225, 245], [226, 245], [227, 245], [243, 245], [244, 245], [245, 245], [246, 245], [247, 245], [263, 245], [264, 245], [265, 245], [266, 245], [267, 245], [283, 245], [284, 245], [285, 245], [286, 245], [287, 245], [204, 246], [205, 246], [206, 246], [207, 246], [208, 246], [224, 246], [225, 246], [226, 246], [227, 246], [228, 246], [244, 246], [245, 246], [246, 246], [247, 246], [248, 246], [264, 246], [265, 246], [266, 246], [267, 246], [268, 246], [284, 246], [285, 246], [286, 246], [287, 246], [288, 246], [205, 247], [206, 247], [207, 247], [208, 247], [209, 247], [225, 247], [226, 247], [227, 247], [228, 247], [229, 247], [245, 247], [246, 247], [247, 247], [248, 247], [249, 247], [265, 247], [266, 247], [267, 247], [268, 247], [269, 247], [285, 247], [286, 247], [287, 247], [288, 247], [289, 247], [206, 248], [207, 248], [208, 248], [209, 248], [210, 248], [226, 248], [227, 248], [228, 248], [229, 248], [230, 248], [246, 248], [247, 248], [248, 248], [249, 248], [250, 248], [266, 248], [267, 248], [268, 248], [269, 248], [270, 248], [286, 248], [287, 248], [288, 248], [289, 248], [290, 248], [207, 249], [208, 249], [209, 249], [210, 249], [211, 249], [227, 249], [228, 249], [229, 249], [230, 249], [231, 249], [247, 249], [248, 249], [249, 249], [250, 249], [251, 249], [267, 249], [268, 249], [269, 249], [270, 249], [271, 249], [287, 249], [288, 249], [289, 249], [290, 249], [291, 249], [208, 250], [209, 250], [210, 250], [211, 250], [212, 250], [228, 250], [229, 250], [230, 250], [231, 250], [232, 250], [248, 250], [249, 250], [250, 250], [251, 250], [252, 250], [268, 250], [269, 250], [270, 250], [271, 250], [272, 250], [288, 250], [289, 250], [290, 250], [291, 250], [292, 250], [209, 251], [210, 251], [211, 251], [212, 251], [213, 251], [229, 251], [230, 251], [231, 251], [232, 251], [233, 251], [249, 251], [250, 251], [251, 251], [252, 251], [253, 251], [269, 251], [270, 251], [271, 251], [272, 251], [273, 251], [289, 251], [290, 251], [291, 251], [292, 251], [293, 251], [210, 252], [211, 252], [212, 252], [213, 252], [214, 252], [230, 252], [231, 252], [232, 252], [233, 252], [234, 252], [250, 252], [251, 252], [252, 252], [253, 252], [254, 252], [270, 252], [271, 252], [272, 252], [273, 252], [274, 252], [290, 252], [291, 252], [292, 252], [293, 252], [294, 252], [211, 253], [212, 253], [213, 253], [214, 253], [215, 253], [231, 253], [232, 253], [233, 253], [234, 253], [235, 253], [251, 253], [252, 253], [253, 253], [254, 253], [255, 253], [271, 253], [272, 253], [273, 253], [274, 253], [275, 253], [291, 253], [292, 253], [293, 253], [294, 253], [295, 253], [212, 254], [213, 254], [214, 254], [215, 254], [216, 254], [232, 254], [233, 254], [234, 254], [235, 254], [236, 254], [252, 254], [253, 254], [254, 254], [255, 254], [256, 254], [272, 254], [273, 254], [274, 254], [275, 254], [276, 254], [292, 254], [293, 254], [294, 254], [295, 254], [296, 254], [213, 255], [214, 255], [215, 255], [216, 255], [217, 255], [233, 255], [234, 255], [235, 255], [236, 255], [237, 255], [253, 255], [254, 255], [255, 255], [256, 255], [257, 255], [273, 255], [274, 255], [275, 255], [276, 255], [277, 255], [293, 255], [294, 255], [295, 255], [296, 255], [297, 255], [214, 256], [215, 256], [216, 256], [217, 256], [218, 256], [234, 256], [235, 256], [236, 256], [237, 256], [238, 256], [254, 256], [255, 256], [256, 256], [257, 256], [258, 256], [274, 256], [275, 256], [276, 256], [277, 256], [278, 256], [294, 256], [295, 256], [296, 256], [297, 256], [298, 256], [215, 257], [216, 257], [217, 257], [218, 257], [219, 257], [235, 257], [236, 257], [237, 257], [238, 257], [239, 257], [255, 257], [256, 257], [257, 257], [258, 257], [259, 257], [275, 257], [276, 257], [277, 257], [278, 257], [279, 257], [295, 257], [296, 257], [297, 257], [298, 257], [299, 257], [216, 258], [217, 258], [218, 258], [219, 258], [236, 258], [237, 258], [238, 258], [239, 258], [256, 258], [257, 258], [258, 258], [259, 258], [276, 258], [277, 258], [278, 258], [279, 258], [296, 258], [297, 258], [298, 258], [299, 258], [217, 259], [218, 259], [219, 259], [237, 259], [238, 259], [239, 259], [257, 259], [258, 259], [259, 259], [277, 259], [278, 259], [279, 259], [297, 259], [298, 259], [299, 259], [220, 260], [221, 260], [222, 260], [240, 260], [241, 260], [242, 260], [260, 260], [261, 260], [262, 260], [280, 260], [281, 260], [282, 260], [300, 260], [301, 260], [302, 260], [220, 261], [221, 261], [222, 261], [223, 261], [240, 261], [241, 261], [242, 261], [243, 261], [260, 261], [261, 261], [262, 261], [263, 261], [280, 261], [281, 261], [282, 261], [283, 261], [300, 261], [301, 261], [302, 261], [303, 261], [220, 262], [221, 262], [222, 262], [223, 262], [224, 262], [240, 262], [241, 262], [242, 262], [243, 262], [244, 262], [260, 262], [261, 262], [262, 262], [263, 262], [264, 262], [280, 262], [281, 262], [282, 262], [283, 262], [284, 262], [300, 262], [301, 262], [302, 262], [303, 262], [304, 262], [221, 263], [222, 263], [223, 263], [224, 263], [225, 263], [241, 263], [242, 263], [243, 263], [244, 263], [245, 263], [261, 263], [262, 263], [263, 263], [264, 263], [265, 263], [281, 263], [282, 263], [283, 263], [284, 263], [285, 263], [301, 263], [302, 263], [303, 263], [304, 263], [305, 263], [222, 264], [223, 264], [224, 264], [225, 264], [226, 264], [242, 264], [243, 264], [244, 264], [245, 264], [246, 264], [262, 264], [263, 264], [264, 264], [265, 264], [266, 264], [282, 264], [283, 264], [284, 264], [285, 264], [286, 264], [302, 264], [303, 264], [304, 264], [305, 264], [306, 264], [223, 265], [224, 265], [225, 265], [226, 265], [227, 265], [243, 265], [244, 265], [245, 265], [246, 265], [247, 265], [263, 265], [264, 265], [265, 265], [266, 265], [267, 265], [283, 265], [284, 265], [285, 265], [286, 265], [287, 265], [303, 265], [304, 265], [305, 265], [306, 265], [307, 265], [224, 266], [225, 266], [226, 266], [227, 266], [228, 266], [244, 266], [245, 266], [246, 266], [247, 266], [248, 266], [264, 266], [265, 266], [266, 266], [267, 266], [268, 266], [284, 266], [285, 266], [286, 266], [287, 266], [288, 266], [304, 266], [305, 266], [306, 266], [307, 266], [308, 266], [225, 267], [226, 267], [227, 267], [228, 267], [229, 267], [245, 267], [246, 267], [247, 267], [248, 267], [249, 267], [265, 267], [266, 267], [267, 267], [268, 267], [269, 267], [285, 267], [286, 267], [287, 267], [288, 267], [289, 267], [305, 267], [306, 267], [307, 267], [308, 267], [309, 267], [226, 268], [227, 268], [228, 268], [229, 268], [230, 268], [246, 268], [247, 268], [248, 268], [249, 268], [250, 268], [266, 268], [267, 268], [268, 268], [269, 268], [270, 268], [286, 268], [287, 268], [288, 268], [289, 268], [290, 268], [306, 268], [307, 268], [308, 268], [309, 268], [310, 268], [227, 269], [228, 269], [229, 269], [230, 269], [231, 269], [247, 269], [248, 269], [249, 269], [250, 269], [251, 269], [267, 269], [268, 269], [269, 269], [270, 269], [271, 269], [287, 269], [288, 269], [289, 269], [290, 269], [291, 269], [307, 269], [308, 269], [309, 269], [310, 269], [311, 269], [228, 270], [229, 270], [230, 270], [231, 270], [232, 270], [248, 270], [249, 270], [250, 270], [251, 270], [252, 270], [268, 270], [269, 270], [270, 270], [271, 270], [272, 270], [288, 270], [289, 270], [290, 270], [291, 270], [292, 270], [308, 270], [309, 270], [310, 270], [311, 270], [312, 270], [229, 271], [230, 271], [231, 271], [232, 271], [233, 271], [249, 271], [250, 271], [251, 271], [252, 271], [253, 271], [269, 271], [270, 271], [271, 271], [272, 271], [273, 271], [289, 271], [290, 271], [291, 271], [292, 271], [293, 271], [309, 271], [310, 271], [311, 271], [312, 271], [313, 271], [230, 272], [231, 272], [232, 272], [233, 272], [234, 272], [250, 272], [251, 272], [252, 272], [253, 272], [254, 272], [270, 272], [271, 272], [272, 272], [273, 272], [274, 272], [290, 272], [291, 272], [292, 272], [293, 272], [294, 272], [310, 272], [311, 272], [312, 272], [313, 272], [314, 272], [231, 273], [232, 273], [233, 273], [234, 273], [235, 273], [251, 273], [252, 273], [253, 273], [254, 273], [255, 273], [271, 273], [272, 273], [273, 273], [274, 273], [275, 273], [291, 273], [292, 273], [293, 273], [294, 273], [295, 273], [311, 273], [312, 273], [313, 273], [314, 273], [315, 273], [232, 274], [233, 274], [234, 274], [235, 274], [236, 274], [252, 274], [253, 274], [254, 274], [255, 274], [256, 274], [272, 274], [273, 274], [274, 274], [275, 274], [276, 274], [292, 274], [293, 274], [294, 274], [295, 274], [296, 274], [312, 274], [313, 274], [314, 274], [315, 274], [316, 274], [233, 275], [234, 275], [235, 275], [236, 275], [237, 275], [253, 275], [254, 275], [255, 275], [256, 275], [257, 275], [273, 275], [274, 275], [275, 275], [276, 275], [277, 275], [293, 275], [294, 275], [295, 275], [296, 275], [297, 275], [313, 275], [314, 275], [315, 275], [316, 275], [317, 275], [234, 276], [235, 276], [236, 276], [237, 276], [238, 276], [254, 276], [255, 276], [256, 276], [257, 276], [258, 276], [274, 276], [275, 276], [276, 276], [277, 276], [278, 276], [294, 276], [295, 276], [296, 276], [297, 276], [298, 276], [314, 276], [315, 276], [316, 276], [317, 276], [318, 276], [235, 277], [236, 277], [237, 277], [238, 277], [239, 277], [255, 277], [256, 277], [257, 277], [258, 277], [259, 277], [275, 277], [276, 277], [277, 277], [278, 277], [279, 277], [295, 277], [296, 277], [297, 277], [298, 277], [299, 277], [315, 277], [316, 277], [317, 277], [318, 277], [319, 277], [236, 278], [237, 278], [238, 278], [239, 278], [256, 278], [257, 278], [258, 278], [259, 278], [276, 278], [277, 278], [278, 278], [279, 278], [296, 278], [297, 278], [298, 278], [299, 278], [316, 278], [317, 278], [318, 278], [319, 278], [237, 279], [238, 279], [239, 279], [257, 279], [258, 279], [259, 279], [277, 279], [278, 279], [279, 279], [297, 279], [298, 279], [299, 279], [317, 279], [318, 279], [319, 279], [240, 280], [241, 280], [242, 280], [260, 280], [261, 280], [262, 280], [280, 280], [281, 280], [282, 280], [300, 280], [301, 280], [302, 280], [320, 280], [321, 280], [322, 280], [240, 281], [241, 281], [242, 281], [243, 281], [260, 281], [261, 281], [262, 281], [263, 281], [280, 281], [281, 281], [282, 281], [283, 281], [300, 281], [301, 281], [302, 281], [303, 281], [320, 281], [321, 281], [322, 281], [323, 281], [240, 282], [241, 282], [242, 282], [243, 282], [244, 282], [260, 282], [261, 282], [262, 282], [263, 282], [264, 282], [280, 282], [281, 282], [282, 282], [283, 282], [284, 282], [300, 282], [301, 282], [302, 282], [303, 282], [304, 282], [320, 282], [321, 282], [322, 282], [323, 282], [324, 282], [241, 283], [242, 283], [243, 283], [244, 283], [245, 283], [261, 283], [262, 283], [263, 283], [264, 283], [265, 283], [281, 283], [282, 283], [283, 283], [284, 283], [285, 283], [301, 283], [302, 283], [303, 283], [304, 283], [305, 283], [321, 283], [322, 283], [323, 283], [324, 283], [325, 283], [242, 284], [243, 284], [244, 284], [245, 284], [246, 284], [262, 284], [263, 284], [264, 284], [265, 284], [266, 284], [282, 284], [283, 284], [284, 284], [285, 284], [286, 284], [302, 284], [303, 284], [304, 284], [305, 284], [306, 284], [322, 284], [323, 284], [324, 284], [325, 284], [326, 284], [243, 285], [244, 285], [245, 285], [246, 285], [247, 285], [263, 285], [264, 285], [265, 285], [266, 285], [267, 285], [283, 285], [284, 285], [285, 285], [286, 285], [287, 285], [303, 285], [304, 285], [305, 285], [306, 285], [307, 285], [323, 285], [324, 285], [325, 285], [326, 285], [327, 285], [244, 286], [245, 286], [246, 286], [247, 286], [248, 286], [264, 286], [265, 286], [266, 286], [267, 286], [268, 286], [284, 286], [285, 286], [286, 286], [287, 286], [288, 286], [304, 286], [305, 286], [306, 286], [307, 286], [308, 286], [324, 286], [325, 286], [326, 286], [327, 286], [328, 286], [245, 287], [246, 287], [247, 287], [248, 287], [249, 287], [265, 287], [266, 287], [267, 287], [268, 287], [269, 287], [285, 287], [286, 287], [287, 287], [288, 287], [289, 287], [305, 287], [306, 287], [307, 287], [308, 287], [309, 287], [325, 287], [326, 287], [327, 287], [328, 287], [329, 287], [246, 288], [247, 288], [248, 288], [249, 288], [250, 288], [266, 288], [267, 288], [268, 288], [269, 288], [270, 288], [286, 288], [287, 288], [288, 288], [289, 288], [290, 288], [306, 288], [307, 288], [308, 288], [309, 288], [310, 288], [326, 288], [327, 288], [328, 288], [329, 288], [330, 288], [247, 289], [248, 289], [249, 289], [250, 289], [251, 289], [267, 289], [268, 289], [269, 289], [270, 289], [271, 289], [287, 289], [288, 289], [289, 289], [290, 289], [291, 289], [307, 289], [308, 289], [309, 289], [310, 289], [311, 289], [327, 289], [328, 289], [329, 289], [330, 289], [331, 289], [248, 290], [249, 290], [250, 290], [251, 290], [252, 290], [268, 290], [269, 290], [270, 290], [271, 290], [272, 290], [288, 290], [289, 290], [290, 290], [291, 290], [292, 290], [308, 290], [309, 290], [310, 290], [311, 290], [312, 290], [328, 290], [329, 290], [330, 290], [331, 290], [332, 290], [249, 291], [250, 291], [251, 291], [252, 291], [253, 291], [269, 291], [270, 291], [271, 291], [272, 291], [273, 291], [289, 291], [290, 291], [291, 291], [292, 291], [293, 291], [309, 291], [310, 291], [311, 291], [312, 291], [313, 291], [329, 291], [330, 291], [331, 291], [332, 291], [333, 291], [250, 292], [251, 292], [252, 292], [253, 292], [254, 292], [270, 292], [271, 292], [272, 292], [273, 292], [274, 292], [290, 292], [291, 292], [292, 292], [293, 292], [294, 292], [310, 292], [311, 292], [312, 292], [313, 292], [314, 292], [330, 292], [331, 292], [332, 292], [333, 292], [334, 292], [251, 293], [252, 293], [253, 293], [254, 293], [255, 293], [271, 293], [272, 293], [273, 293], [274, 293], [275, 293], [291, 293], [292, 293], [293, 293], [294, 293], [295, 293], [311, 293], [312, 293], [313, 293], [314, 293], [315, 293], [331, 293], [332, 293], [333, 293], [334, 293], [335, 293], [252, 294], [253, 294], [254, 294], [255, 294], [256, 294], [272, 294], [273, 294], [274, 294], [275, 294], [276, 294], [292, 294], [293, 294], [294, 294], [295, 294], [296, 294], [312, 294], [313, 294], [314, 294], [315, 294], [316, 294], [332, 294], [333, 294], [334, 294], [335, 294], [336, 294], [253, 295], [254, 295], [255, 295], [256, 295], [257, 295], [273, 295], [274, 295], [275, 295], [276, 295], [277, 295], [293, 295], [294, 295], [295, 295], [296, 295], [297, 295], [313, 295], [314, 295], [315, 295], [316, 295], [317, 295], [333, 295], [334, 295], [335, 295], [336, 295], [337, 295], [254, 296], [255, 296], [256, 296], [257, 296], [258, 296], [274, 296], [275, 296], [276, 296], [277, 296], [278, 296], [294, 296], [295, 296], [296, 296], [297, 296], [298, 296], [314, 296], [315, 296], [316, 296], [317, 296], [318, 296], [334, 296], [335, 296], [336, 296], [337, 296], [338, 296], [255, 297], [256, 297], [257, 297], [258, 297], [259, 297], [275, 297], [276, 297], [277, 297], [278, 297], [279, 297], [295, 297], [296, 297], [297, 297], [298, 297], [299, 297], [315, 297], [316, 297], [317, 297], [318, 297], [319, 297], [335, 297], [336, 297], [337, 297], [338, 297], [339, 297], [256, 298], [257, 298], [258, 298], [259, 298], [276, 298], [277, 298], [278, 298], [279, 298], [296, 298], [297, 298], [298, 298], [299, 298], [316, 298], [317, 298], [318, 298], [319, 298], [336, 298], [337, 298], [338, 298], [339, 298], [257, 299], [258, 299], [259, 299], [277, 299], [278, 299], [279, 299], [297, 299], [298, 299], [299, 299], [317, 299], [318, 299], [319, 299], [337, 299], [338, 299], [339, 299], [260, 300], [261, 300], [262, 300], [280, 300], [281, 300], [282, 300], [300, 300], [301, 300], [302, 300], [320, 300], [321, 300], [322, 300], [340, 300], [341, 300], [342, 300], [260, 301], [261, 301], [262, 301], [263, 301], [280, 301], [281, 301], [282, 301], [283, 301], [300, 301], [301, 301], [302, 301], [303, 301], [320, 301], [321, 301], [322, 301], [323, 301], [340, 301], [341, 301], [342, 301], [343, 301], [260, 302], [261, 302], [262, 302], [263, 302], [264, 302], [280, 302], [281, 302], [282, 302], [283, 302], [284, 302], [300, 302], [301, 302], [302, 302], [303, 302], [304, 302], [320, 302], [321, 302], [322, 302], [323, 302], [324, 302], [340, 302], [341, 302], [342, 302], [343, 302], [344, 302], [261, 303], [262, 303], [263, 303], [264, 303], [265, 303], [281, 303], [282, 303], [283, 303], [284, 303], [285, 303], [301, 303], [302, 303], [303, 303], [304, 303], [305, 303], [321, 303], [322, 303], [323, 303], [324, 303], [325, 303], [341, 303], [342, 303], [343, 303], [344, 303], [345, 303], [262, 304], [263, 304], [264, 304], [265, 304], [266, 304], [282, 304], [283, 304], [284, 304], [285, 304], [286, 304], [302, 304], [303, 304], [304, 304], [305, 304], [306, 304], [322, 304], [323, 304], [324, 304], [325, 304], [326, 304], [342, 304], [343, 304], [344, 304], [345, 304], [346, 304], [263, 305], [264, 305], [265, 305], [266, 305], [267, 305], [283, 305], [284, 305], [285, 305], [286, 305], [287, 305], [303, 305], [304, 305], [305, 305], [306, 305], [307, 305], [323, 305], [324, 305], [325, 305], [326, 305], [327, 305], [343, 305], [344, 305], [345, 305], [346, 305], [347, 305], [264, 306], [265, 306], [266, 306], [267, 306], [268, 306], [284, 306], [285, 306], [286, 306], [287, 306], [288, 306], [304, 306], [305, 306], [306, 306], [307, 306], [308, 306], [324, 306], [325, 306], [326, 306], [327, 306], [328, 306], [344, 306], [345, 306], [346, 306], [347, 306], [348, 306], [265, 307], [266, 307], [267, 307], [268, 307], [269, 307], [285, 307], [286, 307], [287, 307], [288, 307], [289, 307], [305, 307], [306, 307], [307, 307], [308, 307], [309, 307], [325, 307], [326, 307], [327, 307], [328, 307], [329, 307], [345, 307], [346, 307], [347, 307], [348, 307], [349, 307], [266, 308], [267, 308], [268, 308], [269, 308], [270, 308], [286, 308], [287, 308], [288, 308], [289, 308], [290, 308], [306, 308], [307, 308], [308, 308], [309, 308], [310, 308], [326, 308], [327, 308], [328, 308], [329, 308], [330, 308], [346, 308], [347, 308], [348, 308], [349, 308], [350, 308], [267, 309], [268, 309], [269, 309], [270, 309], [271, 309], [287, 309], [288, 309], [289, 309], [290, 309], [291, 309], [307, 309], [308, 309], [309, 309], [310, 309], [311, 309], [327, 309], [328, 309], [329, 309], [330, 309], [331, 309], [347, 309], [348, 309], [349, 309], [350, 309], [351, 309], [268, 310], [269, 310], [270, 310], [271, 310], [272, 310], [288, 310], [289, 310], [290, 310], [291, 310], [292, 310], [308, 310], [309, 310], [310, 310], [311, 310], [312, 310], [328, 310], [329, 310], [330, 310], [331, 310], [332, 310], [348, 310], [349, 310], [350, 310], [351, 310], [352, 310], [269, 311], [270, 311], [271, 311], [272, 311], [273, 311], [289, 311], [290, 311], [291, 311], [292, 311], [293, 311], [309, 311], [310, 311], [311, 311], [312, 311], [313, 311], [329, 311], [330, 311], [331, 311], [332, 311], [333, 311], [349, 311], [350, 311], [351, 311], [352, 311], [353, 311], [270, 312], [271, 312], [272, 312], [273, 312], [274, 312], [290, 312], [291, 312], [292, 312], [293, 312], [294, 312], [310, 312], [311, 312], [312, 312], [313, 312], [314, 312], [330, 312], [331, 312], [332, 312], [333, 312], [334, 312], [350, 312], [351, 312], [352, 312], [353, 312], [354, 312], [271, 313], [272, 313], [273, 313], [274, 313], [275, 313], [291, 313], [292, 313], [293, 313], [294, 313], [295, 313], [311, 313], [312, 313], [313, 313], [314, 313], [315, 313], [331, 313], [332, 313], [333, 313], [334, 313], [335, 313], [351, 313], [352, 313], [353, 313], [354, 313], [355, 313], [272, 314], [273, 314], [274, 314], [275, 314], [276, 314], [292, 314], [293, 314], [294, 314], [295, 314], [296, 314], [312, 314], [313, 314], [314, 314], [315, 314], [316, 314], [332, 314], [333, 314], [334, 314], [335, 314], [336, 314], [352, 314], [353, 314], [354, 314], [355, 314], [356, 314], [273, 315], [274, 315], [275, 315], [276, 315], [277, 315], [293, 315], [294, 315], [295, 315], [296, 315], [297, 315], [313, 315], [314, 315], [315, 315], [316, 315], [317, 315], [333, 315], [334, 315], [335, 315], [336, 315], [337, 315], [353, 315], [354, 315], [355, 315], [356, 315], [357, 315], [274, 316], [275, 316], [276, 316], [277, 316], [278, 316], [294, 316], [295, 316], [296, 316], [297, 316], [298, 316], [314, 316], [315, 316], [316, 316], [317, 316], [318, 316], [334, 316], [335, 316], [336, 316], [337, 316], [338, 316], [354, 316], [355, 316], [356, 316], [357, 316], [358, 316], [275, 317], [276, 317], [277, 317], [278, 317], [279, 317], [295, 317], [296, 317], [297, 317], [298, 317], [299, 317], [315, 317], [316, 317], [317, 317], [318, 317], [319, 317], [335, 317], [336, 317], [337, 317], [338, 317], [339, 317], [355, 317], [356, 317], [357, 317], [358, 317], [359, 317], [276, 318], [277, 318], [278, 318], [279, 318], [296, 318], [297, 318], [298, 318], [299, 318], [316, 318], [317, 318], [318, 318], [319, 318], [336, 318], [337, 318], [338, 318], [339, 318], [356, 318], [357, 318], [358, 318], [359, 318], [277, 319], [278, 319], [279, 319], [297, 319], [298, 319], [299, 319], [317, 319], [318, 319], [319, 319], [337, 319], [338, 319], [339, 319], [357, 319], [358, 319], [359, 319], [280, 320], [281, 320], [282, 320], [300, 320], [301, 320], [302, 320], [320, 320], [321, 320], [322, 320], [340, 320], [341, 320], [342, 320], [360, 320], [361, 320], [362, 320], [280, 321], [281, 321], [282, 321], [283, 321], [300, 321], [301, 321], [302, 321], [303, 321], [320, 321], [321, 321], [322, 321], [323, 321], [340, 321], [341, 321], [342, 321], [343, 321], [360, 321], [361, 321], [362, 321], [363, 321], [280, 322], [281, 322], [282, 322], [283, 322], [284, 322], [300, 322], [301, 322], [302, 322], [303, 322], [304, 322], [320, 322], [321, 322], [322, 322], [323, 322], [324, 322], [340, 322], [341, 322], [342, 322], [343, 322], [344, 322], [360, 322], [361, 322], [362, 322], [363, 322], [364, 322], [281, 323], [282, 323], [283, 323], [284, 323], [285, 323], [301, 323], [302, 323], [303, 323], [304, 323], [305, 323], [321, 323], [322, 323], [323, 323], [324, 323], [325, 323], [341, 323], [342, 323], [343, 323], [344, 323], [345, 323], [361, 323], [362, 323], [363, 323], [364, 323], [365, 323], [282, 324], [283, 324], [284, 324], [285, 324], [286, 324], [302, 324], [303, 324], [304, 324], [305, 324], [306, 324], [322, 324], [323, 324], [324, 324], [325, 324], [326, 324], [342, 324], [343, 324], [344, 324], [345, 324], [346, 324], [362, 324], [363, 324], [364, 324], [365, 324], [366, 324], [283, 325], [284, 325], [285, 325], [286, 325], [287, 325], [303, 325], [304, 325], [305, 325], [306, 325], [307, 325], [323, 325], [324, 325], [325, 325], [326, 325], [327, 325], [343, 325], [344, 325], [345, 325], [346, 325], [347, 325], [363, 325], [364, 325], [365, 325], [366, 325], [367, 325], [284, 326], [285, 326], [286, 326], [287, 326], [288, 326], [304, 326], [305, 326], [306, 326], [307, 326], [308, 326], [324, 326], [325, 326], [326, 326], [327, 326], [328, 326], [344, 326], [345, 326], [346, 326], [347, 326], [348, 326], [364, 326], [365, 326], [366, 326], [367, 326], [368, 326], [285, 327], [286, 327], [287, 327], [288, 327], [289, 327], [305, 327], [306, 327], [307, 327], [308, 327], [309, 327], [325, 327], [326, 327], [327, 327], [328, 327], [329, 327], [345, 327], [346, 327], [347, 327], [348, 327], [349, 327], [365, 327], [366, 327], [367, 327], [368, 327], [369, 327], [286, 328], [287, 328], [288, 328], [289, 328], [290, 328], [306, 328], [307, 328], [308, 328], [309, 328], [310, 328], [326, 328], [327, 328], [328, 328], [329, 328], [330, 328], [346, 328], [347, 328], [348, 328], [349, 328], [350, 328], [366, 328], [367, 328], [368, 328], [369, 328], [370, 328], [287, 329], [288, 329], [289, 329], [290, 329], [291, 329], [307, 329], [308, 329], [309, 329], [310, 329], [311, 329], [327, 329], [328, 329], [329, 329], [330, 329], [331, 329], [347, 329], [348, 329], [349, 329], [350, 329], [351, 329], [367, 329], [368, 329], [369, 329], [370, 329], [371, 329], [288, 330], [289, 330], [290, 330], [291, 330], [292, 330], [308, 330], [309, 330], [310, 330], [311, 330], [312, 330], [328, 330], [329, 330], [330, 330], [331, 330], [332, 330], [348, 330], [349, 330], [350, 330], [351, 330], [352, 330], [368, 330], [369, 330], [370, 330], [371, 330], [372, 330], [289, 331], [290, 331], [291, 331], [292, 331], [293, 331], [309, 331], [310, 331], [311, 331], [312, 331], [313, 331], [329, 331], [330, 331], [331, 331], [332, 331], [333, 331], [349, 331], [350, 331], [351, 331], [352, 331], [353, 331], [369, 331], [370, 331], [371, 331], [372, 331], [373, 331], [290, 332], [291, 332], [292, 332], [293, 332], [294, 332], [310, 332], [311, 332], [312, 332], [313, 332], [314, 332], [330, 332], [331, 332], [332, 332], [333, 332], [334, 332], [350, 332], [351, 332], [352, 332], [353, 332], [354, 332], [370, 332], [371, 332], [372, 332], [373, 332], [374, 332], [291, 333], [292, 333], [293, 333], [294, 333], [295, 333], [311, 333], [312, 333], [313, 333], [314, 333], [315, 333], [331, 333], [332, 333], [333, 333], [334, 333], [335, 333], [351, 333], [352, 333], [353, 333], [354, 333], [355, 333], [371, 333], [372, 333], [373, 333], [374, 333], [375, 333], [292, 334], [293, 334], [294, 334], [295, 334], [296, 334], [312, 334], [313, 334], [314, 334], [315, 334], [316, 334], [332, 334], [333, 334], [334, 334], [335, 334], [336, 334], [352, 334], [353, 334], [354, 334], [355, 334], [356, 334], [372, 334], [373, 334], [374, 334], [375, 334], [376, 334], [293, 335], [294, 335], [295, 335], [296, 335], [297, 335], [313, 335], [314, 335], [315, 335], [316, 335], [317, 335], [333, 335], [334, 335], [335, 335], [336, 335], [337, 335], [353, 335], [354, 335], [355, 335], [356, 335], [357, 335], [373, 335], [374, 335], [375, 335], [376, 335], [377, 335], [294, 336], [295, 336], [296, 336], [297, 336], [298, 336], [314, 336], [315, 336], [316, 336], [317, 336], [318, 336], [334, 336], [335, 336], [336, 336], [337, 336], [338, 336], [354, 336], [355, 336], [356, 336], [357, 336], [358, 336], [374, 336], [375, 336], [376, 336], [377, 336], [378, 336], [295, 337], [296, 337], [297, 337], [298, 337], [299, 337], [315, 337], [316, 337], [317, 337], [318, 337], [319, 337], [335, 337], [336, 337], [337, 337], [338, 337], [339, 337], [355, 337], [356, 337], [357, 337], [358, 337], [359, 337], [375, 337], [376, 337], [377, 337], [378, 337], [379, 337], [296, 338], [297, 338], [298, 338], [299, 338], [316, 338], [317, 338], [318, 338], [319, 338], [336, 338], [337, 338], [338, 338], [339, 338], [356, 338], [357, 338], [358, 338], [359, 338], [376, 338], [377, 338], [378, 338], [379, 338], [297, 339], [298, 339], [299, 339], [317, 339], [318, 339], [319, 339], [337, 339], [338, 339], [339, 339], [357, 339], [358, 339], [359, 339], [377, 339], [378, 339], [379, 339], [300, 340], [301, 340], [302, 340], [320, 340], [321, 340], [322, 340], [340, 340], [341, 340], [342, 340], [360, 340], [361, 340], [362, 340], [380, 340], [381, 340], [382, 340], [300, 341], [301, 341], [302, 341], [303, 341], [320, 341], [321, 341], [322, 341], [323, 341], [340, 341], [341, 341], [342, 341], [343, 341], [360, 341], [361, 341], [362, 341], [363, 341], [380, 341], [381, 341], [382, 341], [383, 341], [300, 342], [301, 342], [302, 342], [303, 342], [304, 342], [320, 342], [321, 342], [322, 342], [323, 342], [324, 342], [340, 342], [341, 342], [342, 342], [343, 342], [344, 342], [360, 342], [361, 342], [362, 342], [363, 342], [364, 342], [380, 342], [381, 342], [382, 342], [383, 342], [384, 342], [301, 343], [302, 343], [303, 343], [304, 343], [305, 343], [321, 343], [322, 343], [323, 343], [324, 343], [325, 343], [341, 343], [342, 343], [343, 343], [344, 343], [345, 343], [361, 343], [362, 343], [363, 343], [364, 343], [365, 343], [381, 343], [382, 343], [383, 343], [384, 343], [385, 343], [302, 344], [303, 344], [304, 344], [305, 344], [306, 344], [322, 344], [323, 344], [324, 344], [325, 344], [326, 344], [342, 344], [343, 344], [344, 344], [345, 344], [346, 344], [362, 344], [363, 344], [364, 344], [365, 344], [366, 344], [382, 344], [383, 344], [384, 344], [385, 344], [386, 344], [303, 345], [304, 345], [305, 345], [306, 345], [307, 345], [323, 345], [324, 345], [325, 345], [326, 345], [327, 345], [343, 345], [344, 345], [345, 345], [346, 345], [347, 345], [363, 345], [364, 345], [365, 345], [366, 345], [367, 345], [383, 345], [384, 345], [385, 345], [386, 345], [387, 345], [304, 346], [305, 346], [306, 346], [307, 346], [308, 346], [324, 346], [325, 346], [326, 346], [327, 346], [328, 346], [344, 346], [345, 346], [346, 346], [347, 346], [348, 346], [364, 346], [365, 346], [366, 346], [367, 346], [368, 346], [384, 346], [385, 346], [386, 346], [387, 346], [388, 346], [305, 347], [306, 347], [307, 347], [308, 347], [309, 347], [325, 347], [326, 347], [327, 347], [328, 347], [329, 347], [345, 347], [346, 347], [347, 347], [348, 347], [349, 347], [365, 347], [366, 347], [367, 347], [368, 347], [369, 347], [385, 347], [386, 347], [387, 347], [388, 347], [389, 347], [306, 348], [307, 348], [308, 348], [309, 348], [310, 348], [326, 348], [327, 348], [328, 348], [329, 348], [330, 348], [346, 348], [347, 348], [348, 348], [349, 348], [350, 348], [366, 348], [367, 348], [368, 348], [369, 348], [370, 348], [386, 348], [387, 348], [388, 348], [389, 348], [390, 348], [307, 349], [308, 349], [309, 349], [310, 349], [311, 349], [327, 349], [328, 349], [329, 349], [330, 349], [331, 349], [347, 349], [348, 349], [349, 349], [350, 349], [351, 349], [367, 349], [368, 349], [369, 349], [370, 349], [371, 349], [387, 349], [388, 349], [389, 349], [390, 349], [391, 349], [308, 350], [309, 350], [310, 350], [311, 350], [312, 350], [328, 350], [329, 350], [330, 350], [331, 350], [332, 350], [348, 350], [349, 350], [350, 350], [351, 350], [352, 350], [368, 350], [369, 350], [370, 350], [371, 350], [372, 350], [388, 350], [389, 350], [390, 350], [391, 350], [392, 350], [309, 351], [310, 351], [311, 351], [312, 351], [313, 351], [329, 351], [330, 351], [331, 351], [332, 351], [333, 351], [349, 351], [350, 351], [351, 351], [352, 351], [353, 351], [369, 351], [370, 351], [371, 351], [372, 351], [373, 351], [389, 351], [390, 351], [391, 351], [392, 351], [393, 351], [310, 352], [311, 352], [312, 352], [313, 352], [314, 352], [330, 352], [331, 352], [332, 352], [333, 352], [334, 352], [350, 352], [351, 352], [352, 352], [353, 352], [354, 352], [370, 352], [371, 352], [372, 352], [373, 352], [374, 352], [390, 352], [391, 352], [392, 352], [393, 352], [394, 352], [311, 353], [312, 353], [313, 353], [314, 353], [315, 353], [331, 353], [332, 353], [333, 353], [334, 353], [335, 353], [351, 353], [352, 353], [353, 353], [354, 353], [355, 353], [371, 353], [372, 353], [373, 353], [374, 353], [375, 353], [391, 353], [392, 353], [393, 353], [394, 353], [395, 353], [312, 354], [313, 354], [314, 354], [315, 354], [316, 354], [332, 354], [333, 354], [334, 354], [335, 354], [336, 354], [352, 354], [353, 354], [354, 354], [355, 354], [356, 354], [372, 354], [373, 354], [374, 354], [375, 354], [376, 354], [392, 354], [393, 354], [394, 354], [395, 354], [396, 354], [313, 355], [314, 355], [315, 355], [316, 355], [317, 355], [333, 355], [334, 355], [335, 355], [336, 355], [337, 355], [353, 355], [354, 355], [355, 355], [356, 355], [357, 355], [373, 355], [374, 355], [375, 355], [376, 355], [377, 355], [393, 355], [394, 355], [395, 355], [396, 355], [397, 355], [314, 356], [315, 356], [316, 356], [317, 356], [318, 356], [334, 356], [335, 356], [336, 356], [337, 356], [338, 356], [354, 356], [355, 356], [356, 356], [357, 356], [358, 356], [374, 356], [375, 356], [376, 356], [377, 356], [378, 356], [394, 356], [395, 356], [396, 356], [397, 356], [398, 356], [315, 357], [316, 357], [317, 357], [318, 357], [319, 357], [335, 357], [336, 357], [337, 357], [338, 357], [339, 357], [355, 357], [356, 357], [357, 357], [358, 357], [359, 357], [375, 357], [376, 357], [377, 357], [378, 357], [379, 357], [395, 357], [396, 357], [397, 357], [398, 357], [399, 357], [316, 358], [317, 358], [318, 358], [319, 358], [336, 358], [337, 358], [338, 358], [339, 358], [356, 358], [357, 358], [358, 358], [359, 358], [376, 358], [377, 358], [378, 358], [379, 358], [396, 358], [397, 358], [398, 358], [399, 358], [317, 359], [318, 359], [319, 359], [337, 359], [338, 359], [339, 359], [357, 359], [358, 359], [359, 359], [377, 359], [378, 359], [379, 359], [397, 359], [398, 359], [399, 359], [320, 360], [321, 360], [322, 360], [340, 360], [341, 360], [342, 360], [360, 360], [361, 360], [362, 360], [380, 360], [381, 360], [382, 360], [320, 361], [321, 361], [322, 361], [323, 361], [340, 361], [341, 361], [342, 361], [343, 361], [360, 361], [361, 361], [362, 361], [363, 361], [380, 361], [381, 361], [382, 361], [383, 361], [320, 362], [321, 362], [322, 362], [323, 362], [324, 362], [340, 362], [341, 362], [342, 362], [343, 362], [344, 362], [360, 362], [361, 362], [362, 362], [363, 362], [364, 362], [380, 362], [381, 362], [382, 362], [383, 362], [384, 362], [321, 363], [322, 363], [323, 363], [324, 363], [325, 363], [341, 363], [342, 363], [343, 363], [344, 363], [345, 363], [361, 363], [362, 363], [363, 363], [364, 363], [365, 363], [381, 363], [382, 363], [383, 363], [384, 363], [385, 363], [322, 364], [323, 364], [324, 364], [325, 364], [326, 364], [342, 364], [343, 364], [344, 364], [345, 364], [346, 364], [362, 364], [363, 364], [364, 364], [365, 364], [366, 364], [382, 364], [383, 364], [384, 364], [385, 364], [386, 364], [323, 365], [324, 365], [325, 365], [326, 365], [327, 365], [343, 365], [344, 365], [345, 365], [346, 365], [347, 365], [363, 365], [364, 365], [365, 365], [366, 365], [367, 365], [383, 365], [384, 365], [385, 365], [386, 365], [387, 365], [324, 366], [325, 366], [326, 366], [327, 366], [328, 366], [344, 366], [345, 366], [346, 366], [347, 366], [348, 366], [364, 366], [365, 366], [366, 366], [367, 366], [368, 366], [384, 366], [385, 366], [386, 366], [387, 366], [388, 366], [325, 367], [326, 367], [327, 367], [328, 367], [329, 367], [345, 367], [346, 367], [347, 367], [348, 367], [349, 367], [365, 367], [366, 367], [367, 367], [368, 367], [369, 367], [385, 367], [386, 367], [387, 367], [388, 367], [389, 367], [326, 368], [327, 368], [328, 368], [329, 368], [330, 368], [346, 368], [347, 368], [348, 368], [349, 368], [350, 368], [366, 368], [367, 368], [368, 368], [369, 368], [370, 368], [386, 368], [387, 368], [388, 368], [389, 368], [390, 368], [327, 369], [328, 369], [329, 369], [330, 369], [331, 369], [347, 369], [348, 369], [349, 369], [350, 369], [351, 369], [367, 369], [368, 369], [369, 369], [370, 369], [371, 369], [387, 369], [388, 369], [389, 369], [390, 369], [391, 369], [328, 370], [329, 370], [330, 370], [331, 370], [332, 370], [348, 370], [349, 370], [350, 370], [351, 370], [352, 370], [368, 370], [369, 370], [370, 370], [371, 370], [372, 370], [388, 370], [389, 370], [390, 370], [391, 370], [392, 370], [329, 371], [330, 371], [331, 371], [332, 371], [333, 371], [349, 371], [350, 371], [351, 371], [352, 371], [353, 371], [369, 371], [370, 371], [371, 371], [372, 371], [373, 371], [389, 371], [390, 371], [391, 371], [392, 371], [393, 371], [330, 372], [331, 372], [332, 372], [333, 372], [334, 372], [350, 372], [351, 372], [352, 372], [353, 372], [354, 372], [370, 372], [371, 372], [372, 372], [373, 372], [374, 372], [390, 372], [391, 372], [392, 372], [393, 372], [394, 372], [331, 373], [332, 373], [333, 373], [334, 373], [335, 373], [351, 373], [352, 373], [353, 373], [354, 373], [355, 373], [371, 373], [372, 373], [373, 373], [374, 373], [375, 373], [391, 373], [392, 373], [393, 373], [394, 373], [395, 373], [332, 374], [333, 374], [334, 374], [335, 374], [336, 374], [352, 374], [353, 374], [354, 374], [355, 374], [356, 374], [372, 374], [373, 374], [374, 374], [375, 374], [376, 374], [392, 374], [393, 374], [394, 374], [395, 374], [396, 374], [333, 375], [334, 375], [335, 375], [336, 375], [337, 375], [353, 375], [354, 375], [355, 375], [356, 375], [357, 375], [373, 375], [374, 375], [375, 375], [376, 375], [377, 375], [393, 375], [394, 375], [395, 375], [396, 375], [397, 375], [334, 376], [335, 376], [336, 376], [337, 376], [338, 376], [354, 376], [355, 376], [356, 376], [357, 376], [358, 376], [374, 376], [375, 376], [376, 376], [377, 376], [378, 376], [394, 376], [395, 376], [396, 376], [397, 376], [398, 376], [335, 377], [336, 377], [337, 377], [338, 377], [339, 377], [355, 377], [356, 377], [357, 377], [358, 377], [359, 377], [375, 377], [376, 377], [377, 377], [378, 377], [379, 377], [395, 377], [396, 377], [397, 377], [398, 377], [399, 377], [336, 378], [337, 378], [338, 378], [339, 378], [356, 378], [357, 378], [358, 378], [359, 378], [376, 378], [377, 378], [378, 378], [379, 378], [396, 378], [397, 378], [398, 378], [399, 378], [337, 379], [338, 379], [339, 379], [357, 379], [358, 379], [359, 379], [377, 379], [378, 379], [379, 379], [397, 379], [398, 379], [399, 379], [340, 380], [341, 380], [342, 380], [360, 380], [361, 380], [362, 380], [380, 380], [381, 380], [382, 380], [340, 381], [341, 381], [342, 381], [343, 381], [360, 381], [361, 381], [362, 381], [363, 381], [380, 381], [381, 381], [382, 381], [383, 381], [340, 382], [341, 382], [342, 382], [343, 382], [344, 382], [360, 382], [361, 382], [362, 382], [363, 382], [364, 382], [380, 382], [381, 382], [382, 382], [383, 382], [384, 382], [341, 383], [342, 383], [343, 383], [344, 383], [345, 383], [361, 383], [362, 383], [363, 383], [364, 383], [365, 383], [381, 383], [382, 383], [383, 383], [384, 383], [385, 383], [342, 384], [343, 384], [344, 384], [345, 384], [346, 384], [362, 384], [363, 384], [364, 384], [365, 384], [366, 384], [382, 384], [383, 384], [384, 384], [385, 384], [386, 384], [343, 385], [344, 385], [345, 385], [346, 385], [347, 385], [363, 385], [364, 385], [365, 385], [366, 385], [367, 385], [383, 385], [384, 385], [385, 385], [386, 385], [387, 385], [344, 386], [345, 386], [346, 386], [347, 386], [348, 386], [364, 386], [365, 386], [366, 386], [367, 386], [368, 386], [384, 386], [385, 386], [386, 386], [387, 386], [388, 386], [345, 387], [346, 387], [347, 387], [348, 387], [349, 387], [365, 387], [366, 387], [367, 387], [368, 387], [369, 387], [385, 387], [386, 387], [387, 387], [388, 387], [389, 387], [346, 388], [347, 388], [348, 388], [349, 388], [350, 388], [366, 388], [367, 388], [368, 388], [369, 388], [370, 388], [386, 388], [387, 388], [388, 388], [389, 388], [390, 388], [347, 389], [348, 389], [349, 389], [350, 389], [351, 389], [367, 389], [368, 389], [369, 389], [370, 389], [371, 389], [387, 389], [388, 389], [389, 389], [390, 389], [391, 389], [348, 390], [349, 390], [350, 390], [351, 390], [352, 390], [368, 390], [369, 390], [370, 390], [371, 390], [372, 390], [388, 390], [389, 390], [390, 390], [391, 390], [392, 390], [349, 391], [350, 391], [351, 391], [352, 391], [353, 391], [369, 391], [370, 391], [371, 391], [372, 391], [373, 391], [389, 391], [390, 391], [391, 391], [392, 391], [393, 391], [350, 392], [351, 392], [352, 392], [353, 392], [354, 392], [370, 392], [371, 392], [372, 392], [373, 392], [374, 392], [390, 392], [391, 392], [392, 392], [393, 392], [394, 392], [351, 393], [352, 393], [353, 393], [354, 393], [355, 393], [371, 393], [372, 393], [373, 393], [374, 393], [375, 393], [391, 393], [392, 393], [393, 393], [394, 393], [395, 393], [352, 394], [353, 394], [354, 394], [355, 394], [356, 394], [372, 394], [373, 394], [374, 394], [375, 394], [376, 394], [392, 394], [393, 394], [394, 394], [395, 394], [396, 394], [353, 395], [354, 395], [355, 395], [356, 395], [357, 395], [373, 395], [374, 395], [375, 395], [376, 395], [377, 395], [393, 395], [394, 395], [395, 395], [396, 395], [397, 395], [354, 396], [355, 396], [356, 396], [357, 396], [358, 396], [374, 396], [375, 396], [376, 396], [377, 396], [378, 396], [394, 396], [395, 396], [396, 396], [397, 396], [398, 396], [355, 397], [356, 397], [357, 397], [358, 397], [359, 397], [375, 397], [376, 397], [377, 397], [378, 397], [379, 397], [395, 397], [396, 397], [397, 397], [398, 397], [399, 397], [356, 398], [357, 398], [358, 398], [359, 398], [376, 398], [377, 398], [378, 398], [379, 398], [396, 398], [397, 398], [398, 398], [399, 398], [357, 399], [358, 399], [359, 399], [377, 399], [378, 399], [379, 399], [397, 399], [398, 399], [399, 399]]
V1 to V4
[[0, 0], [1, 0], [2, 0], [20, 0], [21, 0], [22, 0], [40, 0], [41, 0], [42, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [40, 1], [41, 1], [42, 1], [43, 1], [44, 1], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [22, 2], [23, 2], [24, 2], [25, 2], [26, 2], [42, 2], [43, 2], [44, 2], [45, 2], [46, 2], [4, 3], [5, 3], [6, 3], [7, 3], [8, 3], [24, 3], [25, 3], [26, 3], [27, 3], [28, 3], [44, 3], [45, 3], [46, 3], [47, 3], [48, 3], [6, 4], [7, 4], [8, 4], [9, 4], [10, 4], [26, 4], [27, 4], [28, 4], [29, 4], [30, 4], [46, 4], [47, 4], [48, 4], [49, 4], [50, 4], [8, 5], [9, 5], [10, 5], [11, 5], [12, 5], [28, 5], [29, 5], [30, 5], [31, 5], [32, 5], [48, 5], [49, 5], [50, 5], [51, 5], [52, 5], [10, 6], [11, 6], [12, 6], [13, 6], [14, 6], [30, 6], [31, 6], [32, 6], [33, 6], [34, 6], [50, 6], [51, 6], [52, 6], [53, 6], [54, 6], [12, 7], [13, 7], [14, 7], [15, 7], [16, 7], [32, 7], [33, 7], [34, 7], [35, 7], [36, 7], [52, 7], [53, 7], [54, 7], [55, 7], [56, 7], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [34, 8], [35, 8], [36, 8], [37, 8], [38, 8], [54, 8], [55, 8], [56, 8], [57, 8], [58, 8], [16, 9], [17, 9], [18, 9], [19, 9], [36, 9], [37, 9], [38, 9], [39, 9], [56, 9], [57, 9], [58, 9], [59, 9], [0, 10], [1, 10], [2, 10], [20, 10], [21, 10], [22, 10], [40, 10], [41, 10], [42, 10], [60, 10], [61, 10], [62, 10], [80, 10], [81, 10], [82, 10], [0, 11], [1, 11], [2, 11], [3, 11], [4, 11], [20, 11], [21, 11], [22, 11], [23, 11], [24, 11], [40, 11], [41, 11], [42, 11], [43, 11], [44, 11], [60, 11], [61, 11], [62, 11], [63, 11], [64, 11], [80, 11], [81, 11], [82, 11], [83, 11], [84, 11], [2, 12], [3, 12], [4, 12], [5, 12], [6, 12], [22, 12], [23, 12], [24, 12], [25, 12], [26, 12], [42, 12], [43, 12], [44, 12], [45, 12], [46, 12], [62, 12], [63, 12], [64, 12], [65, 12], [66, 12], [82, 12], [83, 12], [84, 12], [85, 12], [86, 12], [4, 13], [5, 13], [6, 13], [7, 13], [8, 13], [24, 13], [25, 13], [26, 13], [27, 13], [28, 13], [44, 13], [45, 13], [46, 13], [47, 13], [48, 13], [64, 13], [65, 13], [66, 13], [67, 13], [68, 13], [84, 13], [85, 13], [86, 13], [87, 13], [88, 13], [6, 14], [7, 14], [8, 14], [9, 14], [10, 14], [26, 14], [27, 14], [28, 14], [29, 14], [30, 14], [46, 14], [47, 14], [48, 14], [49, 14], [50, 14], [66, 14], [67, 14], [68, 14], [69, 14], [70, 14], [86, 14], [87, 14], [88, 14], [89, 14], [90, 14], [8, 15], [9, 15], [10, 15], [11, 15], [12, 15], [28, 15], [29, 15], [30, 15], [31, 15], [32, 15], [48, 15], [49, 15], [50, 15], [51, 15], [52, 15], [68, 15], [69, 15], [70, 15], [71, 15], [72, 15], [88, 15], [89, 15], [90, 15], [91, 15], [92, 15], [10, 16], [11, 16], [12, 16], [13, 16], [14, 16], [30, 16], [31, 16], [32, 16], [33, 16], [34, 16], [50, 16], [51, 16], [52, 16], [53, 16], [54, 16], [70, 16], [71, 16], [72, 16], [73, 16], [74, 16], [90, 16], [91, 16], [92, 16], [93, 16], [94, 16], [12, 17], [13, 17], [14, 17], [15, 17], [16, 17], [32, 17], [33, 17], [34, 17], [35, 17], [36, 17], [52, 17], [53, 17], [54, 17], [55, 17], [56, 17], [72, 17], [73, 17], [74, 17], [75, 17], [76, 17], [92, 17], [93, 17], [94, 17], [95, 17], [96, 17], [14, 18], [15, 18], [16, 18], [17, 18], [18, 18], [34, 18], [35, 18], [36, 18], [37, 18], [38, 18], [54, 18], [55, 18], [56, 18], [57, 18], [58, 18], [74, 18], [75, 18], [76, 18], [77, 18], [78, 18], [94, 18], [95, 18], [96, 18], [97, 18], [98, 18], [16, 19], [17, 19], [18, 19], [19, 19], [36, 19], [37, 19], [38, 19], [39, 19], [56, 19], [57, 19], [58, 19], [59, 19], [76, 19], [77, 19], [78, 19], [79, 19], [96, 19], [97, 19], [98, 19], [99, 19], [40, 20], [41, 20], [42, 20], [60, 20], [61, 20], [62, 20], [80, 20], [81, 20], [82, 20], [100, 20], [101, 20], [102, 20], [120, 20], [121, 20], [122, 20], [40, 21], [41, 21], [42, 21], [43, 21], [44, 21], [60, 21], [61, 21], [62, 21], [63, 21], [64, 21], [80, 21], [81, 21], [82, 21], [83, 21], [84, 21], [100, 21], [101, 21], [102, 21], [103, 21], [104, 21], [120, 21], [121, 21], [122, 21], [123, 21], [124, 21], [42, 22], [43, 22], [44, 22], [45, 22], [46, 22], [62, 22], [63, 22], [64, 22], [65, 22], [66, 22], [82, 22], [83, 22], [84, 22], [85, 22], [86, 22], [102, 22], [103, 22], [104, 22], [105, 22], [106, 22], [122, 22], [123, 22], [124, 22], [125, 22], [126, 22], [44, 23], [45, 23], [46, 23], [47, 23], [48, 23], [64, 23], [65, 23], [66, 23], [67, 23], [68, 23], [84, 23], [85, 23], [86, 23], [87, 23], [88, 23], [104, 23], [105, 23], [106, 23], [107, 23], [108, 23], [124, 23], [125, 23], [126, 23], [127, 23], [128, 23], [46, 24], [47, 24], [48, 24], [49, 24], [50, 24], [66, 24], [67, 24], [68, 24], [69, 24], [70, 24], [86, 24], [87, 24], [88, 24], [89, 24], [90, 24], [106, 24], [107, 24], [108, 24], [109, 24], [110, 24], [126, 24], [127, 24], [128, 24], [129, 24], [130, 24], [48, 25], [49, 25], [50, 25], [51, 25], [52, 25], [68, 25], [69, 25], [70, 25], [71, 25], [72, 25], [88, 25], [89, 25], [90, 25], [91, 25], [92, 25], [108, 25], [109, 25], [110, 25], [111, 25], [112, 25], [128, 25], [129, 25], [130, 25], [131, 25], [132, 25], [50, 26], [51, 26], [52, 26], [53, 26], [54, 26], [70, 26], [71, 26], [72, 26], [73, 26], [74, 26], [90, 26], [91, 26], [92, 26], [93, 26], [94, 26], [110, 26], [111, 26], [112, 26], [113, 26], [114, 26], [130, 26], [131, 26], [132, 26], [133, 26], [134, 26], [52, 27], [53, 27], [54, 27], [55, 27], [56, 27], [72, 27], [73, 27], [74, 27], [75, 27], [76, 27], [92, 27], [93, 27], [94, 27], [95, 27], [96, 27], [112, 27], [113, 27], [114, 27], [115, 27], [116, 27], [132, 27], [133, 27], [134, 27], [135, 27], [136, 27], [54, 28], [55, 28], [56, 28], [57, 28], [58, 28], [74, 28], [75, 28], [76, 28], [77, 28], [78, 28], [94, 28], [95, 28], [96, 28], [97, 28], [98, 28], [114, 28], [115, 28], [116, 28], [117, 28], [118, 28], [134, 28], [135, 28], [136, 28], [137, 28], [138, 28], [56, 29], [57, 29], [58, 29], [59, 29], [76, 29], [77, 29], [78, 29], [79, 29], [96, 29], [97, 29], [98, 29], [99, 29], [116, 29], [117, 29], [118, 29], [119, 29], [136, 29], [137, 29], [138, 29], [139, 29], [80, 30], [81, 30], [82, 30], [100, 30], [101, 30], [102, 30], [120, 30], [121, 30], [122, 30], [140, 30], [141, 30], [142, 30], [160, 30], [161, 30], [162, 30], [80, 31], [81, 31], [82, 31], [83, 31], [84, 31], [100, 31], [101, 31], [102, 31], [103, 31], [104, 31], [120, 31], [121, 31], [122, 31], [123, 31], [124, 31], [140, 31], [141, 31], [142, 31], [143, 31], [144, 31], [160, 31], [161, 31], [162, 31], [163, 31], [164, 31], [82, 32], [83, 32], [84, 32], [85, 32], [86, 32], [102, 32], [103, 32], [104, 32], [105, 32], [106, 32], [122, 32], [123, 32], [124, 32], [125, 32], [126, 32], [142, 32], [143, 32], [144, 32], [145, 32], [146, 32], [162, 32], [163, 32], [164, 32], [165, 32], [166, 32], [84, 33], [85, 33], [86, 33], [87, 33], [88, 33], [104, 33], [105, 33], [106, 33], [107, 33], [108, 33], [124, 33], [125, 33], [126, 33], [127, 33], [128, 33], [144, 33], [145, 33], [146, 33], [147, 33], [148, 33], [164, 33], [165, 33], [166, 33], [167, 33], [168, 33], [86, 34], [87, 34], [88, 34], [89, 34], [90, 34], [106, 34], [107, 34], [108, 34], [109, 34], [110, 34], [126, 34], [127, 34], [128, 34], [129, 34], [130, 34], [146, 34], [147, 34], [148, 34], [149, 34], [150, 34], [166, 34], [167, 34], [168, 34], [169, 34], [170, 34], [88, 35], [89, 35], [90, 35], [91, 35], [92, 35], [108, 35], [109, 35], [110, 35], [111, 35], [112, 35], [128, 35], [129, 35], [130, 35], [131, 35], [132, 35], [148, 35], [149, 35], [150, 35], [151, 35], [152, 35], [168, 35], [169, 35], [170, 35], [171, 35], [172, 35], [90, 36], [91, 36], [92, 36], [93, 36], [94, 36], [110, 36], [111, 36], [112, 36], [113, 36], [114, 36], [130, 36], [131, 36], [132, 36], [133, 36], [134, 36], [150, 36], [151, 36], [152, 36], [153, 36], [154, 36], [170, 36], [171, 36], [172, 36], [173, 36], [174, 36], [92, 37], [93, 37], [94, 37], [95, 37], [96, 37], [112, 37], [113, 37], [114, 37], [115, 37], [116, 37], [132, 37], [133, 37], [134, 37], [135, 37], [136, 37], [152, 37], [153, 37], [154, 37], [155, 37], [156, 37], [172, 37], [173, 37], [174, 37], [175, 37], [176, 37], [94, 38], [95, 38], [96, 38], [97, 38], [98, 38], [114, 38], [115, 38], [116, 38], [117, 38], [118, 38], [134, 38], [135, 38], [136, 38], [137, 38], [138, 38], [154, 38], [155, 38], [156, 38], [157, 38], [158, 38], [174, 38], [175, 38], [176, 38], [177, 38], [178, 38], [96, 39], [97, 39], [98, 39], [99, 39], [116, 39], [117, 39], [118, 39], [119, 39], [136, 39], [137, 39], [138, 39], [139, 39], [156, 39], [157, 39], [158, 39], [159, 39], [176, 39], [177, 39], [178, 39], [179, 39], [120, 40], [121, 40], [122, 40], [140, 40], [141, 40], [142, 40], [160, 40], [161, 40], [162, 40], [180, 40], [181, 40], [182, 40], [200, 40], [201, 40], [202, 40], [120, 41], [121, 41], [122, 41], [123, 41], [124, 41], [140, 41], [141, 41], [142, 41], [143, 41], [144, 41], [160, 41], [161, 41], [162, 41], [163, 41], [164, 41], [180, 41], [181, 41], [182, 41], [183, 41], [184, 41], [200, 41], [201, 41], [202, 41], [203, 41], [204, 41], [122, 42], [123, 42], [124, 42], [125, 42], [126, 42], [142, 42], [143, 42], [144, 42], [145, 42], [146, 42], [162, 42], [163, 42], [164, 42], [165, 42], [166, 42], [182, 42], [183, 42], [184, 42], [185, 42], [186, 42], [202, 42], [203, 42], [204, 42], [205, 42], [206, 42], [124, 43], [125, 43], [126, 43], [127, 43], [128, 43], [144, 43], [145, 43], [146, 43], [147, 43], [148, 43], [164, 43], [165, 43], [166, 43], [167, 43], [168, 43], [184, 43], [185, 43], [186, 43], [187, 43], [188, 43], [204, 43], [205, 43], [206, 43], [207, 43], [208, 43], [126, 44], [127, 44], [128, 44], [129, 44], [130, 44], [146, 44], [147, 44], [148, 44], [149, 44], [150, 44], [166, 44], [167, 44], [168, 44], [169, 44], [170, 44], [186, 44], [187, 44], [188, 44], [189, 44], [190, 44], [206, 44], [207, 44], [208, 44], [209, 44], [210, 44], [128, 45], [129, 45], [130, 45], [131, 45], [132, 45], [148, 45], [149, 45], [150, 45], [151, 45], [152, 45], [168, 45], [169, 45], [170, 45], [171, 45], [172, 45], [188, 45], [189, 45], [190, 45], [191, 45], [192, 45], [208, 45], [209, 45], [210, 45], [211, 45], [212, 45], [130, 46], [131, 46], [132, 46], [133, 46], [134, 46], [150, 46], [151, 46], [152, 46], [153, 46], [154, 46], [170, 46], [171, 46], [172, 46], [173, 46], [174, 46], [190, 46], [191, 46], [192, 46], [193, 46], [194, 46], [210, 46], [211, 46], [212, 46], [213, 46], [214, 46], [132, 47], [133, 47], [134, 47], [135, 47], [136, 47], [152, 47], [153, 47], [154, 47], [155, 47], [156, 47], [172, 47], [173, 47], [174, 47], [175, 47], [176, 47], [192, 47], [193, 47], [194, 47], [195, 47], [196, 47], [212, 47], [213, 47], [214, 47], [215, 47], [216, 47], [134, 48], [135, 48], [136, 48], [137, 48], [138, 48], [154, 48], [155, 48], [156, 48], [157, 48], [158, 48], [174, 48], [175, 48], [176, 48], [177, 48], [178, 48], [194, 48], [195, 48], [196, 48], [197, 48], [198, 48], [214, 48], [215, 48], [216, 48], [217, 48], [218, 48], [136, 49], [137, 49], [138, 49], [139, 49], [156, 49], [157, 49], [158, 49], [159, 49], [176, 49], [177, 49], [178, 49], [179, 49], [196, 49], [197, 49], [198, 49], [199, 49], [216, 49], [217, 49], [218, 49], [219, 49], [160, 50], [161, 50], [162, 50], [180, 50], [181, 50], [182, 50], [200, 50], [201, 50], [202, 50], [220, 50], [221, 50], [222, 50], [240, 50], [241, 50], [242, 50], [160, 51], [161, 51], [162, 51], [163, 51], [164, 51], [180, 51], [181, 51], [182, 51], [183, 51], [184, 51], [200, 51], [201, 51], [202, 51], [203, 51], [204, 51], [220, 51], [221, 51], [222, 51], [223, 51], [224, 51], [240, 51], [241, 51], [242, 51], [243, 51], [244, 51], [162, 52], [163, 52], [164, 52], [165, 52], [166, 52], [182, 52], [183, 52], [184, 52], [185, 52], [186, 52], [202, 52], [203, 52], [204, 52], [205, 52], [206, 52], [222, 52], [223, 52], [224, 52], [225, 52], [226, 52], [242, 52], [243, 52], [244, 52], [245, 52], [246, 52], [164, 53], [165, 53], [166, 53], [167, 53], [168, 53], [184, 53], [185, 53], [186, 53], [187, 53], [188, 53], [204, 53], [205, 53], [206, 53], [207, 53], [208, 53], [224, 53], [225, 53], [226, 53], [227, 53], [228, 53], [244, 53], [245, 53], [246, 53], [247, 53], [248, 53], [166, 54], [167, 54], [168, 54], [169, 54], [170, 54], [186, 54], [187, 54], [188, 54], [189, 54], [190, 54], [206, 54], [207, 54], [208, 54], [209, 54], [210, 54], [226, 54], [227, 54], [228, 54], [229, 54], [230, 54], [246, 54], [247, 54], [248, 54], [249, 54], [250, 54], [168, 55], [169, 55], [170, 55], [171, 55], [172, 55], [188, 55], [189, 55], [190, 55], [191, 55], [192, 55], [208, 55], [209, 55], [210, 55], [211, 55], [212, 55], [228, 55], [229, 55], [230, 55], [231, 55], [232, 55], [248, 55], [249, 55], [250, 55], [251, 55], [252, 55], [170, 56], [171, 56], [172, 56], [173, 56], [174, 56], [190, 56], [191, 56], [192, 56], [193, 56], [194, 56], [210, 56], [211, 56], [212, 56], [213, 56], [214, 56], [230, 56], [231, 56], [232, 56], [233, 56], [234, 56], [250, 56], [251, 56], [252, 56], [253, 56], [254, 56], [172, 57], [173, 57], [174, 57], [175, 57], [176, 57], [192, 57], [193, 57], [194, 57], [195, 57], [196, 57], [212, 57], [213, 57], [214, 57], [215, 57], [216, 57], [232, 57], [233, 57], [234, 57], [235, 57], [236, 57], [252, 57], [253, 57], [254, 57], [255, 57], [256, 57], [174, 58], [175, 58], [176, 58], [177, 58], [178, 58], [194, 58], [195, 58], [196, 58], [197, 58], [198, 58], [214, 58], [215, 58], [216, 58], [217, 58], [218, 58], [234, 58], [235, 58], [236, 58], [237, 58], [238, 58], [254, 58], [255, 58], [256, 58], [257, 58], [258, 58], [176, 59], [177, 59], [178, 59], [179, 59], [196, 59], [197, 59], [198, 59], [199, 59], [216, 59], [217, 59], [218, 59], [219, 59], [236, 59], [237, 59], [238, 59], [239, 59], [256, 59], [257, 59], [258, 59], [259, 59], [200, 60], [201, 60], [202, 60], [220, 60], [221, 60], [222, 60], [240, 60], [241, 60], [242, 60], [260, 60], [261, 60], [262, 60], [280, 60], [281, 60], [282, 60], [200, 61], [201, 61], [202, 61], [203, 61], [204, 61], [220, 61], [221, 61], [222, 61], [223, 61], [224, 61], [240, 61], [241, 61], [242, 61], [243, 61], [244, 61], [260, 61], [261, 61], [262, 61], [263, 61], [264, 61], [280, 61], [281, 61], [282, 61], [283, 61], [284, 61], [202, 62], [203, 62], [204, 62], [205, 62], [206, 62], [222, 62], [223, 62], [224, 62], [225, 62], [226, 62], [242, 62], [243, 62], [244, 62], [245, 62], [246, 62], [262, 62], [263, 62], [264, 62], [265, 62], [266, 62], [282, 62], [283, 62], [284, 62], [285, 62], [286, 62], [204, 63], [205, 63], [206, 63], [207, 63], [208, 63], [224, 63], [225, 63], [226, 63], [227, 63], [228, 63], [244, 63], [245, 63], [246, 63], [247, 63], [248, 63], [264, 63], [265, 63], [266, 63], [267, 63], [268, 63], [284, 63], [285, 63], [286, 63], [287, 63], [288, 63], [206, 64], [207, 64], [208, 64], [209, 64], [210, 64], [226, 64], [227, 64], [228, 64], [229, 64], [230, 64], [246, 64], [247, 64], [248, 64], [249, 64], [250, 64], [266, 64], [267, 64], [268, 64], [269, 64], [270, 64], [286, 64], [287, 64], [288, 64], [289, 64], [290, 64], [208, 65], [209, 65], [210, 65], [211, 65], [212, 65], [228, 65], [229, 65], [230, 65], [231, 65], [232, 65], [248, 65], [249, 65], [250, 65], [251, 65], [252, 65], [268, 65], [269, 65], [270, 65], [271, 65], [272, 65], [288, 65], [289, 65], [290, 65], [291, 65], [292, 65], [210, 66], [211, 66], [212, 66], [213, 66], [214, 66], [230, 66], [231, 66], [232, 66], [233, 66], [234, 66], [250, 66], [251, 66], [252, 66], [253, 66], [254, 66], [270, 66], [271, 66], [272, 66], [273, 66], [274, 66], [290, 66], [291, 66], [292, 66], [293, 66], [294, 66], [212, 67], [213, 67], [214, 67], [215, 67], [216, 67], [232, 67], [233, 67], [234, 67], [235, 67], [236, 67], [252, 67], [253, 67], [254, 67], [255, 67], [256, 67], [272, 67], [273, 67], [274, 67], [275, 67], [276, 67], [292, 67], [293, 67], [294, 67], [295, 67], [296, 67], [214, 68], [215, 68], [216, 68], [217, 68], [218, 68], [234, 68], [235, 68], [236, 68], [237, 68], [238, 68], [254, 68], [255, 68], [256, 68], [257, 68], [258, 68], [274, 68], [275, 68], [276, 68], [277, 68], [278, 68], [294, 68], [295, 68], [296, 68], [297, 68], [298, 68], [216, 69], [217, 69], [218, 69], [219, 69], [236, 69], [237, 69], [238, 69], [239, 69], [256, 69], [257, 69], [258, 69], [259, 69], [276, 69], [277, 69], [278, 69], [279, 69], [296, 69], [297, 69], [298, 69], [299, 69], [240, 70], [241, 70], [242, 70], [260, 70], [261, 70], [262, 70], [280, 70], [281, 70], [282, 70], [300, 70], [301, 70], [302, 70], [320, 70], [321, 70], [322, 70], [240, 71], [241, 71], [242, 71], [243, 71], [244, 71], [260, 71], [261, 71], [262, 71], [263, 71], [264, 71], [280, 71], [281, 71], [282, 71], [283, 71], [284, 71], [300, 71], [301, 71], [302, 71], [303, 71], [304, 71], [320, 71], [321, 71], [322, 71], [323, 71], [324, 71], [242, 72], [243, 72], [244, 72], [245, 72], [246, 72], [262, 72], [263, 72], [264, 72], [265, 72], [266, 72], [282, 72], [283, 72], [284, 72], [285, 72], [286, 72], [302, 72], [303, 72], [304, 72], [305, 72], [306, 72], [322, 72], [323, 72], [324, 72], [325, 72], [326, 72], [244, 73], [245, 73], [246, 73], [247, 73], [248, 73], [264, 73], [265, 73], [266, 73], [267, 73], [268, 73], [284, 73], [285, 73], [286, 73], [287, 73], [288, 73], [304, 73], [305, 73], [306, 73], [307, 73], [308, 73], [324, 73], [325, 73], [326, 73], [327, 73], [328, 73], [246, 74], [247, 74], [248, 74], [249, 74], [250, 74], [266, 74], [267, 74], [268, 74], [269, 74], [270, 74], [286, 74], [287, 74], [288, 74], [289, 74], [290, 74], [306, 74], [307, 74], [308, 74], [309, 74], [310, 74], [326, 74], [327, 74], [328, 74], [329, 74], [330, 74], [248, 75], [249, 75], [250, 75], [251, 75], [252, 75], [268, 75], [269, 75], [270, 75], [271, 75], [272, 75], [288, 75], [289, 75], [290, 75], [291, 75], [292, 75], [308, 75], [309, 75], [310, 75], [311, 75], [312, 75], [328, 75], [329, 75], [330, 75], [331, 75], [332, 75], [250, 76], [251, 76], [252, 76], [253, 76], [254, 76], [270, 76], [271, 76], [272, 76], [273, 76], [274, 76], [290, 76], [291, 76], [292, 76], [293, 76], [294, 76], [310, 76], [311, 76], [312, 76], [313, 76], [314, 76], [330, 76], [331, 76], [332, 76], [333, 76], [334, 76], [252, 77], [253, 77], [254, 77], [255, 77], [256, 77], [272, 77], [273, 77], [274, 77], [275, 77], [276, 77], [292, 77], [293, 77], [294, 77], [295, 77], [296, 77], [312, 77], [313, 77], [314, 77], [315, 77], [316, 77], [332, 77], [333, 77], [334, 77], [335, 77], [336, 77], [254, 78], [255, 78], [256, 78], [257, 78], [258, 78], [274, 78], [275, 78], [276, 78], [277, 78], [278, 78], [294, 78], [295, 78], [296, 78], [297, 78], [298, 78], [314, 78], [315, 78], [316, 78], [317, 78], [318, 78], [334, 78], [335, 78], [336, 78], [337, 78], [338, 78], [256, 79], [257, 79], [258, 79], [259, 79], [276, 79], [277, 79], [278, 79], [279, 79], [296, 79], [297, 79], [298, 79], [299, 79], [316, 79], [317, 79], [318, 79], [319, 79], [336, 79], [337, 79], [338, 79], [339, 79], [280, 80], [281, 80], [282, 80], [300, 80], [301, 80], [302, 80], [320, 80], [321, 80], [322, 80], [340, 80], [341, 80], [342, 80], [360, 80], [361, 80], [362, 80], [280, 81], [281, 81], [282, 81], [283, 81], [284, 81], [300, 81], [301, 81], [302, 81], [303, 81], [304, 81], [320, 81], [321, 81], [322, 81], [323, 81], [324, 81], [340, 81], [341, 81], [342, 81], [343, 81], [344, 81], [360, 81], [361, 81], [362, 81], [363, 81], [364, 81], [282, 82], [283, 82], [284, 82], [285, 82], [286, 82], [302, 82], [303, 82], [304, 82], [305, 82], [306, 82], [322, 82], [323, 82], [324, 82], [325, 82], [326, 82], [342, 82], [343, 82], [344, 82], [345, 82], [346, 82], [362, 82], [363, 82], [364, 82], [365, 82], [366, 82], [284, 83], [285, 83], [286, 83], [287, 83], [288, 83], [304, 83], [305, 83], [306, 83], [307, 83], [308, 83], [324, 83], [325, 83], [326, 83], [327, 83], [328, 83], [344, 83], [345, 83], [346, 83], [347, 83], [348, 83], [364, 83], [365, 83], [366, 83], [367, 83], [368, 83], [286, 84], [287, 84], [288, 84], [289, 84], [290, 84], [306, 84], [307, 84], [308, 84], [309, 84], [310, 84], [326, 84], [327, 84], [328, 84], [329, 84], [330, 84], [346, 84], [347, 84], [348, 84], [349, 84], [350, 84], [366, 84], [367, 84], [368, 84], [369, 84], [370, 84], [288, 85], [289, 85], [290, 85], [291, 85], [292, 85], [308, 85], [309, 85], [310, 85], [311, 85], [312, 85], [328, 85], [329, 85], [330, 85], [331, 85], [332, 85], [348, 85], [349, 85], [350, 85], [351, 85], [352, 85], [368, 85], [369, 85], [370, 85], [371, 85], [372, 85], [290, 86], [291, 86], [292, 86], [293, 86], [294, 86], [310, 86], [311, 86], [312, 86], [313, 86], [314, 86], [330, 86], [331, 86], [332, 86], [333, 86], [334, 86], [350, 86], [351, 86], [352, 86], [353, 86], [354, 86], [370, 86], [371, 86], [372, 86], [373, 86], [374, 86], [292, 87], [293, 87], [294, 87], [295, 87], [296, 87], [312, 87], [313, 87], [314, 87], [315, 87], [316, 87], [332, 87], [333, 87], [334, 87], [335, 87], [336, 87], [352, 87], [353, 87], [354, 87], [355, 87], [356, 87], [372, 87], [373, 87], [374, 87], [375, 87], [376, 87], [294, 88], [295, 88], [296, 88], [297, 88], [298, 88], [314, 88], [315, 88], [316, 88], [317, 88], [318, 88], [334, 88], [335, 88], [336, 88], [337, 88], [338, 88], [354, 88], [355, 88], [356, 88], [357, 88], [358, 88], [374, 88], [375, 88], [376, 88], [377, 88], [378, 88], [296, 89], [297, 89], [298, 89], [299, 89], [316, 89], [317, 89], [318, 89], [319, 89], [336, 89], [337, 89], [338, 89], [339, 89], [356, 89], [357, 89], [358, 89], [359, 89], [376, 89], [377, 89], [378, 89], [379, 89], [320, 90], [321, 90], [322, 90], [340, 90], [341, 90], [342, 90], [360, 90], [361, 90], [362, 90], [380, 90], [381, 90], [382, 90], [320, 91], [321, 91], [322, 91], [323, 91], [324, 91], [340, 91], [341, 91], [342, 91], [343, 91], [344, 91], [360, 91], [361, 91], [362, 91], [363, 91], [364, 91], [380, 91], [381, 91], [382, 91], [383, 91], [384, 91], [322, 92], [323, 92], [324, 92], [325, 92], [326, 92], [342, 92], [343, 92], [344, 92], [345, 92], [346, 92], [362, 92], [363, 92], [364, 92], [365, 92], [366, 92], [382, 92], [383, 92], [384, 92], [385, 92], [386, 92], [324, 93], [325, 93], [326, 93], [327, 93], [328, 93], [344, 93], [345, 93], [346, 93], [347, 93], [348, 93], [364, 93], [365, 93], [366, 93], [367, 93], [368, 93], [384, 93], [385, 93], [386, 93], [387, 93], [388, 93], [326, 94], [327, 94], [328, 94], [329, 94], [330, 94], [346, 94], [347, 94], [348, 94], [349, 94], [350, 94], [366, 94], [367, 94], [368, 94], [369, 94], [370, 94], [386, 94], [387, 94], [388, 94], [389, 94], [390, 94], [328, 95], [329, 95], [330, 95], [331, 95], [332, 95], [348, 95], [349, 95], [350, 95], [351, 95], [352, 95], [368, 95], [369, 95], [370, 95], [371, 95], [372, 95], [388, 95], [389, 95], [390, 95], [391, 95], [392, 95], [330, 96], [331, 96], [332, 96], [333, 96], [334, 96], [350, 96], [351, 96], [352, 96], [353, 96], [354, 96], [370, 96], [371, 96], [372, 96], [373, 96], [374, 96], [390, 96], [391, 96], [392, 96], [393, 96], [394, 96], [332, 97], [333, 97], [334, 97], [335, 97], [336, 97], [352, 97], [353, 97], [354, 97], [355, 97], [356, 97], [372, 97], [373, 97], [374, 97], [375, 97], [376, 97], [392, 97], [393, 97], [394, 97], [395, 97], [396, 97], [334, 98], [335, 98], [336, 98], [337, 98], [338, 98], [354, 98], [355, 98], [356, 98], [357, 98], [358, 98], [374, 98], [375, 98], [376, 98], [377, 98], [378, 98], [394, 98], [395, 98], [396, 98], [397, 98], [398, 98], [336, 99], [337, 99], [338, 99], [339, 99], [356, 99], [357, 99], [358, 99], [359, 99], [376, 99], [377, 99], [378, 99], [379, 99], [396, 99], [397, 99], [398, 99], [399, 99]]
V4 to IT
[[0, 0], [1, 0], [2, 0], [3, 0], [10, 0], [11, 0], [12, 0], [13, 0], [20, 0], [21, 0], [22, 0], [23, 0], [30, 0], [31, 0], [32, 0], [33, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [25, 1], [30, 1], [31, 1], [32, 1], [33, 1], [34, 1], [35, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [11, 2], [12, 2], [13, 2], [14, 2], [15, 2], [16, 2], [17, 2], [21, 2], [22, 2], [23, 2], [24, 2], [25, 2], [26, 2], [27, 2], [31, 2], [32, 2], [33, 2], [34, 2], [35, 2], [36, 2], [37, 2], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [8, 3], [9, 3], [13, 3], [14, 3], [15, 3], [16, 3], [17, 3], [18, 3], [19, 3], [23, 3], [24, 3], [25, 3], [26, 3], [27, 3], [28, 3], [29, 3], [33, 3], [34, 3], [35, 3], [36, 3], [37, 3], [38, 3], [39, 3], [5, 4], [6, 4], [7, 4], [8, 4], [9, 4], [15, 4], [16, 4], [17, 4], [18, 4], [19, 4], [25, 4], [26, 4], [27, 4], [28, 4], [29, 4], [35, 4], [36, 4], [37, 4], [38, 4], [39, 4], [0, 5], [1, 5], [2, 5], [3, 5], [10, 5], [11, 5], [12, 5], [13, 5], [20, 5], [21, 5], [22, 5], [23, 5], [30, 5], [31, 5], [32, 5], [33, 5], [40, 5], [41, 5], [42, 5], [43, 5], [50, 5], [51, 5], [52, 5], [53, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [10, 6], [11, 6], [12, 6], [13, 6], [14, 6], [15, 6], [20, 6], [21, 6], [22, 6], [23, 6], [24, 6], [25, 6], [30, 6], [31, 6], [32, 6], [33, 6], [34, 6], [35, 6], [40, 6], [41, 6], [42, 6], [43, 6], [44, 6], [45, 6], [50, 6], [51, 6], [52, 6], [53, 6], [54, 6], [55, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7], [11, 7], [12, 7], [13, 7], [14, 7], [15, 7], [16, 7], [17, 7], [21, 7], [22, 7], [23, 7], [24, 7], [25, 7], [26, 7], [27, 7], [31, 7], [32, 7], [33, 7], [34, 7], [35, 7], [36, 7], [37, 7], [41, 7], [42, 7], [43, 7], [44, 7], [45, 7], [46, 7], [47, 7], [51, 7], [52, 7], [53, 7], [54, 7], [55, 7], [56, 7], [57, 7], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [23, 8], [24, 8], [25, 8], [26, 8], [27, 8], [28, 8], [29, 8], [33, 8], [34, 8], [35, 8], [36, 8], [37, 8], [38, 8], [39, 8], [43, 8], [44, 8], [45, 8], [46, 8], [47, 8], [48, 8], [49, 8], [53, 8], [54, 8], [55, 8], [56, 8], [57, 8], [58, 8], [59, 8], [5, 9], [6, 9], [7, 9], [8, 9], [9, 9], [15, 9], [16, 9], [17, 9], [18, 9], [19, 9], [25, 9], [26, 9], [27, 9], [28, 9], [29, 9], [35, 9], [36, 9], [37, 9], [38, 9], [39, 9], [45, 9], [46, 9], [47, 9], [48, 9], [49, 9], [55, 9], [56, 9], [57, 9], [58, 9], [59, 9], [10, 10], [11, 10], [12, 10], [13, 10], [20, 10], [21, 10], [22, 10], [23, 10], [30, 10], [31, 10], [32, 10], [33, 10], [40, 10], [41, 10], [42, 10], [43, 10], [50, 10], [51, 10], [52, 10], [53, 10], [60, 10], [61, 10], [62, 10], [63, 10], [70, 10], [71, 10], [72, 10], [73, 10], [10, 11], [11, 11], [12, 11], [13, 11], [14, 11], [15, 11], [20, 11], [21, 11], [22, 11], [23, 11], [24, 11], [25, 11], [30, 11], [31, 11], [32, 11], [33, 11], [34, 11], [35, 11], [40, 11], [41, 11], [42, 11], [43, 11], [44, 11], [45, 11], [50, 11], [51, 11], [52, 11], [53, 11], [54, 11], [55, 11], [60, 11], [61, 11], [62, 11], [63, 11], [64, 11], [65, 11], [70, 11], [71, 11], [72, 11], [73, 11], [74, 11], [75, 11], [11, 12], [12, 12], [13, 12], [14, 12], [15, 12], [16, 12], [17, 12], [21, 12], [22, 12], [23, 12], [24, 12], [25, 12], [26, 12], [27, 12], [31, 12], [32, 12], [33, 12], [34, 12], [35, 12], [36, 12], [37, 12], [41, 12], [42, 12], [43, 12], [44, 12], [45, 12], [46, 12], [47, 12], [51, 12], [52, 12], [53, 12], [54, 12], [55, 12], [56, 12], [57, 12], [61, 12], [62, 12], [63, 12], [64, 12], [65, 12], [66, 12], [67, 12], [71, 12], [72, 12], [73, 12], [74, 12], [75, 12], [76, 12], [77, 12], [13, 13], [14, 13], [15, 13], [16, 13], [17, 13], [18, 13], [19, 13], [23, 13], [24, 13], [25, 13], [26, 13], [27, 13], [28, 13], [29, 13], [33, 13], [34, 13], [35, 13], [36, 13], [37, 13], [38, 13], [39, 13], [43, 13], [44, 13], [45, 13], [46, 13], [47, 13], [48, 13], [49, 13], [53, 13], [54, 13], [55, 13], [56, 13], [57, 13], [58, 13], [59, 13], [63, 13], [64, 13], [65, 13], [66, 13], [67, 13], [68, 13], [69, 13], [73, 13], [74, 13], [75, 13], [76, 13], [77, 13], [78, 13], [79, 13], [15, 14], [16, 14], [17, 14], [18, 14], [19, 14], [25, 14], [26, 14], [27, 14], [28, 14], [29, 14], [35, 14], [36, 14], [37, 14], [38, 14], [39, 14], [45, 14], [46, 14], [47, 14], [48, 14], [49, 14], [55, 14], [56, 14], [57, 14], [58, 14], [59, 14], [65, 14], [66, 14], [67, 14], [68, 14], [69, 14], [75, 14], [76, 14], [77, 14], [78, 14], [79, 14], [30, 15], [31, 15], [32, 15], [33, 15], [40, 15], [41, 15], [42, 15], [43, 15], [50, 15], [51, 15], [52, 15], [53, 15], [60, 15], [61, 15], [62, 15], [63, 15], [70, 15], [71, 15], [72, 15], [73, 15], [80, 15], [81, 15], [82, 15], [83, 15], [90, 15], [91, 15], [92, 15], [93, 15], [30, 16], [31, 16], [32, 16], [33, 16], [34, 16], [35, 16], [40, 16], [41, 16], [42, 16], [43, 16], [44, 16], [45, 16], [50, 16], [51, 16], [52, 16], [53, 16], [54, 16], [55, 16], [60, 16], [61, 16], [62, 16], [63, 16], [64, 16], [65, 16], [70, 16], [71, 16], [72, 16], [73, 16], [74, 16], [75, 16], [80, 16], [81, 16], [82, 16], [83, 16], [84, 16], [85, 16], [90, 16], [91, 16], [92, 16], [93, 16], [94, 16], [95, 16], [31, 17], [32, 17], [33, 17], [34, 17], [35, 17], [36, 17], [37, 17], [41, 17], [42, 17], [43, 17], [44, 17], [45, 17], [46, 17], [47, 17], [51, 17], [52, 17], [53, 17], [54, 17], [55, 17], [56, 17], [57, 17], [61, 17], [62, 17], [63, 17], [64, 17], [65, 17], [66, 17], [67, 17], [71, 17], [72, 17], [73, 17], [74, 17], [75, 17], [76, 17], [77, 17], [81, 17], [82, 17], [83, 17], [84, 17], [85, 17], [86, 17], [87, 17], [91, 17], [92, 17], [93, 17], [94, 17], [95, 17], [96, 17], [97, 17], [33, 18], [34, 18], [35, 18], [36, 18], [37, 18], [38, 18], [39, 18], [43, 18], [44, 18], [45, 18], [46, 18], [47, 18], [48, 18], [49, 18], [53, 18], [54, 18], [55, 18], [56, 18], [57, 18], [58, 18], [59, 18], [63, 18], [64, 18], [65, 18], [66, 18], [67, 18], [68, 18], [69, 18], [73, 18], [74, 18], [75, 18], [76, 18], [77, 18], [78, 18], [79, 18], [83, 18], [84, 18], [85, 18], [86, 18], [87, 18], [88, 18], [89, 18], [93, 18], [94, 18], [95, 18], [96, 18], [97, 18], [98, 18], [99, 18], [35, 19], [36, 19], [37, 19], [38, 19], [39, 19], [45, 19], [46, 19], [47, 19], [48, 19], [49, 19], [55, 19], [56, 19], [57, 19], [58, 19], [59, 19], [65, 19], [66, 19], [67, 19], [68, 19], [69, 19], [75, 19], [76, 19], [77, 19], [78, 19], [79, 19], [85, 19], [86, 19], [87, 19], [88, 19], [89, 19], [95, 19], [96, 19], [97, 19], [98, 19], [99, 19], [50, 20], [51, 20], [52, 20], [53, 20], [60, 20], [61, 20], [62, 20], [63, 20], [70, 20], [71, 20], [72, 20], [73, 20], [80, 20], [81, 20], [82, 20], [83, 20], [90, 20], [91, 20], [92, 20], [93, 20], [50, 21], [51, 21], [52, 21], [53, 21], [54, 21], [55, 21], [60, 21], [61, 21], [62, 21], [63, 21], [64, 21], [65, 21], [70, 21], [71, 21], [72, 21], [73, 21], [74, 21], [75, 21], [80, 21], [81, 21], [82, 21], [83, 21], [84, 21], [85, 21], [90, 21], [91, 21], [92, 21], [93, 21], [94, 21], [95, 21], [51, 22], [52, 22], [53, 22], [54, 22], [55, 22], [56, 22], [57, 22], [61, 22], [62, 22], [63, 22], [64, 22], [65, 22], [66, 22], [67, 22], [71, 22], [72, 22], [73, 22], [74, 22], [75, 22], [76, 22], [77, 22], [81, 22], [82, 22], [83, 22], [84, 22], [85, 22], [86, 22], [87, 22], [91, 22], [92, 22], [93, 22], [94, 22], [95, 22], [96, 22], [97, 22], [53, 23], [54, 23], [55, 23], [56, 23], [57, 23], [58, 23], [59, 23], [63, 23], [64, 23], [65, 23], [66, 23], [67, 23], [68, 23], [69, 23], [73, 23], [74, 23], [75, 23], [76, 23], [77, 23], [78, 23], [79, 23], [83, 23], [84, 23], [85, 23], [86, 23], [87, 23], [88, 23], [89, 23], [93, 23], [94, 23], [95, 23], [96, 23], [97, 23], [98, 23], [99, 23], [55, 24], [56, 24], [57, 24], [58, 24], [59, 24], [65, 24], [66, 24], [67, 24], [68, 24], [69, 24], [75, 24], [76, 24], [77, 24], [78, 24], [79, 24], [85, 24], [86, 24], [87, 24], [88, 24], [89, 24], [95, 24], [96, 24], [97, 24], [98, 24], [99, 24]]
IT to MI
[[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [10, 0], [11, 0], [12, 0], [0, 1], [1, 1], [2, 1], [3, 1], [5, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 1], [12, 1], [13, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [8, 2], [9, 2], [10, 2], [11, 2], [12, 2], [13, 2], [14, 2], [1, 3], [2, 3], [3, 3], [4, 3], [6, 3], [7, 3], [8, 3], [9, 3], [11, 3], [12, 3], [13, 3], [14, 3], [2, 4], [3, 4], [4, 4], [7, 4], [8, 4], [9, 4], [12, 4], [13, 4], [14, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [10, 5], [11, 5], [12, 5], [15, 5], [16, 5], [17, 5], [0, 6], [1, 6], [2, 6], [3, 6], [5, 6], [6, 6], [7, 6], [8, 6], [10, 6], [11, 6], [12, 6], [13, 6], [15, 6], [16, 6], [17, 6], [18, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7], [8, 7], [9, 7], [10, 7], [11, 7], [12, 7], [13, 7], [14, 7], [15, 7], [16, 7], [17, 7], [18, 7], [19, 7], [1, 8], [2, 8], [3, 8], [4, 8], [6, 8], [7, 8], [8, 8], [9, 8], [11, 8], [12, 8], [13, 8], [14, 8], [16, 8], [17, 8], [18, 8], [19, 8], [2, 9], [3, 9], [4, 9], [7, 9], [8, 9], [9, 9], [12, 9], [13, 9], [14, 9], [17, 9], [18, 9], [19, 9], [0, 10], [1, 10], [2, 10], [5, 10], [6, 10], [7, 10], [10, 10], [11, 10], [12, 10], [15, 10], [16, 10], [17, 10], [20, 10], [21, 10], [22, 10], [0, 11], [1, 11], [2, 11], [3, 11], [5, 11], [6, 11], [7, 11], [8, 11], [10, 11], [11, 11], [12, 11], [13, 11], [15, 11], [16, 11], [17, 11], [18, 11], [20, 11], [21, 11], [22, 11], [23, 11], [0, 12], [1, 12], [2, 12], [3, 12], [4, 12], [5, 12], [6, 12], [7, 12], [8, 12], [9, 12], [10, 12], [11, 12], [12, 12], [13, 12], [14, 12], [15, 12], [16, 12], [17, 12], [18, 12], [19, 12], [20, 12], [21, 12], [22, 12], [23, 12], [24, 12], [1, 13], [2, 13], [3, 13], [4, 13], [6, 13], [7, 13], [8, 13], [9, 13], [11, 13], [12, 13], [13, 13], [14, 13], [16, 13], [17, 13], [18, 13], [19, 13], [21, 13], [22, 13], [23, 13], [24, 13], [2, 14], [3, 14], [4, 14], [7, 14], [8, 14], [9, 14], [12, 14], [13, 14], [14, 14], [17, 14], [18, 14], [19, 14], [22, 14], [23, 14], [24, 14], [5, 15], [6, 15], [7, 15], [10, 15], [11, 15], [12, 15], [15, 15], [16, 15], [17, 15], [20, 15], [21, 15], [22, 15], [5, 16], [6, 16], [7, 16], [8, 16], [10, 16], [11, 16], [12, 16], [13, 16], [15, 16], [16, 16], [17, 16], [18, 16], [20, 16], [21, 16], [22, 16], [23, 16], [5, 17], [6, 17], [7, 17], [8, 17], [9, 17], [10, 17], [11, 17], [12, 17], [13, 17], [14, 17], [15, 17], [16, 17], [17, 17], [18, 17], [19, 17], [20, 17], [21, 17], [22, 17], [23, 17], [24, 17], [6, 18], [7, 18], [8, 18], [9, 18], [11, 18], [12, 18], [13, 18], [14, 18], [16, 18], [17, 18], [18, 18], [19, 18], [21, 18], [22, 18], [23, 18], [24, 18], [7, 19], [8, 19], [9, 19], [12, 19], [13, 19], [14, 19], [17, 19], [18, 19], [19, 19], [22, 19], [23, 19], [24, 19], [10, 20], [11, 20], [12, 20], [15, 20], [16, 20], [17, 20], [20, 20], [21, 20], [22, 20], [10, 21], [11, 21], [12, 21], [13, 21], [15, 21], [16, 21], [17, 21], [18, 21], [20, 21], [21, 21], [22, 21], [23, 21], [10, 22], [11, 22], [12, 22], [13, 22], [14, 22], [15, 22], [16, 22], [17, 22], [18, 22], [19, 22], [20, 22], [21, 22], [22, 22], [23, 22], [24, 22], [11, 23], [12, 23], [13, 23], [14, 23], [16, 23], [17, 23], [18, 23], [19, 23], [21, 23], [22, 23], [23, 23], [24, 23], [12, 24], [13, 24], [14, 24], [17, 24], [18, 24], [19, 24], [22, 24], [23, 24], [24, 24]]
MI to MO
[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0], [11, 0], [12, 0], [13, 0], [14, 0], [15, 0], [16, 0], [17, 0], [18, 0], [19, 0], [20, 0], [21, 0], [22, 0], [23, 0], [24, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [16, 1], [17, 1], [18, 1], [19, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [8, 2], [9, 2], [10, 2], [11, 2], [12, 2], [13, 2], [14, 2], [15, 2], [16, 2], [17, 2], [18, 2], [19, 2], [20, 2], [21, 2], [22, 2], [23, 2], [24, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [8, 3], [9, 3], [10, 3], [11, 3], [12, 3], [13, 3], [14, 3], [15, 3], [16, 3], [17, 3], [18, 3], [19, 3], [20, 3], [21, 3], [22, 3], [23, 3], [24, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [8, 4], [9, 4], [10, 4], [11, 4], [12, 4], [13, 4], [14, 4], [15, 4], [16, 4], [17, 4], [18, 4], [19, 4], [20, 4], [21, 4], [22, 4], [23, 4], [24, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [8, 5], [9, 5], [10, 5], [11, 5], [12, 5], [13, 5], [14, 5], [15, 5], [16, 5], [17, 5], [18, 5], [19, 5], [20, 5], [21, 5], [22, 5], [23, 5], [24, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [8, 6], [9, 6], [10, 6], [11, 6], [12, 6], [13, 6], [14, 6], [15, 6], [16, 6], [17, 6], [18, 6], [19, 6], [20, 6], [21, 6], [22, 6], [23, 6], [24, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7], [8, 7], [9, 7], [10, 7], [11, 7], [12, 7], [13, 7], [14, 7], [15, 7], [16, 7], [17, 7], [18, 7], [19, 7], [20, 7], [21, 7], [22, 7], [23, 7], [24, 7], [0, 8], [1, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [23, 8], [24, 8]]
V1 to InV1
[[0, 0], [1, 0], [20, 0], [21, 0], [1, 1], [2, 1], [3, 1], [21, 1], [22, 1], [23, 1], [3, 2], [4, 2], [5, 2], [23, 2], [24, 2], [25, 2], [5, 3], [6, 3], [7, 3], [25, 3], [26, 3], [27, 3], [7, 4], [8, 4], [9, 4], [27, 4], [28, 4], [29, 4], [9, 5], [10, 5], [11, 5], [29, 5], [30, 5], [31, 5], [11, 6], [12, 6], [13, 6], [31, 6], [32, 6], [33, 6], [13, 7], [14, 7], [15, 7], [33, 7], [34, 7], [35, 7], [15, 8], [16, 8], [17, 8], [35, 8], [36, 8], [37, 8], [17, 9], [18, 9], [19, 9], [37, 9], [38, 9], [39, 9], [20, 10], [21, 10], [40, 10], [41, 10], [60, 10], [61, 10], [21, 11], [22, 11], [23, 11], [41, 11], [42, 11], [43, 11], [61, 11], [62, 11], [63, 11], [23, 12], [24, 12], [25, 12], [43, 12], [44, 12], [45, 12], [63, 12], [64, 12], [65, 12], [25, 13], [26, 13], [27, 13], [45, 13], [46, 13], [47, 13], [65, 13], [66, 13], [67, 13], [27, 14], [28, 14], [29, 14], [47, 14], [48, 14], [49, 14], [67, 14], [68, 14], [69, 14], [29, 15], [30, 15], [31, 15], [49, 15], [50, 15], [51, 15], [69, 15], [70, 15], [71, 15], [31, 16], [32, 16], [33, 16], [51, 16], [52, 16], [53, 16], [71, 16], [72, 16], [73, 16], [33, 17], [34, 17], [35, 17], [53, 17], [54, 17], [55, 17], [73, 17], [74, 17], [75, 17], [35, 18], [36, 18], [37, 18], [55, 18], [56, 18], [57, 18], [75, 18], [76, 18], [77, 18], [37, 19], [38, 19], [39, 19], [57, 19], [58, 19], [59, 19], [77, 19], [78, 19], [79, 19], [60, 20], [61, 20], [80, 20], [81, 20], [100, 20], [101, 20], [61, 21], [62, 21], [63, 21], [81, 21], [82, 21], [83, 21], [101, 21], [102, 21], [103, 21], [63, 22], [64, 22], [65, 22], [83, 22], [84, 22], [85, 22], [103, 22], [104, 22], [105, 22], [65, 23], [66, 23], [67, 23], [85, 23], [86, 23], [87, 23], [105, 23], [106, 23], [107, 23], [67, 24], [68, 24], [69, 24], [87, 24], [88, 24], [89, 24], [107, 24], [108, 24], [109, 24], [69, 25], [70, 25], [71, 25], [89, 25], [90, 25], [91, 25], [109, 25], [110, 25], [111, 25], [71, 26], [72, 26], [73, 26], [91, 26], [92, 26], [93, 26], [111, 26], [112, 26], [113, 26], [73, 27], [74, 27], [75, 27], [93, 27], [94, 27], [95, 27], [113, 27], [114, 27], [115, 27], [75, 28], [76, 28], [77, 28], [95, 28], [96, 28], [97, 28], [115, 28], [116, 28], [117, 28], [77, 29], [78, 29], [79, 29], [97, 29], [98, 29], [99, 29], [117, 29], [118, 29], [119, 29], [100, 30], [101, 30], [120, 30], [121, 30], [140, 30], [141, 30], [101, 31], [102, 31], [103, 31], [121, 31], [122, 31], [123, 31], [141, 31], [142, 31], [143, 31], [103, 32], [104, 32], [105, 32], [123, 32], [124, 32], [125, 32], [143, 32], [144, 32], [145, 32], [105, 33], [106, 33], [107, 33], [125, 33], [126, 33], [127, 33], [145, 33], [146, 33], [147, 33], [107, 34], [108, 34], [109, 34], [127, 34], [128, 34], [129, 34], [147, 34], [148, 34], [149, 34], [109, 35], [110, 35], [111, 35], [129, 35], [130, 35], [131, 35], [149, 35], [150, 35], [151, 35], [111, 36], [112, 36], [113, 36], [131, 36], [132, 36], [133, 36], [151, 36], [152, 36], [153, 36], [113, 37], [114, 37], [115, 37], [133, 37], [134, 37], [135, 37], [153, 37], [154, 37], [155, 37], [115, 38], [116, 38], [117, 38], [135, 38], [136, 38], [137, 38], [155, 38], [156, 38], [157, 38], [117, 39], [118, 39], [119, 39], [137, 39], [138, 39], [139, 39], [157, 39], [158, 39], [159, 39], [140, 40], [141, 40], [160, 40], [161, 40], [180, 40], [181, 40], [141, 41], [142, 41], [143, 41], [161, 41], [162, 41], [163, 41], [181, 41], [182, 41], [183, 41], [143, 42], [144, 42], [145, 42], [163, 42], [164, 42], [165, 42], [183, 42], [184, 42], [185, 42], [145, 43], [146, 43], [147, 43], [165, 43], [166, 43], [167, 43], [185, 43], [186, 43], [187, 43], [147, 44], [148, 44], [149, 44], [167, 44], [168, 44], [169, 44], [187, 44], [188, 44], [189, 44], [149, 45], [150, 45], [151, 45], [169, 45], [170, 45], [171, 45], [189, 45], [190, 45], [191, 45], [151, 46], [152, 46], [153, 46], [171, 46], [172, 46], [173, 46], [191, 46], [192, 46], [193, 46], [153, 47], [154, 47], [155, 47], [173, 47], [174, 47], [175, 47], [193, 47], [194, 47], [195, 47], [155, 48], [156, 48], [157, 48], [175, 48], [176, 48], [177, 48], [195, 48], [196, 48], [197, 48], [157, 49], [158, 49], [159, 49], [177, 49], [178, 49], [179, 49], [197, 49], [198, 49], [199, 49], [180, 50], [181, 50], [200, 50], [201, 50], [220, 50], [221, 50], [181, 51], [182, 51], [183, 51], [201, 51], [202, 51], [203, 51], [221, 51], [222, 51], [223, 51], [183, 52], [184, 52], [185, 52], [203, 52], [204, 52], [205, 52], [223, 52], [224, 52], [225, 52], [185, 53], [186, 53], [187, 53], [205, 53], [206, 53], [207, 53], [225, 53], [226, 53], [227, 53], [187, 54], [188, 54], [189, 54], [207, 54], [208, 54], [209, 54], [227, 54], [228, 54], [229, 54], [189, 55], [190, 55], [191, 55], [209, 55], [210, 55], [211, 55], [229, 55], [230, 55], [231, 55], [191, 56], [192, 56], [193, 56], [211, 56], [212, 56], [213, 56], [231, 56], [232, 56], [233, 56], [193, 57], [194, 57], [195, 57], [213, 57], [214, 57], [215, 57], [233, 57], [234, 57], [235, 57], [195, 58], [196, 58], [197, 58], [215, 58], [216, 58], [217, 58], [235, 58], [236, 58], [237, 58], [197, 59], [198, 59], [199, 59], [217, 59], [218, 59], [219, 59], [237, 59], [238, 59], [239, 59], [220, 60], [221, 60], [240, 60], [241, 60], [260, 60], [261, 60], [221, 61], [222, 61], [223, 61], [241, 61], [242, 61], [243, 61], [261, 61], [262, 61], [263, 61], [223, 62], [224, 62], [225, 62], [243, 62], [244, 62], [245, 62], [263, 62], [264, 62], [265, 62], [225, 63], [226, 63], [227, 63], [245, 63], [246, 63], [247, 63], [265, 63], [266, 63], [267, 63], [227, 64], [228, 64], [229, 64], [247, 64], [248, 64], [249, 64], [267, 64], [268, 64], [269, 64], [229, 65], [230, 65], [231, 65], [249, 65], [250, 65], [251, 65], [269, 65], [270, 65], [271, 65], [231, 66], [232, 66], [233, 66], [251, 66], [252, 66], [253, 66], [271, 66], [272, 66], [273, 66], [233, 67], [234, 67], [235, 67], [253, 67], [254, 67], [255, 67], [273, 67], [274, 67], [275, 67], [235, 68], [236, 68], [237, 68], [255, 68], [256, 68], [257, 68], [275, 68], [276, 68], [277, 68], [237, 69], [238, 69], [239, 69], [257, 69], [258, 69], [259, 69], [277, 69], [278, 69], [279, 69], [260, 70], [261, 70], [280, 70], [281, 70], [300, 70], [301, 70], [261, 71], [262, 71], [263, 71], [281, 71], [282, 71], [283, 71], [301, 71], [302, 71], [303, 71], [263, 72], [264, 72], [265, 72], [283, 72], [284, 72], [285, 72], [303, 72], [304, 72], [305, 72], [265, 73], [266, 73], [267, 73], [285, 73], [286, 73], [287, 73], [305, 73], [306, 73], [307, 73], [267, 74], [268, 74], [269, 74], [287, 74], [288, 74], [289, 74], [307, 74], [308, 74], [309, 74], [269, 75], [270, 75], [271, 75], [289, 75], [290, 75], [291, 75], [309, 75], [310, 75], [311, 75], [271, 76], [272, 76], [273, 76], [291, 76], [292, 76], [293, 76], [311, 76], [312, 76], [313, 76], [273, 77], [274, 77], [275, 77], [293, 77], [294, 77], [295, 77], [313, 77], [314, 77], [315, 77], [275, 78], [276, 78], [277, 78], [295, 78], [296, 78], [297, 78], [315, 78], [316, 78], [317, 78], [277, 79], [278, 79], [279, 79], [297, 79], [298, 79], [299, 79], [317, 79], [318, 79], [319, 79], [300, 80], [301, 80], [320, 80], [321, 80], [340, 80], [341, 80], [301, 81], [302, 81], [303, 81], [321, 81], [322, 81], [323, 81], [341, 81], [342, 81], [343, 81], [303, 82], [304, 82], [305, 82], [323, 82], [324, 82], [325, 82], [343, 82], [344, 82], [345, 82], [305, 83], [306, 83], [307, 83], [325, 83], [326, 83], [327, 83], [345, 83], [346, 83], [347, 83], [307, 84], [308, 84], [309, 84], [327, 84], [328, 84], [329, 84], [347, 84], [348, 84], [349, 84], [309, 85], [310, 85], [311, 85], [329, 85], [330, 85], [331, 85], [349, 85], [350, 85], [351, 85], [311, 86], [312, 86], [313, 86], [331, 86], [332, 86], [333, 86], [351, 86], [352, 86], [353, 86], [313, 87], [314, 87], [315, 87], [333, 87], [334, 87], [335, 87], [353, 87], [354, 87], [355, 87], [315, 88], [316, 88], [317, 88], [335, 88], [336, 88], [337, 88], [355, 88], [356, 88], [357, 88], [317, 89], [318, 89], [319, 89], [337, 89], [338, 89], [339, 89], [357, 89], [358, 89], [359, 89], [340, 90], [341, 90], [360, 90], [361, 90], [380, 90], [381, 90], [341, 91], [342, 91], [343, 91], [361, 91], [362, 91], [363, 91], [381, 91], [382, 91], [383, 91], [343, 92], [344, 92], [345, 92], [363, 92], [364, 92], [365, 92], [383, 92], [384, 92], [385, 92], [345, 93], [346, 93], [347, 93], [365, 93], [366, 93], [367, 93], [385, 93], [386, 93], [387, 93], [347, 94], [348, 94], [349, 94], [367, 94], [368, 94], [369, 94], [387, 94], [388, 94], [389, 94], [349, 95], [350, 95], [351, 95], [369, 95], [370, 95], [371, 95], [389, 95], [390, 95], [391, 95], [351, 96], [352, 96], [353, 96], [371, 96], [372, 96], [373, 96], [391, 96], [392, 96], [393, 96], [353, 97], [354, 97], [355, 97], [373, 97], [374, 97], [375, 97], [393, 97], [394, 97], [395, 97], [355, 98], [356, 98], [357, 98], [375, 98], [376, 98], [377, 98], [395, 98], [396, 98], [397, 98], [357, 99], [358, 99], [359, 99], [377, 99], [378, 99], [379, 99], [397, 99], [398, 99], [399, 99]]

V4 to InV4 --- LOOKS OK
[[0, 0], [1, 0], [10, 0], [11, 0], [1, 1], [2, 1], [3, 1], [11, 1], [12, 1], [13, 1], [3, 2], [4, 2], [5, 2], [13, 2], [14, 2], [15, 2], [5, 3], [6, 3], [7, 3], [15, 3], [16, 3], [17, 3], [7, 4], [8, 4], [9, 4], [17, 4], [18, 4], [19, 4], [10, 5], [11, 5], [20, 5], [21, 5], [30, 5], [31, 5], [11, 6], [12, 6], [13, 6], [21, 6], [22, 6], [23, 6], [31, 6], [32, 6], [33, 6], [13, 7], [14, 7], [15, 7], [23, 7], [24, 7], [25, 7], [33, 7], [34, 7], [35, 7], [15, 8], [16, 8], [17, 8], [25, 8], [26, 8], [27, 8], [35, 8], [36, 8], [37, 8], [17, 9], [18, 9], [19, 9], [27, 9], [28, 9], [29, 9], [37, 9], [38, 9], [39, 9], [30, 10], [31, 10], [40, 10], [41, 10], [50, 10], [51, 10], [31, 11], [32, 11], [33, 11], [41, 11], [42, 11], [43, 11], [51, 11], [52, 11], [53, 11], [33, 12], [34, 12], [35, 12], [43, 12], [44, 12], [45, 12], [53, 12], [54, 12], [55, 12], [35, 13], [36, 13], [37, 13], [45, 13], [46, 13], [47, 13], [55, 13], [56, 13], [57, 13], [37, 14], [38, 14], [39, 14], [47, 14], [48, 14], [49, 14], [57, 14], [58, 14], [59, 14], [50, 15], [51, 15], [60, 15], [61, 15], [70, 15], [71, 15], [51, 16], [52, 16], [53, 16], [61, 16], [62, 16], [63, 16], [71, 16], [72, 16], [73, 16], [53, 17], [54, 17], [55, 17], [63, 17], [64, 17], [65, 17], [73, 17], [74, 17], [75, 17], [55, 18], [56, 18], [57, 18], [65, 18], [66, 18], [67, 18], [75, 18], [76, 18], [77, 18], [57, 19], [58, 19], [59, 19], [67, 19], [68, 19], [69, 19], [77, 19], [78, 19], [79, 19], [70, 20], [71, 20], [80, 20], [81, 20], [90, 20], [91, 20], [71, 21], [72, 21], [73, 21], [81, 21], [82, 21], [83, 21], [91, 21], [92, 21], [93, 21], [73, 22], [74, 22], [75, 22], [83, 22], [84, 22], [85, 22], [93, 22], [94, 22], [95, 22], [75, 23], [76, 23], [77, 23], [85, 23], [86, 23], [87, 23], [95, 23], [96, 23], [97, 23], [77, 24], [78, 24], [79, 24], [87, 24], [88, 24], [89, 24], [97, 24], [98, 24], [99, 24]]

IT to InIT --- LOOKS OK
[[0, 0], [1, 0], [5, 0], [6, 0], [1, 1], [2, 1], [3, 1], [6, 1], [7, 1], [8, 1], [3, 2], [4, 2], [8, 2], [9, 2], [5, 3], [6, 3], [10, 3], [11, 3], [15, 3], [16, 3], [6, 4], [7, 4], [8, 4], [11, 4], [12, 4], [13, 4], [16, 4], [17, 4], [18, 4], [8, 5], [9, 5], [13, 5], [14, 5], [18, 5], [19, 5], [15, 6], [16, 6], [20, 6], [21, 6], [16, 7], [17, 7], [18, 7], [21, 7], [22, 7], [23, 7], [18, 8], [19, 8], [23, 8], [24, 8]]

MI to InMI --- LOOKS OK
[[0, 0], [1, 0], [5, 0], [6, 0], 
[1, 1], [2, 1], [3, 1], [6, 1], [7, 1], [8, 1], 
[3, 2], [4, 2], [8, 2], [9, 2], 
[5, 3], [6, 3], [10, 3], [11, 3], [15, 3], [16, 3], 
[6, 4], [7, 4], [8, 4], [11, 4], [12, 4], [13, 4], [16, 4], [17, 4], [18, 4], 
[8, 5], [9, 5], [13, 5], [14, 5], [18, 5], [19, 5], 
[15, 6], [16, 6], [20, 6], [21, 6], 
[16, 7], [17, 7], [18, 7], [21, 7], [22, 7], [23, 7], 
[18, 8], [19, 8], [23, 8], [24, 8]]

InV1 to V1 --- LOOKS OK
[[0, 0], [0, 1], [0, 2], [0, 20], [0, 21], [0, 22], [0, 40], [0, 41], [0, 42], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 40], [1, 41], [1, 42], [1, 43], [1, 44], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 42], [2, 43], [2, 44], [2, 45], [2, 46], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 24], [3, 25], [3, 26], [3, 27], [3, 28], [3, 44], [3, 45], [3, 46], [3, 47], [3, 48], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 26], [4, 27], [4, 28], [4, 29], [4, 30], [4, 46], [4, 47], [4, 48], [4, 49], [4, 50], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 28], [5, 29], [5, 30], [5, 31], [5, 32], [5, 48], [5, 49], [5, 50], [5, 51], [5, 52], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 30], [6, 31], [6, 32], [6, 33], [6, 34], [6, 50], [6, 51], [6, 52], [6, 53], [6, 54], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 32], [7, 33], [7, 34], [7, 35], [7, 36], [7, 52], [7, 53], [7, 54], [7, 55], [7, 56], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 34], [8, 35], [8, 36], [8, 37], [8, 38], [8, 54], [8, 55], [8, 56], [8, 57], [8, 58], [9, 16], [9, 17], [9, 18], [9, 19], [9, 36], [9, 37], [9, 38], [9, 39], [9, 56], [9, 57], [9, 58], [9, 59], [10, 0], [10, 1], [10, 2], [10, 20], [10, 21], [10, 22], [10, 40], [10, 41], [10, 42], [10, 60], [10, 61], [10, 62], [10, 80], [10, 81], [10, 82], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 20], [11, 21], [11, 22], [11, 23], [11, 24], [11, 40], [11, 41], [11, 42], [11, 43], [11, 44], [11, 60], [11, 61], [11, 62], [11, 63], [11, 64], [11, 80], [11, 81], [11, 82], [11, 83], [11, 84], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 22], [12, 23], [12, 24], [12, 25], [12, 26], [12, 42], [12, 43], [12, 44], [12, 45], [12, 46], [12, 62], [12, 63], [12, 64], [12, 65], [12, 66], [12, 82], [12, 83], [12, 84], [12, 85], [12, 86], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 24], [13, 25], [13, 26], [13, 27], [13, 28], [13, 44], [13, 45], [13, 46], [13, 47], [13, 48], [13, 64], [13, 65], [13, 66], [13, 67], [13, 68], [13, 84], [13, 85], [13, 86], [13, 87], [13, 88], [14, 6], [14, 7], [14, 8], [14, 9], [14, 10], [14, 26], [14, 27], [14, 28], [14, 29], [14, 30], [14, 46], [14, 47], [14, 48], [14, 49], [14, 50], [14, 66], [14, 67], [14, 68], [14, 69], [14, 70], [14, 86], [14, 87], [14, 88], [14, 89], [14, 90], [15, 8], [15, 9], [15, 10], [15, 11], [15, 12], [15, 28], [15, 29], [15, 30], [15, 31], [15, 32], [15, 48], [15, 49], [15, 50], [15, 51], [15, 52], [15, 68], [15, 69], [15, 70], [15, 71], [15, 72], [15, 88], [15, 89], [15, 90], [15, 91], [15, 92], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 30], [16, 31], [16, 32], [16, 33], [16, 34], [16, 50], [16, 51], [16, 52], [16, 53], [16, 54], [16, 70], [16, 71], [16, 72], [16, 73], [16, 74], [16, 90], [16, 91], [16, 92], [16, 93], [16, 94], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 32], [17, 33], [17, 34], [17, 35], [17, 36], [17, 52], [17, 53], [17, 54], [17, 55], [17, 56], [17, 72], [17, 73], [17, 74], [17, 75], [17, 76], [17, 92], [17, 93], [17, 94], [17, 95], [17, 96], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 34], [18, 35], [18, 36], [18, 37], [18, 38], [18, 54], [18, 55], [18, 56], [18, 57], [18, 58], [18, 74], [18, 75], [18, 76], [18, 77], [18, 78], [18, 94], [18, 95], [18, 96], [18, 97], [18, 98], [19, 16], [19, 17], [19, 18], [19, 19], [19, 36], [19, 37], [19, 38], [19, 39], [19, 56], [19, 57], [19, 58], [19, 59], [19, 76], [19, 77], [19, 78], [19, 79], [19, 96], [19, 97], [19, 98], [19, 99], [20, 40], [20, 41], [20, 42], [20, 60], [20, 61], [20, 62], [20, 80], [20, 81], [20, 82], [20, 100], [20, 101], [20, 102], [20, 120], [20, 121], [20, 122], [21, 40], [21, 41], [21, 42], [21, 43], [21, 44], [21, 60], [21, 61], [21, 62], [21, 63], [21, 64], [21, 80], [21, 81], [21, 82], [21, 83], [21, 84], [21, 100], [21, 101], [21, 102], [21, 103], [21, 104], [21, 120], [21, 121], [21, 122], [21, 123], [21, 124], [22, 42], [22, 43], [22, 44], [22, 45], [22, 46], [22, 62], [22, 63], [22, 64], [22, 65], [22, 66], [22, 82], [22, 83], [22, 84], [22, 85], [22, 86], [22, 102], [22, 103], [22, 104], [22, 105], [22, 106], [22, 122], [22, 123], [22, 124], [22, 125], [22, 126], [23, 44], [23, 45], [23, 46], [23, 47], [23, 48], [23, 64], [23, 65], [23, 66], [23, 67], [23, 68], [23, 84], [23, 85], [23, 86], [23, 87], [23, 88], [23, 104], [23, 105], [23, 106], [23, 107], [23, 108], [23, 124], [23, 125], [23, 126], [23, 127], [23, 128], [24, 46], [24, 47], [24, 48], [24, 49], [24, 50], [24, 66], [24, 67], [24, 68], [24, 69], [24, 70], [24, 86], [24, 87], [24, 88], [24, 89], [24, 90], [24, 106], [24, 107], [24, 108], [24, 109], [24, 110], [24, 126], [24, 127], [24, 128], [24, 129], [24, 130], [25, 48], [25, 49], [25, 50], [25, 51], [25, 52], [25, 68], [25, 69], [25, 70], [25, 71], [25, 72], [25, 88], [25, 89], [25, 90], [25, 91], [25, 92], [25, 108], [25, 109], [25, 110], [25, 111], [25, 112], [25, 128], [25, 129], [25, 130], [25, 131], [25, 132], [26, 50], [26, 51], [26, 52], [26, 53], [26, 54], [26, 70], [26, 71], [26, 72], [26, 73], [26, 74], [26, 90], [26, 91], [26, 92], [26, 93], [26, 94], [26, 110], [26, 111], [26, 112], [26, 113], [26, 114], [26, 130], [26, 131], [26, 132], [26, 133], [26, 134], [27, 52], [27, 53], [27, 54], [27, 55], [27, 56], [27, 72], [27, 73], [27, 74], [27, 75], [27, 76], [27, 92], [27, 93], [27, 94], [27, 95], [27, 96], [27, 112], [27, 113], [27, 114], [27, 115], [27, 116], [27, 132], [27, 133], [27, 134], [27, 135], [27, 136], [28, 54], [28, 55], [28, 56], [28, 57], [28, 58], [28, 74], [28, 75], [28, 76], [28, 77], [28, 78], [28, 94], [28, 95], [28, 96], [28, 97], [28, 98], [28, 114], [28, 115], [28, 116], [28, 117], [28, 118], [28, 134], [28, 135], [28, 136], [28, 137], [28, 138], [29, 56], [29, 57], [29, 58], [29, 59], [29, 76], [29, 77], [29, 78], [29, 79], [29, 96], [29, 97], [29, 98], [29, 99], [29, 116], [29, 117], [29, 118], [29, 119], [29, 136], [29, 137], [29, 138], [29, 139], [30, 80], [30, 81], [30, 82], [30, 100], [30, 101], [30, 102], [30, 120], [30, 121], [30, 122], [30, 140], [30, 141], [30, 142], [30, 160], [30, 161], [30, 162], [31, 80], [31, 81], [31, 82], [31, 83], [31, 84], [31, 100], [31, 101], [31, 102], [31, 103], [31, 104], [31, 120], [31, 121], [31, 122], [31, 123], [31, 124], [31, 140], [31, 141], [31, 142], [31, 143], [31, 144], [31, 160], [31, 161], [31, 162], [31, 163], [31, 164], [32, 82], [32, 83], [32, 84], [32, 85], [32, 86], [32, 102], [32, 103], [32, 104], [32, 105], [32, 106], [32, 122], [32, 123], [32, 124], [32, 125], [32, 126], [32, 142], [32, 143], [32, 144], [32, 145], [32, 146], [32, 162], [32, 163], [32, 164], [32, 165], [32, 166], [33, 84], [33, 85], [33, 86], [33, 87], [33, 88], [33, 104], [33, 105], [33, 106], [33, 107], [33, 108], [33, 124], [33, 125], [33, 126], [33, 127], [33, 128], [33, 144], [33, 145], [33, 146], [33, 147], [33, 148], [33, 164], [33, 165], [33, 166], [33, 167], [33, 168], [34, 86], [34, 87], [34, 88], [34, 89], [34, 90], [34, 106], [34, 107], [34, 108], [34, 109], [34, 110], [34, 126], [34, 127], [34, 128], [34, 129], [34, 130], [34, 146], [34, 147], [34, 148], [34, 149], [34, 150], [34, 166], [34, 167], [34, 168], [34, 169], [34, 170], [35, 88], [35, 89], [35, 90], [35, 91], [35, 92], [35, 108], [35, 109], [35, 110], [35, 111], [35, 112], [35, 128], [35, 129], [35, 130], [35, 131], [35, 132], [35, 148], [35, 149], [35, 150], [35, 151], [35, 152], [35, 168], [35, 169], [35, 170], [35, 171], [35, 172], [36, 90], [36, 91], [36, 92], [36, 93], [36, 94], [36, 110], [36, 111], [36, 112], [36, 113], [36, 114], [36, 130], [36, 131], [36, 132], [36, 133], [36, 134], [36, 150], [36, 151], [36, 152], [36, 153], [36, 154], [36, 170], [36, 171], [36, 172], [36, 173], [36, 174], [37, 92], [37, 93], [37, 94], [37, 95], [37, 96], [37, 112], [37, 113], [37, 114], [37, 115], [37, 116], [37, 132], [37, 133], [37, 134], [37, 135], [37, 136], [37, 152], [37, 153], [37, 154], [37, 155], [37, 156], [37, 172], [37, 173], [37, 174], [37, 175], [37, 176], [38, 94], [38, 95], [38, 96], [38, 97], [38, 98], [38, 114], [38, 115], [38, 116], [38, 117], [38, 118], [38, 134], [38, 135], [38, 136], [38, 137], [38, 138], [38, 154], [38, 155], [38, 156], [38, 157], [38, 158], [38, 174], [38, 175], [38, 176], [38, 177], [38, 178], [39, 96], [39, 97], [39, 98], [39, 99], [39, 116], [39, 117], [39, 118], [39, 119], [39, 136], [39, 137], [39, 138], [39, 139], [39, 156], [39, 157], [39, 158], [39, 159], [39, 176], [39, 177], [39, 178], [39, 179], [40, 120], [40, 121], [40, 122], [40, 140], [40, 141], [40, 142], [40, 160], [40, 161], [40, 162], [40, 180], [40, 181], [40, 182], [40, 200], [40, 201], [40, 202], [41, 120], [41, 121], [41, 122], [41, 123], [41, 124], [41, 140], [41, 141], [41, 142], [41, 143], [41, 144], [41, 160], [41, 161], [41, 162], [41, 163], [41, 164], [41, 180], [41, 181], [41, 182], [41, 183], [41, 184], [41, 200], [41, 201], [41, 202], [41, 203], [41, 204], [42, 122], [42, 123], [42, 124], [42, 125], [42, 126], [42, 142], [42, 143], [42, 144], [42, 145], [42, 146], [42, 162], [42, 163], [42, 164], [42, 165], [42, 166], [42, 182], [42, 183], [42, 184], [42, 185], [42, 186], [42, 202], [42, 203], [42, 204], [42, 205], [42, 206], [43, 124], [43, 125], [43, 126], [43, 127], [43, 128], [43, 144], [43, 145], [43, 146], [43, 147], [43, 148], [43, 164], [43, 165], [43, 166], [43, 167], [43, 168], [43, 184], [43, 185], [43, 186], [43, 187], [43, 188], [43, 204], [43, 205], [43, 206], [43, 207], [43, 208], [44, 126], [44, 127], [44, 128], [44, 129], [44, 130], [44, 146], [44, 147], [44, 148], [44, 149], [44, 150], [44, 166], [44, 167], [44, 168], [44, 169], [44, 170], [44, 186], [44, 187], [44, 188], [44, 189], [44, 190], [44, 206], [44, 207], [44, 208], [44, 209], [44, 210], [45, 128], [45, 129], [45, 130], [45, 131], [45, 132], [45, 148], [45, 149], [45, 150], [45, 151], [45, 152], [45, 168], [45, 169], [45, 170], [45, 171], [45, 172], [45, 188], [45, 189], [45, 190], [45, 191], [45, 192], [45, 208], [45, 209], [45, 210], [45, 211], [45, 212], [46, 130], [46, 131], [46, 132], [46, 133], [46, 134], [46, 150], [46, 151], [46, 152], [46, 153], [46, 154], [46, 170], [46, 171], [46, 172], [46, 173], [46, 174], [46, 190], [46, 191], [46, 192], [46, 193], [46, 194], [46, 210], [46, 211], [46, 212], [46, 213], [46, 214], [47, 132], [47, 133], [47, 134], [47, 135], [47, 136], [47, 152], [47, 153], [47, 154], [47, 155], [47, 156], [47, 172], [47, 173], [47, 174], [47, 175], [47, 176], [47, 192], [47, 193], [47, 194], [47, 195], [47, 196], [47, 212], [47, 213], [47, 214], [47, 215], [47, 216], [48, 134], [48, 135], [48, 136], [48, 137], [48, 138], [48, 154], [48, 155], [48, 156], [48, 157], [48, 158], [48, 174], [48, 175], [48, 176], [48, 177], [48, 178], [48, 194], [48, 195], [48, 196], [48, 197], [48, 198], [48, 214], [48, 215], [48, 216], [48, 217], [48, 218], [49, 136], [49, 137], [49, 138], [49, 139], [49, 156], [49, 157], [49, 158], [49, 159], [49, 176], [49, 177], [49, 178], [49, 179], [49, 196], [49, 197], [49, 198], [49, 199], [49, 216], [49, 217], [49, 218], [49, 219], [50, 160], [50, 161], [50, 162], [50, 180], [50, 181], [50, 182], [50, 200], [50, 201], [50, 202], [50, 220], [50, 221], [50, 222], [50, 240], [50, 241], [50, 242], [51, 160], [51, 161], [51, 162], [51, 163], [51, 164], [51, 180], [51, 181], [51, 182], [51, 183], [51, 184], [51, 200], [51, 201], [51, 202], [51, 203], [51, 204], [51, 220], [51, 221], [51, 222], [51, 223], [51, 224], [51, 240], [51, 241], [51, 242], [51, 243], [51, 244], [52, 162], [52, 163], [52, 164], [52, 165], [52, 166], [52, 182], [52, 183], [52, 184], [52, 185], [52, 186], [52, 202], [52, 203], [52, 204], [52, 205], [52, 206], [52, 222], [52, 223], [52, 224], [52, 225], [52, 226], [52, 242], [52, 243], [52, 244], [52, 245], [52, 246], [53, 164], [53, 165], [53, 166], [53, 167], [53, 168], [53, 184], [53, 185], [53, 186], [53, 187], [53, 188], [53, 204], [53, 205], [53, 206], [53, 207], [53, 208], [53, 224], [53, 225], [53, 226], [53, 227], [53, 228], [53, 244], [53, 245], [53, 246], [53, 247], [53, 248], [54, 166], [54, 167], [54, 168], [54, 169], [54, 170], [54, 186], [54, 187], [54, 188], [54, 189], [54, 190], [54, 206], [54, 207], [54, 208], [54, 209], [54, 210], [54, 226], [54, 227], [54, 228], [54, 229], [54, 230], [54, 246], [54, 247], [54, 248], [54, 249], [54, 250], [55, 168], [55, 169], [55, 170], [55, 171], [55, 172], [55, 188], [55, 189], [55, 190], [55, 191], [55, 192], [55, 208], [55, 209], [55, 210], [55, 211], [55, 212], [55, 228], [55, 229], [55, 230], [55, 231], [55, 232], [55, 248], [55, 249], [55, 250], [55, 251], [55, 252], [56, 170], [56, 171], [56, 172], [56, 173], [56, 174], [56, 190], [56, 191], [56, 192], [56, 193], [56, 194], [56, 210], [56, 211], [56, 212], [56, 213], [56, 214], [56, 230], [56, 231], [56, 232], [56, 233], [56, 234], [56, 250], [56, 251], [56, 252], [56, 253], [56, 254], [57, 172], [57, 173], [57, 174], [57, 175], [57, 176], [57, 192], [57, 193], [57, 194], [57, 195], [57, 196], [57, 212], [57, 213], [57, 214], [57, 215], [57, 216], [57, 232], [57, 233], [57, 234], [57, 235], [57, 236], [57, 252], [57, 253], [57, 254], [57, 255], [57, 256], [58, 174], [58, 175], [58, 176], [58, 177], [58, 178], [58, 194], [58, 195], [58, 196], [58, 197], [58, 198], [58, 214], [58, 215], [58, 216], [58, 217], [58, 218], [58, 234], [58, 235], [58, 236], [58, 237], [58, 238], [58, 254], [58, 255], [58, 256], [58, 257], [58, 258], [59, 176], [59, 177], [59, 178], [59, 179], [59, 196], [59, 197], [59, 198], [59, 199], [59, 216], [59, 217], [59, 218], [59, 219], [59, 236], [59, 237], [59, 238], [59, 239], [59, 256], [59, 257], [59, 258], [59, 259], [60, 200], [60, 201], [60, 202], [60, 220], [60, 221], [60, 222], [60, 240], [60, 241], [60, 242], [60, 260], [60, 261], [60, 262], [60, 280], [60, 281], [60, 282], [61, 200], [61, 201], [61, 202], [61, 203], [61, 204], [61, 220], [61, 221], [61, 222], [61, 223], [61, 224], [61, 240], [61, 241], [61, 242], [61, 243], [61, 244], [61, 260], [61, 261], [61, 262], [61, 263], [61, 264], [61, 280], [61, 281], [61, 282], [61, 283], [61, 284], [62, 202], [62, 203], [62, 204], [62, 205], [62, 206], [62, 222], [62, 223], [62, 224], [62, 225], [62, 226], [62, 242], [62, 243], [62, 244], [62, 245], [62, 246], [62, 262], [62, 263], [62, 264], [62, 265], [62, 266], [62, 282], [62, 283], [62, 284], [62, 285], [62, 286], [63, 204], [63, 205], [63, 206], [63, 207], [63, 208], [63, 224], [63, 225], [63, 226], [63, 227], [63, 228], [63, 244], [63, 245], [63, 246], [63, 247], [63, 248], [63, 264], [63, 265], [63, 266], [63, 267], [63, 268], [63, 284], [63, 285], [63, 286], [63, 287], [63, 288], [64, 206], [64, 207], [64, 208], [64, 209], [64, 210], [64, 226], [64, 227], [64, 228], [64, 229], [64, 230], [64, 246], [64, 247], [64, 248], [64, 249], [64, 250], [64, 266], [64, 267], [64, 268], [64, 269], [64, 270], [64, 286], [64, 287], [64, 288], [64, 289], [64, 290], [65, 208], [65, 209], [65, 210], [65, 211], [65, 212], [65, 228], [65, 229], [65, 230], [65, 231], [65, 232], [65, 248], [65, 249], [65, 250], [65, 251], [65, 252], [65, 268], [65, 269], [65, 270], [65, 271], [65, 272], [65, 288], [65, 289], [65, 290], [65, 291], [65, 292], [66, 210], [66, 211], [66, 212], [66, 213], [66, 214], [66, 230], [66, 231], [66, 232], [66, 233], [66, 234], [66, 250], [66, 251], [66, 252], [66, 253], [66, 254], [66, 270], [66, 271], [66, 272], [66, 273], [66, 274], [66, 290], [66, 291], [66, 292], [66, 293], [66, 294], [67, 212], [67, 213], [67, 214], [67, 215], [67, 216], [67, 232], [67, 233], [67, 234], [67, 235], [67, 236], [67, 252], [67, 253], [67, 254], [67, 255], [67, 256], [67, 272], [67, 273], [67, 274], [67, 275], [67, 276], [67, 292], [67, 293], [67, 294], [67, 295], [67, 296], [68, 214], [68, 215], [68, 216], [68, 217], [68, 218], [68, 234], [68, 235], [68, 236], [68, 237], [68, 238], [68, 254], [68, 255], [68, 256], [68, 257], [68, 258], [68, 274], [68, 275], [68, 276], [68, 277], [68, 278], [68, 294], [68, 295], [68, 296], [68, 297], [68, 298], [69, 216], [69, 217], [69, 218], [69, 219], [69, 236], [69, 237], [69, 238], [69, 239], [69, 256], [69, 257], [69, 258], [69, 259], [69, 276], [69, 277], [69, 278], [69, 279], [69, 296], [69, 297], [69, 298], [69, 299], [70, 240], [70, 241], [70, 242], [70, 260], [70, 261], [70, 262], [70, 280], [70, 281], [70, 282], [70, 300], [70, 301], [70, 302], [70, 320], [70, 321], [70, 322], [71, 240], [71, 241], [71, 242], [71, 243], [71, 244], [71, 260], [71, 261], [71, 262], [71, 263], [71, 264], [71, 280], [71, 281], [71, 282], [71, 283], [71, 284], [71, 300], [71, 301], [71, 302], [71, 303], [71, 304], [71, 320], [71, 321], [71, 322], [71, 323], [71, 324], [72, 242], [72, 243], [72, 244], [72, 245], [72, 246], [72, 262], [72, 263], [72, 264], [72, 265], [72, 266], [72, 282], [72, 283], [72, 284], [72, 285], [72, 286], [72, 302], [72, 303], [72, 304], [72, 305], [72, 306], [72, 322], [72, 323], [72, 324], [72, 325], [72, 326], [73, 244], [73, 245], [73, 246], [73, 247], [73, 248], [73, 264], [73, 265], [73, 266], [73, 267], [73, 268], [73, 284], [73, 285], [73, 286], [73, 287], [73, 288], [73, 304], [73, 305], [73, 306], [73, 307], [73, 308], [73, 324], [73, 325], [73, 326], [73, 327], [73, 328], [74, 246], [74, 247], [74, 248], [74, 249], [74, 250], [74, 266], [74, 267], [74, 268], [74, 269], [74, 270], [74, 286], [74, 287], [74, 288], [74, 289], [74, 290], [74, 306], [74, 307], [74, 308], [74, 309], [74, 310], [74, 326], [74, 327], [74, 328], [74, 329], [74, 330], [75, 248], [75, 249], [75, 250], [75, 251], [75, 252], [75, 268], [75, 269], [75, 270], [75, 271], [75, 272], [75, 288], [75, 289], [75, 290], [75, 291], [75, 292], [75, 308], [75, 309], [75, 310], [75, 311], [75, 312], [75, 328], [75, 329], [75, 330], [75, 331], [75, 332], [76, 250], [76, 251], [76, 252], [76, 253], [76, 254], [76, 270], [76, 271], [76, 272], [76, 273], [76, 274], [76, 290], [76, 291], [76, 292], [76, 293], [76, 294], [76, 310], [76, 311], [76, 312], [76, 313], [76, 314], [76, 330], [76, 331], [76, 332], [76, 333], [76, 334], [77, 252], [77, 253], [77, 254], [77, 255], [77, 256], [77, 272], [77, 273], [77, 274], [77, 275], [77, 276], [77, 292], [77, 293], [77, 294], [77, 295], [77, 296], [77, 312], [77, 313], [77, 314], [77, 315], [77, 316], [77, 332], [77, 333], [77, 334], [77, 335], [77, 336], [78, 254], [78, 255], [78, 256], [78, 257], [78, 258], [78, 274], [78, 275], [78, 276], [78, 277], [78, 278], [78, 294], [78, 295], [78, 296], [78, 297], [78, 298], [78, 314], [78, 315], [78, 316], [78, 317], [78, 318], [78, 334], [78, 335], [78, 336], [78, 337], [78, 338], [79, 256], [79, 257], [79, 258], [79, 259], [79, 276], [79, 277], [79, 278], [79, 279], [79, 296], [79, 297], [79, 298], [79, 299], [79, 316], [79, 317], [79, 318], [79, 319], [79, 336], [79, 337], [79, 338], [79, 339], [80, 280], [80, 281], [80, 282], [80, 300], [80, 301], [80, 302], [80, 320], [80, 321], [80, 322], [80, 340], [80, 341], [80, 342], [80, 360], [80, 361], [80, 362], [81, 280], [81, 281], [81, 282], [81, 283], [81, 284], [81, 300], [81, 301], [81, 302], [81, 303], [81, 304], [81, 320], [81, 321], [81, 322], [81, 323], [81, 324], [81, 340], [81, 341], [81, 342], [81, 343], [81, 344], [81, 360], [81, 361], [81, 362], [81, 363], [81, 364], [82, 282], [82, 283], [82, 284], [82, 285], [82, 286], [82, 302], [82, 303], [82, 304], [82, 305], [82, 306], [82, 322], [82, 323], [82, 324], [82, 325], [82, 326], [82, 342], [82, 343], [82, 344], [82, 345], [82, 346], [82, 362], [82, 363], [82, 364], [82, 365], [82, 366], [83, 284], [83, 285], [83, 286], [83, 287], [83, 288], [83, 304], [83, 305], [83, 306], [83, 307], [83, 308], [83, 324], [83, 325], [83, 326], [83, 327], [83, 328], [83, 344], [83, 345], [83, 346], [83, 347], [83, 348], [83, 364], [83, 365], [83, 366], [83, 367], [83, 368], [84, 286], [84, 287], [84, 288], [84, 289], [84, 290], [84, 306], [84, 307], [84, 308], [84, 309], [84, 310], [84, 326], [84, 327], [84, 328], [84, 329], [84, 330], [84, 346], [84, 347], [84, 348], [84, 349], [84, 350], [84, 366], [84, 367], [84, 368], [84, 369], [84, 370], [85, 288], [85, 289], [85, 290], [85, 291], [85, 292], [85, 308], [85, 309], [85, 310], [85, 311], [85, 312], [85, 328], [85, 329], [85, 330], [85, 331], [85, 332], [85, 348], [85, 349], [85, 350], [85, 351], [85, 352], [85, 368], [85, 369], [85, 370], [85, 371], [85, 372], [86, 290], [86, 291], [86, 292], [86, 293], [86, 294], [86, 310], [86, 311], [86, 312], [86, 313], [86, 314], [86, 330], [86, 331], [86, 332], [86, 333], [86, 334], [86, 350], [86, 351], [86, 352], [86, 353], [86, 354], [86, 370], [86, 371], [86, 372], [86, 373], [86, 374], [87, 292], [87, 293], [87, 294], [87, 295], [87, 296], [87, 312], [87, 313], [87, 314], [87, 315], [87, 316], [87, 332], [87, 333], [87, 334], [87, 335], [87, 336], [87, 352], [87, 353], [87, 354], [87, 355], [87, 356], [87, 372], [87, 373], [87, 374], [87, 375], [87, 376], [88, 294], [88, 295], [88, 296], [88, 297], [88, 298], [88, 314], [88, 315], [88, 316], [88, 317], [88, 318], [88, 334], [88, 335], [88, 336], [88, 337], [88, 338], [88, 354], [88, 355], [88, 356], [88, 357], [88, 358], [88, 374], [88, 375], [88, 376], [88, 377], [88, 378], [89, 296], [89, 297], [89, 298], [89, 299], [89, 316], [89, 317], [89, 318], [89, 319], [89, 336], [89, 337], [89, 338], [89, 339], [89, 356], [89, 357], [89, 358], [89, 359], [89, 376], [89, 377], [89, 378], [89, 379], [90, 320], [90, 321], [90, 322], [90, 340], [90, 341], [90, 342], [90, 360], [90, 361], [90, 362], [90, 380], [90, 381], [90, 382], [91, 320], [91, 321], [91, 322], [91, 323], [91, 324], [91, 340], [91, 341], [91, 342], [91, 343], [91, 344], [91, 360], [91, 361], [91, 362], [91, 363], [91, 364], [91, 380], [91, 381], [91, 382], [91, 383], [91, 384], [92, 322], [92, 323], [92, 324], [92, 325], [92, 326], [92, 342], [92, 343], [92, 344], [92, 345], [92, 346], [92, 362], [92, 363], [92, 364], [92, 365], [92, 366], [92, 382], [92, 383], [92, 384], [92, 385], [92, 386], [93, 324], [93, 325], [93, 326], [93, 327], [93, 328], [93, 344], [93, 345], [93, 346], [93, 347], [93, 348], [93, 364], [93, 365], [93, 366], [93, 367], [93, 368], [93, 384], [93, 385], [93, 386], [93, 387], [93, 388], [94, 326], [94, 327], [94, 328], [94, 329], [94, 330], [94, 346], [94, 347], [94, 348], [94, 349], [94, 350], [94, 366], [94, 367], [94, 368], [94, 369], [94, 370], [94, 386], [94, 387], [94, 388], [94, 389], [94, 390], [95, 328], [95, 329], [95, 330], [95, 331], [95, 332], [95, 348], [95, 349], [95, 350], [95, 351], [95, 352], [95, 368], [95, 369], [95, 370], [95, 371], [95, 372], [95, 388], [95, 389], [95, 390], [95, 391], [95, 392], [96, 330], [96, 331], [96, 332], [96, 333], [96, 334], [96, 350], [96, 351], [96, 352], [96, 353], [96, 354], [96, 370], [96, 371], [96, 372], [96, 373], [96, 374], [96, 390], [96, 391], [96, 392], [96, 393], [96, 394], [97, 332], [97, 333], [97, 334], [97, 335], [97, 336], [97, 352], [97, 353], [97, 354], [97, 355], [97, 356], [97, 372], [97, 373], [97, 374], [97, 375], [97, 376], [97, 392], [97, 393], [97, 394], [97, 395], [97, 396], [98, 334], [98, 335], [98, 336], [98, 337], [98, 338], [98, 354], [98, 355], [98, 356], [98, 357], [98, 358], [98, 374], [98, 375], [98, 376], [98, 377], [98, 378], [98, 394], [98, 395], [98, 396], [98, 397], [98, 398], [99, 336], [99, 337], [99, 338], [99, 339], [99, 356], [99, 357], [99, 358], [99, 359], [99, 376], [99, 377], [99, 378], [99, 379], [99, 396], [99, 397], [99, 398], [99, 399]]

InV4 to V4 --- LOOKS OK
[[0, 0], [0, 1], [0, 2], [0, 10], [0, 11], [0, 12], [0, 20], [0, 21], [0, 22], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 24], [3, 25], [3, 26], [3, 27], [3, 28], [4, 6], [4, 7], [4, 8], [4, 9], [4, 16], [4, 17], [4, 18], [4, 19], [4, 26], [4, 27], [4, 28], [4, 29], [5, 0], [5, 1], [5, 2], [5, 10], [5, 11], [5, 12], [5, 20], [5, 21], [5, 22], [5, 30], [5, 31], [5, 32], [5, 40], [5, 41], [5, 42], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 20], [6, 21], [6, 22], [6, 23], [6, 24], [6, 30], [6, 31], [6, 32], [6, 33], [6, 34], [6, 40], [6, 41], [6, 42], [6, 43], [6, 44], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 22], [7, 23], [7, 24], [7, 25], [7, 26], [7, 32], [7, 33], [7, 34], [7, 35], [7, 36], [7, 42], [7, 43], [7, 44], [7, 45], [7, 46], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 24], [8, 25], [8, 26], [8, 27], [8, 28], [8, 34], [8, 35], [8, 36], [8, 37], [8, 38], [8, 44], [8, 45], [8, 46], [8, 47], [8, 48], [9, 6], [9, 7], [9, 8], [9, 9], [9, 16], [9, 17], [9, 18], [9, 19], [9, 26], [9, 27], [9, 28], [9, 29], [9, 36], [9, 37], [9, 38], [9, 39], [9, 46], [9, 47], [9, 48], [9, 49], [10, 20], [10, 21], [10, 22], [10, 30], [10, 31], [10, 32], [10, 40], [10, 41], [10, 42], [10, 50], [10, 51], [10, 52], [10, 60], [10, 61], [10, 62], [11, 20], [11, 21], [11, 22], [11, 23], [11, 24], [11, 30], [11, 31], [11, 32], [11, 33], [11, 34], [11, 40], [11, 41], [11, 42], [11, 43], [11, 44], [11, 50], [11, 51], [11, 52], [11, 53], [11, 54], [11, 60], [11, 61], [11, 62], [11, 63], [11, 64], [12, 22], [12, 23], [12, 24], [12, 25], [12, 26], [12, 32], [12, 33], [12, 34], [12, 35], [12, 36], [12, 42], [12, 43], [12, 44], [12, 45], [12, 46], [12, 52], [12, 53], [12, 54], [12, 55], [12, 56], [12, 62], [12, 63], [12, 64], [12, 65], [12, 66], [13, 24], [13, 25], [13, 26], [13, 27], [13, 28], [13, 34], [13, 35], [13, 36], [13, 37], [13, 38], [13, 44], [13, 45], [13, 46], [13, 47], [13, 48], [13, 54], [13, 55], [13, 56], [13, 57], [13, 58], [13, 64], [13, 65], [13, 66], [13, 67], [13, 68], [14, 26], [14, 27], [14, 28], [14, 29], [14, 36], [14, 37], [14, 38], [14, 39], [14, 46], [14, 47], [14, 48], [14, 49], [14, 56], [14, 57], [14, 58], [14, 59], [14, 66], [14, 67], [14, 68], [14, 69], [15, 40], [15, 41], [15, 42], [15, 50], [15, 51], [15, 52], [15, 60], [15, 61], [15, 62], [15, 70], [15, 71], [15, 72], [15, 80], [15, 81], [15, 82], [16, 40], [16, 41], [16, 42], [16, 43], [16, 44], [16, 50], [16, 51], [16, 52], [16, 53], [16, 54], [16, 60], [16, 61], [16, 62], [16, 63], [16, 64], [16, 70], [16, 71], [16, 72], [16, 73], [16, 74], [16, 80], [16, 81], [16, 82], [16, 83], [16, 84], [17, 42], [17, 43], [17, 44], [17, 45], [17, 46], [17, 52], [17, 53], [17, 54], [17, 55], [17, 56], [17, 62], [17, 63], [17, 64], [17, 65], [17, 66], [17, 72], [17, 73], [17, 74], [17, 75], [17, 76], [17, 82], [17, 83], [17, 84], [17, 85], [17, 86], [18, 44], [18, 45], [18, 46], [18, 47], [18, 48], [18, 54], [18, 55], [18, 56], [18, 57], [18, 58], [18, 64], [18, 65], [18, 66], [18, 67], [18, 68], [18, 74], [18, 75], [18, 76], [18, 77], [18, 78], [18, 84], [18, 85], [18, 86], [18, 87], [18, 88], [19, 46], [19, 47], [19, 48], [19, 49], [19, 56], [19, 57], [19, 58], [19, 59], [19, 66], [19, 67], [19, 68], [19, 69], [19, 76], [19, 77], [19, 78], [19, 79], [19, 86], [19, 87], [19, 88], [19, 89], [20, 60], [20, 61], [20, 62], [20, 70], [20, 71], [20, 72], [20, 80], [20, 81], [20, 82], [20, 90], [20, 91], [20, 92], [21, 60], [21, 61], [21, 62], [21, 63], [21, 64], [21, 70], [21, 71], [21, 72], [21, 73], [21, 74], [21, 80], [21, 81], [21, 82], [21, 83], [21, 84], [21, 90], [21, 91], [21, 92], [21, 93], [21, 94], [22, 62], [22, 63], [22, 64], [22, 65], [22, 66], [22, 72], [22, 73], [22, 74], [22, 75], [22, 76], [22, 82], [22, 83], [22, 84], [22, 85], [22, 86], [22, 92], [22, 93], [22, 94], [22, 95], [22, 96], [23, 64], [23, 65], [23, 66], [23, 67], [23, 68], [23, 74], [23, 75], [23, 76], [23, 77], [23, 78], [23, 84], [23, 85], [23, 86], [23, 87], [23, 88], [23, 94], [23, 95], [23, 96], [23, 97], [23, 98], [24, 66], [24, 67], [24, 68], [24, 69], [24, 76], [24, 77], [24, 78], [24, 79], [24, 86], [24, 87], [24, 88], [24, 89], [24, 96], [24, 97], [24, 98], [24, 99]]

InIT to IT - CHECKED - STATUS = 'GOOD'
[[0, 0], [0, 1], [0, 2], [0, 5], [0, 6], [0, 7], [0, 10], [0, 11], [0, 12], 
[1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], 
[2, 2], [2, 3], [2, 4], [2, 7], [2, 8], [2, 9], [2, 12], [2, 13], [2, 14], 
[3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [3, 10], [3, 11], [3, 12], [3, 15], [3, 16], [3, 17], [3, 20], [3, 21], [3, 22], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 23], [4, 24], 
[5, 2], [5, 3], [5, 4], [5, 7], [5, 8], [5, 9], [5, 12], [5, 13], [5, 14], [5, 17], [5, 18], [5, 19], [5, 22], [5, 23], [5, 24], [6, 10], [6, 11], [6, 12], [6, 15], [6, 16], [6, 17], [6, 20], [6, 21], [6, 22], 
[7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 20], [7, 21], [7, 22], [7, 23], [7, 24], 
[8, 12], [8, 13], [8, 14], [8, 17], [8, 18], [8, 19], [8, 22], [8, 23], [8, 24]]

InMI to MI - CHECKED - STATUS = 'GOOD'
[[0, 0], [0, 1], [0, 2], [0, 5], [0, 6], [0, 7], [0, 10], [0, 11], [0, 12], 
[1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], 
[2, 2], [2, 3], [2, 4], [2, 7], [2, 8], [2, 9], [2, 12], [2, 13], [2, 14], 
[3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [3, 10], [3, 11], [3, 12], [3, 15], [3, 16], [3, 17], [3, 20], [3, 21], [3, 22], 
[4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 23], [4, 24], 
[5, 2], [5, 3], [5, 4], [5, 7], [5, 8], [5, 9], [5, 12], [5, 13], [5, 14], [5, 17], [5, 18], [5, 19], [5, 22], [5, 23], [5, 24], 
[6, 10], [6, 11], [6, 12], [6, 15], [6, 16], [6, 17], [6, 20], [6, 21], [6, 22], 
[7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 20], [7, 21], [7, 22], [7, 23], [7, 24], 
[8, 12], [8, 13], [8, 14], [8, 17], [8, 18], [8, 19], [8, 22], [8, 23], [8, 24]]


*20jan30
**so i confirmed that the connectivity is correct. At least for the current configuration where I have reduced network with 20x20 neurons in R and V1 followed by 10x10 neurons in V4 and 5x5 neurons in IT and so on.
**Until now i have been using delay of 20 ms, which is too long. Biologically, it should be 1 or 2 ms (see for references).
**Changed delays for all synaptic connections to 2 ms.
**Create a new folder 'SMARTAgent_Reduced_01302020' and test output firing rates for different inhibition strengths in FFEtoE_WILEtoI_WILItoE (0.001,0.002,0.004). (WIL - withinlayer and FF is feedforward). WIL E->I (0.002) WIL I->E(0.001,0.002,0.004) and FF E->E (0.002)
**Why there is a lot of noise in R neurons? Can i reduce it?
***May be by adding inhibition in R helps it. so add IR neurons (10x10) and connections R->IR (3) IR->R (5).
**test new model with IR and R->IR->R loop in a folder 'FFEtoE_WILEtoI_WILItoE_withIR' 

*20jan31
**When i tested new model with IR and R->IR->R loop and compared it with R->IR. using IR->R of 0.004 gave me very similar results to IR->R of 0. When i increased IR->R to 0.04, the firing rate of R and IR both went down. But i want to see the oscillations.
**May be i need to reduce the model to 2 layers to understand the interplay between excitation and inhibition.

*20feb3
**running 2 layers model with 5x5 neurons in R and 1 neuron in IR, where 3x3 neurons in R make connections with 1 IR neuron. The input is only corner pixels 5x5.
***I noticed that the strength of poisson neurons (processes converting pixel intensities to firing rate) to R is too much which leads to a burst of activity in which some of the spikes are very small.
** weight reduced to 0.002 as shown below:
netParams.stimTargetParams['stimMod->all'] = {'source': 'stimMod',
        'conds': {'pop': 'R'},
        'convergence': 1,
        'weight': 0.002,
        'delay': 1,
        'synMech': 'AMPA'}
**I found another issue..... firing rate for baseline (black background) was ~7 Hz in addition to the 5Hz provided to all the excitatory neurons. So probably get rid of the baseline activity of ~7Hz i.e. in aigame.py

*20feb4
**running simulations with background and without background in 'SMARTAgent_FFExcitation_WithinLayerInhibition' and 'SMARTAgent_FFExcitation_WithinLayerInhibition/NoNoise'
netParams.stimSourceParams['ebkg'] = {'type': 'NetStim', 'rate': 5, 'noise': 0.0} #noise was 0.3 and weight was 0.01
netParams.stimTargetParams['ebkg->all'] = {'source': 'ebkg', 'conds': {'cellType': ['EV1','EV4','EIT', 'EMI', 'EMO']}, 'weight': 0, 'delay': 'max(1, normal(5,2))', 'synMech': 'AMPA'}


netParams.stimSourceParams['bkg'] = {'type': 'NetStim', 'rate': 20, 'noise': 0.0} #noise was 0.3 and weight was 0.01
netParams.stimTargetParams['bkg->all'] = {'source': 'bkg', 'conds': {'cellType': ['InR','InV1','InV4','InIT', 'InMI']}, 'weight': 0, 'delay': 'max(1, normal(5,2))', 'synMech': 'AMPA'}

**All long range inputs to M1 originates in thalamus or other cortical areas and is exculsively glutamatergic.
**In rodents, these thalamic inputs include motor thalamic nuclei such as Va-VL, posterior sensory nuclei including PO and ventromedial (VM) thalamus. The axons differentially target distinct layers of M1.

*20feb5
**ran the following simulations:
1. No background firing rate:
1a. 100s_withRL -- firing rates of most of the neurons looked stable except motor areas which were increasing
1b. 500s_withRL -- firing rates of IT, MI and MO neurons increased first and then decreases sharply. These effects are probably due to RL between IT, MI and MO.
1c. 200s_noRL--all firing rates stable.
1d. 200s_noRL_noInhib--al firing rate stable but the now the neurons are firing at higher rate.
2. With 5Hz and 20 Hz background firing rates for excitatory and inhibitory neurons.
2a. 100s_withRL -- firing rates of most of the neurons looked stable except motor areas which were increasing
2b. 500s_withRL -- firing rates of IT, MI and MO neurons increased first and then decreases sharply. These effects are probably due to RL between IT, MI and MO.
2c. 200s_noRL--all firing rates stable.
2d. 200s_noRL_noInhib--al firing rate stable but the now the neurons are firing at higher rate.

**start adding RL
1. add between IT and MI. ---> constant increase in weights observed. ALso in the presence of background firing, the firing rates of MI and MO increased. But in the absence of background firing, the firing rates of MI and MO didn't increase.

*20feb6
**firing rate of MO pop increased rapidly and then start dropping. Trying to find why is that? May be connections getting too strong. Look at the MO neurons voltage traces.
**baseline voltage shifts and the firing is going on. Don't see any issue with blocking.

*20feb7
**seems the problem is with background firing rate. background firing rate should be same across areas. right now this is not the case.
**For now get rid of the background firing rate and run with RL between IT and MI and between MI and MO. set 'weight': 0.01 to 'weight': 0.0 for both ['ebkg->all'] and ['bkg->all']---->Still the weights kept strengthening probably because both RL and STDP hebbian learning are working.
**Try activating antihebbian on RL synapses.
from: STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.0000, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.00001, 'RLantiwt': -0.000,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}
To: STDPparamsRL = {'hebbwt': 0.00001, 'antiwt':-0.00001, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.00001, 'RLantiwt': -0.000,
        'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}
***Not much different than when antiwt was 0.
**Check what happens if hebbwt is also turned to 0 i.e. both hebbwt and antiwt are 0. ---> overall weight decreased
**Try decreasing weights between (V1->V4),(V4->IT). 0.002 to 0.001 --->Looks better.
**Additionally, try decreasing weights between (IT->MI) and (MI->MO) from 0.002 to 0.001

*20feb10
**Reducing weights between (IT->MI) and (MI->MO) from 0.002 to 0.001 was too much as the firing rate decreased to around 2-3Hz.
**Change weights between IT->MI and MI->MO to 0.0015 ----> Still low firing rate.
**Chnage weights between IT->MI and MI->MO to 0.002----> So i just realized that i was looking at wrong data to draw conclusions. even for 0.0015, the firing rate increases. 
**Change weights between IT->MI and MI->MO to 0.0012 ----> In the beginning the firing rate is still high but then it decreases because of RL i.e. the weight decreases most of the times. ----> run simulation for longer duration (200 s). ---> population firing rates look reasonable. Not same but not too different.
**rerun the simulation (50sec) using shorter game-interaction interval of 10 ms. Still decreasing weights.

*20feb11
**Need to change the RL based STDP mechanism. For now, put a limit such that if the connection has not learned anything it can not forget. which means that whatever weight is assigned in the beginning sould be the absolute minimum i.e. without learning. therefore the weights can not go below that initially assigned weights. 'wmin' is assigned 0.0012.
**wmin is giving error so using wbase. ---> Seems to be stable. atleast not going down.
**Run simulation with real game.
**Motor cortex structure modified.
***Before the model had 2 layers MI and MO with 25 and 10 neurons respectively. IT->MI and MI->MO.
***Now the model has 2 layers ML and MR, each with 25 neurons. IT->ML and IT->MR. All to All connections.
***Decision is made by comparing firing rate of 25 neurons in ML and MR in intervals of 20 ms. such that the model can decide about 5 actions to be taken place in next 100 ms.

*20feb20
**firing rates information while playing the game was not boradcasted to all nodes, so the nodes other than master node didnt know what to do with that--->fixed that on feb14.
**tried running the simulation using mpi after the change in code and everything worked except saving some output parameters into text files----> I observed that firing rate was low, but there is no one-to-one correspondence between parallel simulation and simulation on a single node.
**when i ran simulation on 2 nodes, i observed firing rate calculated twice every time --->problem fixed.

*20feb21
**the racket seems to get stuck on one side. 
**Right now there is no noise, may be add different noise to neurons in ML and MR---->5 Hz noise added to ML and MR neurons.
**With 5Hz, it is still stuck on one corner. Increase noise to 20 Hz and try again.
**With 20 Hz, it is still stuck on one corner. Increase noise to 40 Hz and try again.
**May be something wrong with playgame as the actions seems to be not executed. Try producing random actions.
**based on suggestion by Salva. Changed the scripts. Now calculating firing rate on each node and then summing up using command sim.pc.allreduce(vec.from_python([F_R1]), 1) # sum
F_R1 = vec.to_python()[0] 
**seems like problem fixed. Now getting same level of firing rates as using single node.
**Reduce background firing rate/noise for driving ML and MR neurons to 5Hz.
**IDEAS: we could randomly explore weights by choosing a set of weights for an episode and evaluating the performance of the SmartAgent during that episode with the given weights.
**The other issue is right now, we are only using +1 or -1 for the reward. There are several kinds of performances:
1. Tha SmartAgent hit the ball and didn't let the opponent (computer) score +1 and itself loose a score -1. The SmartAgent gets a 0, but we need to encode this information in the circuit as this move has a positive effect on the outcome of the game.
2. The SmartAgent hit the ball in such a way that the computer could not pick up the ball and therefore SmartAgent made a score +1. This is a reward signal which is used in the model for RL weight adjustment.
3. The SmartAgent misses the ball and the computer made a score, so the SmartAgent gets -1 which act as a punishment in the RL framework.
4. Based on the scores, either SmartAgent wins or the computer. This should also has an impact on the performance or the model. Not urgent but this could be used as a reward signal too.
**remove ML and MR noise from the model and run 1 hr simulation.

*20feb24
**THINGS TO DO:
1) Make connections from earlier visual layers to motor cortex for RL.
2) Check the duration of eligibility trace to make sure that the association between the reward/punishment, action and visual scene can be established.
3) Include reward for the case when the player hits the ball as it prevents from losing the score.
4) Make eligibility trace exponentially dropping instead of square-like. 

**change RL parameters to use RLexp and increase RLlenhebb from 100 ms to 800 ms.
STDPparamsRL = {'hebbwt': 0.0000, 'antiwt':-0.0000, 'wbase': 0.0012, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.00001, 'RLantiwt': -0.000, 'tauhebb': 10, 'RLwindhebb': 50, 'useRLexp': 0, 'softthresh': 0, 'verbose':0}
to
STDPparamsRL = {'hebbwt': 0.0000, 'antiwt':-0.0000, 'wbase': 0.0012, 'wmax': 50, 'RLon': 1 , 'RLhebbwt': 0.00001, 'RLantiwt': -0.000,'tauhebb': 10, 'RLlenhebb': 800 ,'RLwindhebb': 50, 'useRLexp': 1, 'softthresh': 0, 'verbose':0}

**too many no move actions because the firing rate of ML is same as MR. Try picking up random action if ML is equal to MR firing rates.

*20mar4
**THINGS TO DO:
1. Fix videos (follow this: https://hub.packtpub.com/openai-gym-environments-wrappers-and-monitors-tutorial/)
2. Allow saving and loading weights so that we can run loneger simulations.
3. other thing while those types of sims run is to think about whether to have those "fake" rules you suggested - such as reward the model when it moves racket toward ball and when it contacts the ball. can do that via different values of critic signal.

**needed to istall ffmpeg using homebrew - installed


*20mar5
**added "simtype": {"NewSim":0,"ResumeSim":1,"ResumeSimFromFile":"data/20mar1_G2_simConfig.pkl"} in sim.json
***Choose here if need NewSim or ResumeSim. For resume sim, should also include ResumeSimFromFile
**update STDP weights

**testing weight loading - G0: run sim for 100 sec with initial weights.
**testing weight loading - G1: run sim for 100 sec with weights from G0

**WEIGHT RELOADING WORKS- can run long simulations by resuming from last run without problem

*20mar6
**in aigame.py, find the position of ball and racket, then propose action based on the their relative positions. The strategy here is to move towards the ball.
**all proposed actions are returned from playGame to sim.py and appended in sim.allProposedActions and saved in the end of simulation.
**Next step would be to use the proposed actions and compare it with the performed action, if the performed action was similar to the proposed action, give some reward.

*20mar9
**When Sam adjusted temperature to 37 degrees, all of a sudden the spiking behavior of HH neurons got weird.
**Sam suggested that we should try PYR2 (2 compartment pyramidal neuron from Mainen) for E type cells and FS_Basket (only with fast sodium and fast K based on this published work by Sam. Sam et al. 2016 : https://senselab.med.yale.edu/ModelDB/ShowModel?model=185858#tabs-1) for I type cells.

*20mar10
**compute direction of the ball (toward the racket of the player is 1, away from the racket of the player is -1)
**if the ball changes its direction and doesn't lose a score, it means that the ball hit the racket.
**define more types of rewards as "rewardcodes": {"scorePoint": 1, "losePoint": -0.01, "followBall": 0.001, "avoidBall": -0.001, "hitBall": 0.05}
**if the player made a score it gets 'scorePoint' as reward, if the player loses score it get 'losePoint' as punishment.
**if the player follows the ball while its moving towards it, the player gets 'followBall' as reward.
**if the player does not follow the ball while its moving toward it, the player gets 'avoidBall' as punishment.
**if the ball changes its direction and the player does not lose a point, it means that the ball was hit by the racket therefore player get 'hitBall' reward.

*20mar12
**Sam told me that there is too much reward. so testing all reward for "rewardcodes": {"scorePoint": 1, "losePoint": -1, "followBall": 0.5, "avoidBall": -0.001, "hitBall": 0.75}, in 20mar12_TG0_
**load step file in simdat.py
**reduce reward for followBall from 0.5 to 0.001 and Run "rewardcodes": {"scorePoint": 1, "losePoint": -1, "followBall": 0.001, "avoidBall": -0.001, "hitBall": 0.75} in 20mar12_TG1_
**don't use scorePoint and losePoint. Only use followBall, avoidBall and hitBall as rewards: "rewardcodes": {"scorePoint": 0, "losePoint": -0, "followBall": 0.001, "avoidBall": -0.001, "hitBall": 0.1}, in 20mar12_TG2_
**again the problem is too many times, the actions generate avoidBall signal. make followBall = 0.005 and rerun the sim. "rewardcodes": {"scorePoint": 0, "losePoint": -0, "followBall": 0.005, "avoidBall": -0.001, "hitBall": 0.1} in 20mar12_TG3_
**make followBall = 0.002 and rerun the sim. "rewardcodes": {"scorePoint": 0, "losePoint": -0, "followBall": 0.002, "avoidBall": -0.001, "hitBall": 0.1} in 20mar12_TG4_

*20mar13
**Should look at individual synapses
**should try to look at the capcity of network to store input---though not sure how to do that exactly. 
--Input space: nput space is ~number_frames * (Height x Width)^levels, where levels is number of grayscale values
--network space is proportional to number of plastic synapses, but each synapse has continuous range.... to the network capacity? something like synapses ^ NB of synaptic states...NB of synaptic states = number of synaptic values...each one has a range from wbase to wmax, and they're 64 bit numbers, but not using the full 64 bits
**IDEAS to enahnce network storage capacity:
1) use mulitple synapses between each pair of cells with different delays. Could use AMPA and NMDA or AMPA with different delays.
2)recurrent connecitivity with different delays.
3)Using detailed morphologies with multiple synapses at different loactions to allow different integration time constants and thus increasing the capacity of network storage.

**run shorter sim (2000 ms) with followBall reward of 0.004 in "20mar13_TG0_" and "sim": {"duration": 2000, "dt": 0.2, "verbose": 0, "recordStep":0.2,"recordWeightStepSize":1,"RLFakeUpRule": 0,"RLFakeDownRule": 0,"RLFakeStayRule": 0,"name":"20mar13_TG0_","doquit":0,"doplot":1}

**save rewards with more precision.

*20mar17
**plot synaptic weights per post neuron IDs.
**testing new plots.
**create separate figures for each pair of areas e.g. V1 to ML and MR, V4 to ML and MR and IT to ML and MR.
**plot as images

*20mar18
**still not happy with plotting synaptic weights.... difficult to analyze and learn about the learning and dynamics of synapses.
**will leave it for now and start including more synaptic time constants in the model i.e. via including different types of synapses between every pair of neurons connected.

*20mar19
**Using a bit different time constants for NMDA netParams.synMechParams['NMDA'] = {'mod': 'Exp2Syn', 'tau1': 0.15, 'tau2': 166.0, 'e': 0} # NMDA.... arm model had .. netParams.synMechParams['NMDA'] = {'mod': 'Exp2Syn', 'tau1': 0.15, 'tau2': 1.5, 'e': 0} # NMDA

**Based on this paper : Functional Properties of AMPA and NMDA Receptors Expressed in Identified Types of Basal Ganglia Neurons
Thomas Götz, Udo Kraushaar, Jörg Geiger, Joachim Lübke, Thomas Berger and Peter Jonas
Journal of Neuroscience 1 January 1997, 17 (1) 204-215; DOI: https://doi.org/10.1523/JNEUROSCI.17-01-00204.1997
***AMPARs in striatal principal neurons exhibited sloest gating (desnsitization time constant of 11.5 msec, 1 mM glutamate, 22C), whereas those in striatal cholinergic interneurons showed the fastest gating (desensitization time constant of 3.6 msec).
***The lowest permeability of AMPARs was observed in nigral dopaminergic neurons (PCa/PNa = 0.1), where as the highest Ca2+ permeability was found in subthalamic nucleus neurons (PCa/PNa = 1.17).
***NMDARs of different types of basal ganglia neurons were less variable in their functional properties; those expressed in nigral dopaminergic neurons exhibited the slowest gating (deactivation time constant of predominant fast component was 150 msec, 100uM glutamate) and those of globus pallidus neurons showed fastest gating (deactivation of 67 msec).
**deactivation time constant of AMPARs is in range of 1-3 ms.
**desensitization(inactivation) time constant of AMPARs is in range of 3-12 ms.
***deactivation of NMDARs has multiple time constants. The fastes time constant is ~166 ms (64% of recordings) and the second fastest time constant is ~1158 msec (36%).

**another paper  "Cell Type-Specific Development of NMDA Receptors in the Interneurons of Rat Prefrontal Cortex" -- might be useful from developmental perspective.

**Added NMDA synapses to long range connections between Visual areas and motor areas.
**plot weights for a single postsynaptic neuron.---> testing
**test plotting weights for a single post synaptic neuron for 5 different neurons.

*20mar20
**Problem plotting 'AMPA' and 'NMDA' weights for a pair of neurons. -->probably problem saving weights....test using print
**Record synMech with weights.

*20mar23
**plot weights of synaptic connections for only 10% of postsynaptic neurons. --->still not very informative.
**synaptic strengths evolve very similarly.
***May be need to reconsider: what is the purpose of using 2 different types of synapses between two neurons at the same location. since both synapses share same pre and postsynaptic activity, and same RL mechanism, they evolve with same dynamics. We didn't include those 2 types of synapses to behave same. our goal was to introduce multiple time scales in the model. 
**Other options to introduce multiple time scales:
1. use different RL rule AMPA (shorter eligibility) vs NMDA (longer eligibility):
STDPparamsRL1 with 'RLlenhebb': 50 ,'RLlenanti': 50 and 'useRLexp': 1
STDPparamsRL2 with 'RLlenhebb': 800 ,'RLlenanti': 100 and 'useRLexp': 0

*20mar24
**retina has direction selective neurons.
**V1 has direction selective neurons.
**V1 direction selective neurons' functionality doesn't completely depend on retinal direction selective neurons. (Morrie and Feller 2017, Current Biology) 
**should change IT to MT as that is the part of dorsal pathway (Retina-dLGN-V1-V2-MT).
**Probably, V2 also has direction selective neurons but didnt find any paper about that yet.
**MT also has direction selective neurons.
**Include direstion selective neurons in all areas. Start with R and V1.

*20mar25
**create layers of direction selective neurons for V1. (Use information of R for direction selective neurons in V1).
**computing direction of object motion in 3x3 block for visual input.
***if input is 20x20, direction sensitive neurons are 10x10. each direction sensitive neuron captures direction of object in 3x3 blocks with center of the block sliding over 2 neurons in each direction.
***some comments added to the computation of direction of object motion.
***arccos give angle between 0 and 180 degrees. so to extend it from 0 to 360 degrees, add 180 if the object motion direction is in 3 or 4th quadrant.
***if the angle theta is between 315 and 45, should activate R direction neuron.
***if the angle theta is between 135 and 225, should activate L direction neuron.
***if the angle theta is between 45 and 135, should activate Up direction neuron.
***if the angle theta is between 225 and 315, should activate Down direction neuron.
***add NetStim to direction selective neurons.
***broadcast firing rates for direction selective cells from root/Master node to all workers.
***receive firing rates for direction selective cells and assign those firing rates to all direction selective neurons.
***assign firing rates to direction selective neurons.
***test sim...2000ms
***Assigning firing rates to stimMod gave error----out of index. It worked for R neurons because there was no offset. cells were from 0-399. But now the cells have offset. so included offset....hopefully will work.
***Ah another mistake--better use hard coded number for now. change later.

*20mar26
**debug firing rate assignments
***print cells.gids for RDir sensitive neurons.
***cell properties properly assigned
**plot raster.
**use 30Hz instead of 5 Hz. firing for direction selective neurons.
**save raster data in pickle.
**Direction sensitive cells fired only once (all at the same time) during 2s simulation. Should not be the case.

*20mar27
**to understand why direction selective neurons are not firing, pass 30 hz firing rate to all neurons of pop 'EV1RDir0'
**print firing_rates_dirR ---to see if the correct firing rates are broadcasted. ---->correct firing rates are broadcasted.
**print firing_rates_dirR in all nodes --- to see if the broadcast was successful or not. ---->broadcast is working.
**now check if the ISI was assigned to the R-dir selective neuron or not?
***using the statement print('Neuron ', cell, 'on', sim.rank,' was assigned ISI of ', stim['hObj'].interval, ' ms') gave error. The error was probably related with Neuron update on zn.
***remove this statement and rerun. The error was probably related with Neuron update on zn.
***again use print('Neuron ', cell, 'on', sim.rank,' was assigned ISI of ', stim['hObj'].interval, ' ms')---assigned correctly but still no spike.
***to check if 30Hz is a good number or not, may be try using firing rates for R neurons. ---still no firing in raster plot.
***use 10 ms for stim-interval---->same results...no spikes.
***only use stim with RDir neurons.---->same results
***change the sequence of cell creation. first create EV1RDir0 and then ER. same with stimMod->all connections.
***revert changes in sequence of cell creation.
***get rid of offset for assigning rates to R neurons.
***see different firing patterns when use int(cell.gid) vs int(cell.gid-R_offset) ---PROBLEM HERE these two values dont match.
***use 10 ms interval for Rneurons.
***print R offset---R offset is different everytime. Use fix values for now.
***set RDir_offset to 900.
***print list of RDir neurons.
**So the PROBLEM all the way was not with the assignment of ISI for the stim to drive Direction selective neurons, but because the strength was too high and was causing neurons to go into depolarization block.
**started reducing weight from 1 to 0.1 (still high) and now to 0.02.
***to fix connection strengths of stim input, restore original firing rates except for EV1Dir0 (30 Hz.)
**restore all original firing rates.

*20mar30
**Sal suggested to use sim._gatherAllCellTags() to gather tags for all cells. gather and print to see what information is there.
**make a list of gids and find list of gids for ER, EV1D0, EV1D90, EV1D180, EV1D270 to find the offset. (adding additional computation).
**use these lists to find the offset to access firing rates of neurons encoding different directions.
**use 30Hz stim to drive direction selective neurons.
**add more direction selective neurons (for 8 directions now: 'EV1D0','EV1D45','EV1D90','EV1D135','EV1D180','EV1D225','EV1D270','EV1D315')
**Increase the Field of View (FOV) from 3x3 pixels to 5x5 pixels. (to have a better estimate for the direction). This may help in estimating direction of movement better for most of the times, except when ball is very close to the racket.
**Print theta and field of view when theta is not nan.
**debug FOV indexing.--->debugged
**looking at the raster and voltage traces saved as "20Mar30_G0_step_0_g0_02_CellX_200sec_FOV5x5.png" and raster plot ""20Mar30_G0_step_0_g0_02_raster_200sec_FOV5x5.png"", it seems that the strength is too much because 2 cells recorded show block. But at the same time, we need to be careful that the strength is enough to relay the pixel intensities in image. But for now focus on direction.
**In stimtargetparams for direction selective neurons, change connection strength to 0.01.
**comment out print statements used for debugging.
**change baseline firing rate of direction selective neurons to 0.0001 Hz (instead of 1 Hz).
**change firing rate to 10Hz.

*20mar31
**print measured angles.
**was using some numpy functions incorrectly. also was considering best case scenerio with 1 max and 1 min value to measure direction of object motion. sometimes the object does not move in the fielf of view and therefore give same inidices for min and max. so now i take the difference between min and max and then take median to get a direction vector. also was using x direction as y direction. ---->Looks like these issues fixed. IF FIND SOMETHING UNUSUAL, CHECK AGAIN. I CHECKED IT FOR A COUPLE OF IMAGE SEQUENCES AND IT WORKS FINE.
**error on line 252 in aigame.py computing this equation (dir1 = [max_ind[0]-min_ind[0],max_ind[1]-min_ind[1]])--->not robust.
**it broke when the dimensions of max_ind is different than min_ind. check it.
**use the dimensions of max_ind and min_ind to be the lower of both e.g. if one has 2x3 and the other 2x4. Use 2x3 for both.
**test if the above mentioned solution worked or not.

*20april01
**debug angle offset - using x and y inds in matrix is different than x and y axis used to compute angle.
**i think its fixed now- check the debugged version.
**flip y coordinate before computing angle because indexing starts from top left corner of the image.
**again not plotting raster for me. I dont know what is wrong. so trying to plot it outside doplot control.
**Saving and plotting is not working when using if sim.rank==0, therefore i remove that statement.
**when running simulation using "python multistepSim.py sim.json numcores numsteps multirun" plotting and saving doesn't work properly. so include an option usemultirun in the script.

*20april03
**seperate targets of StimMod by creating 2 separate stimTargetParams dictionaries. One is stimMod->R and other is stimMod->DirSelInput.
**Strategy for connections onto EMR and EML neurons.
***Each presynaptic neurons should connect to only 1 postsynaptic neuron. so if we have neurons projecting onto Motor neurons are in the list {"EV1":400,"EV1D0":100,"EV1D45":100,"EV1D90":100,"EV1D135":100,"EV1D180":100,"EV1D225":100,"EV1D270":100,"EV1D315":100,"EV4":100,"EIT":25} -->Total neurons = 1350. Therefore we shoul dhave 1350 neurons for ML and 1350 neurons for MR.
**change pop names from directions in angles to directions in terms of E,NE,N,NW,W,SW,S,SE.
**create a function to make list of connections between neurons in premotor areas and motor areas.
**create lists of connections between neurons in premotor areas and motor areas.
**change IT neurons to MT neurons.
**include long range connections between premotor and motor areas using both AMPA and NMDA synaptic mechanisms.
**run 2sec sim to test if the model runs with all new changes and to detect any errors/bugs.
**update pop tags in plotSpatioTemporalActivity.py
**update pop tags in aigame.py
**correct typo 
**i forgot to update nb of ML and MR neurons in sim.json-----updated NB of ML and MR neurons to 1350 each.
**in function updateInputRates(), forgot to update pop tags for direction selective neurons.----done.
**Looks like the weights are too low. Previously, each neuron in ML and MR was receiving 16 connections. so i decided to change synaptic weights 10 times. for AMPA connections between premotor and motor areas, change synaptic strength from 0.0025 to 0.025. Similarly, change synaptic strength of NMDA connections between premotor and motor areas to 0.02 from 0.002. and run for 20sec.

*20april06
**added recurrent connections with weights recWeight = 0.0001 and recProb = 0.2
**run sim for 20 sec with recurrent connectivity. Raster saved as "20April06_G0_step_0_raster_20sec_RecurEAdded.png"
**include direction selective neurons in simdat.py for analysis.
**debugging simdat.py 
**change firing rate of direction selective neurons to 30 Hz and run for 5 sec.

*20april07
**show image upside down in plotSpatioTemporalActivity using origin='upper' in imshow.
**make initial weight between premotor areas and motor areas same.
**debug plotSpatioTemporalActivity.py 


*20april08
**plot weights evolving with times using function plotSynWeightsPerTimeStep(pdf) in simdat.py
**while testing plotSynWeightsPerTimeStep(pdf), i noticed that the number of connections between premotor and motor areas were different than what i wanted it to be. For 1-1 connections, only 1 premotor neuron should connect to 1 motor neuron in Left and right motor populations. But this was not the case. So need to find the problem and fix it.
**run 500 ms sim to check the connections from V1 to M, V4 to M and MT to M.
**there was a bug in analysis simdat.py:
cpdfR = pdf[(pdf.time==t) & (pdf.postid>=dstartidx['EMR']) & (pdf.postid<=dendidx['EMR']) & (pdf.preid>=dstartidx[src]) & (pdf.preid<=dendidx['EMR'])]
Corrected as:
cpdfR = pdf[(pdf.time==t) & (pdf.postid>=dstartidx['EMR']) & (pdf.postid<=dendidx['EMR']) & (pdf.preid>=dstartidx[src]) & (pdf.preid<=dendidx[src])]
This bug was found in all functions where instead of src, trg was used for dendidx.
**reshape weights for display
**R removed from list + axes indexing debugged
**increase imshow range by 0.1.
**add plt.pause.
**add min range for imshow.
**remove unused axes.
**increasing range by 0.1 was too much. increase by 10% of the range of weights.

*20april09
**save movies of weights evolution as '_weightmap.mp4' in 'data/'
**test if _weightmap.mp4 is working properly.
***movie saved but with following issues: 1. the order is not correct. 2. some glitch (purple-pink color instead of gray scale for a couple of frames) in the color.
**change time-inds instead of time for png files.
***make the name of image.png same for all times by adding tpre using appended '00...' e.g if there are 100 images to be save, images will be saved as 001.png, 002.png .....010.png,020.png,.....,100.png 
***run 10 sec sim.
**To quantify behavior we record:
1. time point
2. action performed by the agent
3. reward (+1 if Agent wins a point, -1 if Agent loses a point)
4. action proposed to follow the ball (the proposed action is to follow the ball)
5. 1 if agent hits the ball (this action leads to avoid loss of point)  

*20april10
**plot FollowBall, HitBall and scorePoint together with weights.
**Looks like Hit Ball is not detected correctly in the algorithm. So need to check that.
**Since there was not hit ball or score point in the behavior, i will plot these behavioral outputs later.
**Right now i am plotting rewards (total rewards) and mean weights onto EML and EMR and mark time.

*20april13
**out of sequence image frames in movies using simdat.py fixed. the problem was with naming the files. previously when i tried to fix it. i didnt use the sting concentration function properly. It works now and all movies have images in sequence.
**plotting only game behavior using testPong.py. This can be integrated with the model output later. This is to understand the game behavior and to validate all the rules used for training the model. Should be run separately.
**saved 1000 steps random game behavior (not driven by the model).

*20april14
**Improved behavior plotting---still with random game.
***display: 
1. Executed actions vs Proposed actions (actions are proposed to follow the ball)
2. number of rewarding actions (when executed action is same as proposed action) vs punishing actions (when exectued action is different than the proposed action) normalized.
3. rewards as a function of actions. (0, -1 or +1)
4. cummulative hits (when racket hits the ball) vs cummulative miss (when racket misses the ball and lose a point).
5. per episode, how many times followed the ball vs not followed the ball.
6. per episode, how many times hit the ball vs missed the ball
7. per episode, how many times scored +1 against the computer.
***testing the code for many many episodes now. 

*20april16
**performance parameters mentioned in 5,6 and 7 are not displaying as i wanted it to be (i.e. as a function of episodes)----Need to be fixed.
**Need to plot following for the performance evaluation.
1. number of rewarding actions (when executed action is same as proposed action) vs punishing actions (when exectued action is different than the proposed action) normalized. (same as mentioned in 2 above for testPong.py)
2. cummulative hits (when racket hits the ball) vs cummulative miss (when racket misses the ball and lose a point). (same as mentioned in 4 above for testPong.py)
3. per episode, how many times followed the ball vs not followed the ball. (same as mentioned in 5 above for testPong.py)
4. per episode, how many times hit the ball vs missed the ball. (same as mentioned in 6 above for testPong.py)
5. per episode, how many times scored +1 against the computer. (same as mentioned in 7 above for testPong.py)
**included 1 in simdat.py. test now.
**adjust positions of subplots. 1 is working fine.
**include 2 in simdat.py. test now.
**use -1 in hits if the racket misses the ball and loses a point.
**update behavior plot in simdat.py using hit values of 1 for hit and -1 for miss.

*20April20
**return Images (of pong without downsampling), racket position, ball position and computed angles of object motion from playGame in aigame.py.
**implementing a plotBehavior function in sim.py using all the behavior related parameters returned from playGame.
**plot behavior with sim. testing now.---->movie not recorded properly.
**may be not close the figure and pass figure handles in and out of function.---try this.
**above test looks OK. saved actmap, weightsmap and behavior as movies with name '20april20_A0_'. Time simulated was 10 sec.
**USE NEW RL SCHEME:
***create 2 lists of STDPmech with postsynaptic neurons in EML and EMR.
***count number of L actions (in 5 steps) and number of R actions (in 5 steps)
***if number of L actions is equal to number of R actions, apply RL to all STDP mechanisms.
***if number of L actions is larger than the number of R actions, apply RL to STDP mechanisms related to EML.
***if number of R actions is larger than the number of L actions, apply RL to STDP mechanisms related to EMR.
****CAUTION: This is very crude form of scheme. Originally each action has a reward associated with it and therefore RL should be applied for each action individually. Here testing the concept and if there is a slight hint of improved behavior, should pursue further.
***BUG Ractions and Lactions could not be computed because actions were available only to sim.rank of 0.
****computed Ractions and Lactions on sim.rank of 0. Declared Ractions and Lactions as global variables expecting that these variables will be available to all nodes. Now hoping that Ractions and Lactions are updated in correct order----not sure how to test that. testing using print statements.---->Didn't work.
***need to broadcast this signal to all nodes. implemented broacdcasting and receiving vec2 with [Ractions, Lactions]. Test if works or not.
***using seperate vectors for each Ractions and Lactions.
****was missing receive call. added receive call for both vec2 and vec3. should work now. testing again.
**remove Ractions and Lactions from global variable list. print values of Ractions and Lactions to figure out why not working.
**convert list to array before applying np.where.
**typo mrSTDPmech was used as rlSTDPmech
**SEEMS TO BE WORKING-----RUN THE SIM FOR 100sec  overnight with recording behavior. prefix "20april20_B0_"

*20April21
**test running sim using a single action of game.
***CHANGES: 
1. tstepPerAction = 20.0
2. dconf['actionsPerPlay'] = 1
3. tPerPlay = tstepPerAction*dconf['actionsPerPlay']
4. sim.runSimWithIntervalFunc(tPerPlay,trainAgent)
5. range(dconf['actionsPerPlay']) in trainAgent(t) func---line 1302 in sim.py
6. t<tPerPlay: in trainAgent(t) func -- line 1300 in sim.py
7.      F_Rs = []
        F_Ls = []
        for ts in range(int(dconf['actionsPerPlay'])):
            ts_end = t-tstepPerAction*(dconf['actionsPerPlay']-ts)
            ts_beg = t-tstepPerAction*(dconf['actionsPerPlay']-ts-1)
            F_Rs.append(getFiringRatesWithInterval([ts_end,ts_beg], sim.net.pops['EMR'].cellGids))
            F_Ls.append(getFiringRatesWithInterval([ts_end,ts_beg], sim.net.pops['EML'].cellGids))
        sim.pc.allreduce(vec.from_python(F_Rs),1) #sum
        F_Rs = vec.to_python()[0]
        sim.pc.allreduce(vec.from_python(F_Ls),1) #sum
        F_Ls = vec.to_python()[0]
-----------------------------------------------------        
8.            for ts in range(int(dconf['actionsPerPlay'])):
                if F_Rs[ts]>F_Ls[ts]:
                    actions.append(dconf['moves']['UP'])
                elif F_Ls[ts]>F_Rs[ts]:
                    actions.append(dconf['moves']['DOWN'])
                else:
                    actions.append(dconf['moves']['NOMOVE']) # No move 
***test changes in sim.py using 5 actionsPerPlay = 5
*** use vec.to_python() instead of vec.to_python()[0]; since passing vector. -- looks good. "20april21_A0_"
**clean the code.
**run with actionsPerPlay = 2 in file with prefix "20april21_B0_"---Bug
***Fix bug: update intaction from sim.json   

*20April22
**problem in plotting behavior when using 2 actionsPerPlay.
***run sim using 2 actionsPerPlay without plotting behavior.
**fixed hits/miss-hits plot in recording behavior. also run simdat.py and actmap.py for "20april21_B0_" for 2 actionsPerPlay. No behavior saved while runing simulation.
**run sim with 2 actionsPerPlay for 100 sec with prefix "20april21_C0_". No behavior movie. only weightsmap and actmap movies.
**ran sim with 2 actionsPerPlay for 5 sec with prefix "20april22_A0_" with randomBehavior movie to test if the brhavior plotting is working fine. updateBehaviorPlot worked FINE with 2 actionsPerPlay. only behavior movie saved.
**Now need to start testing for 1 actionPerPlay.
**function computMotion needs atleast 2 images to compute the motion direction. when we are using 1 actionPerPlay, use previous image with one image to compute the direction.
**CHANGES in aigame.py:
***always process last_obs, whenever it is not empty.
    if len(self.last_obs)==0: #if its the first action of the episode, there won't be any last_obs, therefore no last image
      lobs_gimage_ds = []
    else:
      lobs_gimage = 255.0*rgb2gray(self.last_obs[courtYRng[0]:courtYRng[1],:,:]) 
      lobs_gimage_ds = downscale_local_mean(lobs_gimage,(8,8))
      lobs_gimage_ds = np.where(lobs_gimage_ds>np.min(lobs_gimage_ds)+1,255,lobs_gimage_ds)
      lobs_gimage_ds = 0.5*lobs_gimage_ds #use this image for motion computation only
***Do this only after computing firing rates for E, when number of actionsPerPlay is 1:
    if self.intaction==1: #if only one frame used per play, then add the downsampled and scaled image from last_obs for direction computation 
      if len(lobs_gimage_ds)>0:
        dsum_Images = np.maximum(dsum_Images,lobs_gimage_ds)
    dirs = self.computeMotion(dsum_Images)
***run sim of 100 sec to test the code for actionsPerPlay = 1 and save with prefix: "20april22_B0_"
***sim working, needs to check if directions are computed correctly. so better plotbehavior with sim.
**running 100 sec sim with reduced nb of direction selective neurons, reduced nb of motor neurons, changed from one-one pre-to-post motor connections, actionsPerPlay = 1 and FakeRuleUp=1. The sim results are prefixed "20april23_FU1_". No behavior is saved during sim.---->told sam that the sim was slow (~3PM). (RUNTIME:31664s; 4075 cells,621973 connections, 623807 synaptic contacts, 1936507 spikes, 4.75 Hz)
**running 100 sec sim with reduced nb of direction selective neurons, reduced nb of motor neurons, changed from one-one pre-to-post motor connections, actionsPerPlay = 1. The sim results are prefixed "20april23_A1_". No behavior is saved during sim. ---->may be sam fixed something before i ran this simulation (~8:20PM). conn convergence from pre to post motor synapses is 16. no behavior saving during sim. Use reward coded: BEFORE: "rewardcodes": {"scorePoint": 1, "losePoint": -0.01, "followBall": 0.01, "avoidBall": -0.001, "hitBall": 0.25} and THIS SIM: "rewardcodes": {"scorePoint": 0.2, "losePoint": -0.1, "followBall": 0.01, "avoidBall": -0.01, "hitBall": 0.1} - GOT ABORTED FOR SOME REASON

*20April24
**ALSO FOR COMPARISON: Run same sim with actionsPerPlay =2 and the results prefixed with "20april23_A2_" ---GOT ABORTED FOR UNKNOWN REASON - run again for 50 sec
PROBLEM: LOOKS LIKE A PROBLEM IN ALL 3 SIMS prefixed with "date 20april23_" coz when number of dir selective neurons were reduced it didnt compute the directions for FOV covering whole image. so restore nb of neurons in dir selective layers and rerun with 1 action. outputs in "20april24_A1"

*20April27 and 20April28
**THINGS TRIED FOR OPTICAL FLOW:

**Tried Method Nb 1: (https://scikit-image.org/docs/dev/auto_examples/registration/plot_opticalflow.html#sphx-glr-auto-examples-registration-plot-opticalflow-py)

import cv2
from matplotlib import pyplot as plt
import numpy as np
import gym
env = gym.make('Pong-v0')
env.reset()
observation, reward, done, info = env.step(3)

for _ in range(30): #running 30 times, so that ball appears in the court.
  observation, reward, done, info = env.step(3)
  observation, reward, done, info = env.step(4)
  observation, reward, done, info = env.step(4)
  observation, reward, done, info = env.step(4)
  observation, reward, done, info = env.step(4)

o1, reward, done, info = env.step(4)
o2, reward, done, info = env.step(4)
o3, reward, done, info = env.step(4)

from skimage.color import rgb2gray
from skimage.registration import optical_flow_tvl1
o1 = rgb2gray(o1)
o2 = rgb2gray(o2)
o3 = rgb2gray(o3)
v3, u3= optical_flow_tvl1(o2, o3) ---->METHOD 1
amps = np.add(np.square(u3),np.square(v3))
good_inds = np.where(amps>0.5,1,0) 
u3_filt = np.multiply(u3,good_inds)
v3_filt = np.multiply(v3,good_inds)
angles = np.degrees(np.arctan2(u3_filt,v3_filt))
for i in range(angles.shape[0]):
  for j in range(angles.shape[1]):
    if angles[i,j]<0: angles[i,j]=360+angles[i,j]
fig = plt.figure(figsize=(8,4))
gs = fig.add_gridspec(1,3)
ax0 = fig.add_subplot(gs[0,0])
ax1 = fig.add_subplot(gs[0,1])
ax2 = fig.add_subplot(gs[0,2])
cbaxes = fig.add_axes([0.92, 0.2, 0.01, 0.6])
ax0.imshow(o2)
ax0.set_title('o2')
ax1.imshow(o3)
ax1.set_title('o3')
fa = ax2.imshow(angles,origin='upper',vmin=np.nanmin(angles), vmax=np.nanmax(angles), cmap='Dark2')
ax2.set_title('Dir Angles')
plt.colorbar(fa,cax = cbaxes)
plt.show()


***Shows the location for flow but the angles are neither precise nor informative.

**Tried Method No. 2 (https://sandipanweb.wordpress.com/2018/02/25/implementing-lucas-kanade-optical-flow-algorithm-in-python/)

def optical_flow(I1g, I2g, window_size, tau=1e-2):
  kernel_x = np.array([[-1., 1.], [-1., 1.]])
  kernel_y = np.array([[-1., 1.], [-1., 1.]])
  kernel_y = np.array([[-1., -1.], [1., 1.]])
  kernel_t = np.array([[1., 1.], [1., 1.]])
  w = int(window_size/2)
  I1g = I1g / 255
  I2g = I2g
  mode = 'same'
  fx = signal.convolve2d(I1g, kernel_x, boundary='symm', mode=mode)
  fy = signal.convolve2d(I1g, kernel_y, boundary='symm', mode=mode)
  ft = signal.convolve2d(I2g, kernel_t, boundary='symm', mode=mode) + signal.convolve2d(I1g, -kernel_t,        boundary='symm', mode=mode)
  u = np.zeros(I1g.shape)
  v = np.zeros(I1g.shape)
  for i in range(w, I1g.shape[0]-w):
    for j in range(w, I1g.shape[1]-w):
      Ix = fx[i-w:i+w+1, j-w:j+w+1].flatten()
      Iy = fy[i-w:i+w+1, j-w:j+w+1].flatten()
      It = ft[i-w:i+w+1, j-w:j+w+1].flatten()
      b = np.reshape(It, (It.shape[0],1))
      A = np.vstack((Ix, Iy)).T
      if np.min(abs(np.linalg.eigvals(np.matmul(A.T, A)))) >= tau:
        nu = np.matmul(np.linalg.pinv(A), b) # get velocity here
        u[i,j]=nu[0]
        v[i,j]=nu[1]
  return (u,v)

u,v=optical_flow(I0,I1,3,tau=1e-16) --->This method seems to work better than "optical_flow_tvl1"
angles = np.degrees(np.arctan2(v,u))
for i in range(angles.shape[0]):
  for j in range(angles.shape[1]):
    if angles[i,j]<0: angles[i,j]=360+angles[i,j]
plt.imshow(angles)
plt.colorbar()
plt.show()

***Shows the location for flow, angles are somewhat accurate (~approximately). But still no information at all spatial locations.

**Tried Method Nb. 3 (https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_video/py_lucas_kanade/py_lucas_kanade.html)
***The function p1, st, err = cv2.calcOpticalFlowPyrLK(old_gray, frame_gray, p0, None, **lk_params) gave me errors. Probably didnt provide p0 properly. In the example, they use p0 = cv2.goodFeaturesToTrack(old_gray, mask = None, **feature_params) to extract corners using these parameters (feature_params = dict( maxCorners = 100,qualityLevel = 0.3,minDistance = 7,blockSize = 7 ))

*20April29
**Trying Nb. 3 again.

import cv2
flow45 = cv2.calcOpticalFlowFarneback(o4,o5, None, 0.5, 3, 15, 3, 5, 1.2, 0)
mag45, ang45 = cv2.cartToPolar(flow45[...,0], flow45[...,1])
goodInds = np.where(mag45<1e-10,0,1)
plt.imshow(np.degrees(np.multiply(ang45,goodInds)))
plt.colorbar()
plt.show()

0.5 - image pyramid or simple image scale
3 - nb of pyramidal layer. if used 1 means flow is calculated only from previous image.
15 - win size. flow is computed over the window....larger value is more robust to the noise.
3 - nb of iterations
5 - polynominal degree expansion. (recommended 5-7)
1.2 - standard deviation used to smooth used derivatives. (recommended 1.1-1.5)

flow45 = cv2.calcOpticalFlowFarneback(o4,o5, None, 0.5, 3, 15, 3, 5, 1.2, 0)
mag45, ang45 = cv2.cartToPolar(flow45[...,0], flow45[...,1])
goodInds = np.where(mag45<1e-10,0,1)
plt.subplot(2,2,1)
plt.imshow(o4)
plt.colorbar()
plt.subplot(2,2,2)
plt.imshow(o5)
plt.colorbar()
plt.subplot(2,2,3)
plt.imshow(np.degrees(np.multiply(ang45,goodInds)))
plt.colorbar()
plt.subplot(2,2,4)
plt.imshow(np.multiply(mag45,goodInds))
plt.colorbar()
plt.show()


flow35 = cv2.calcOpticalFlowFarneback(o3,o5, None, 0.5, 1, 5, 3, 5, 1.2, 0)
mag35, ang35 = cv2.cartToPolar(flow35[...,0], flow35[...,1])
goodInds = np.where(mag35<1e-10,0,1)
plt.subplot(2,2,1)
plt.imshow(o3)
plt.colorbar()
plt.subplot(2,2,2)
plt.imshow(o5)
plt.colorbar()
plt.subplot(2,2,3)
plt.imshow(np.degrees(np.multiply(ang35,goodInds)))
plt.colorbar()
plt.subplot(2,2,4)
plt.imshow(np.multiply(mag35,goodInds))
plt.colorbar()
plt.show()


flow34 = cv2.calcOpticalFlowFarneback(o3,o4, None, 0, 1, 10, 3, 5, 1.2, 0)
mag34, ang34 = cv2.cartToPolar(flow34[...,0], flow34[...,1])
goodInds = np.where(mag34<1e-10,0,1)
plt.subplot(2,2,1)
plt.imshow(o3)
plt.colorbar()
plt.subplot(2,2,2)
plt.imshow(o4)
plt.colorbar()
plt.subplot(2,2,3)
plt.imshow(np.degrees(np.multiply(ang34,goodInds)))
plt.colorbar()
plt.subplot(2,2,4)
plt.imshow(np.multiply(mag34,goodInds))
plt.colorbar()
plt.show()

*20may1
**create a toy model to understand the homeostatic-synaptic plasticity model 'hsyn'.
***The model has 2 cells, cell 0 is driven by stimMod at 10 Hz, cell 1 is driven by a background firing rate of 5 Hz. 


*20may4
**Using toymodel 
***with STDP-RL:
{preGid: 0, sec: 'soma', loc: 0.5, synMech: 'AMPA', weight: 0.02, delay: 20, plast: {mech: 'STDP', params: {hebbwt: 0.001, antiwt: -0.0005, wmax: 50, STDPon: 1, RLon: 1, RLhebbwt: 0.001, RLantiwt: -0.0002, tauhebb: 10, RLwindhebb: 100, useRLexp: 0, softthresh: 0, verbose: 1}}, label: 'R->M', hObj: NetCon[0], hSTDP: STDP[0], hSTDPprecon: NetCon[1], hSTDPpstcon: NetCon[2], STDPdata: {'preGid': 0, 'postGid': 1, 'receptor': 0}}
***with hsyn:
{preGid: 0, sec: 'soma', loc: 0.5, synMech: 'AMPA', weight: 0.02, delay: 20, plast: {mech: 'hsyn', params: {targetrate: 1, scaling: 1, rateinc: 1, ratedectau: 1000.0, scaleratefctr: 0.001}}, label: 'R->M', hObj: NetCon[0]}
***I thought i could either use STDP-RL or homeostatic synaptic plasticity as 'plasticity' in connections. But in fact, i can use hsyn in the synMechParams and then use STDP-RL for connParams.
**To play with the model:
1. 2Hz stimMod drives 1 ER neuron which in turn drives 1 EM neuron. In the absence of STDP-RL, and targetfiring rate = 0, both neurons ER and EM fire at 2 Hz.
2. Use targetrate = 1:

For 2Hz presynaptic spiking: B is increasing as scalefactor is increasing.
      A = A + w * factor * scalefactor
      B = B + w * factor * scalefactor
NET_RECEIVE@t=6.4: w=0.01: firingrate=0: A=0: B=0: factor=1.05537 scalefactor=1.0064:in
NET_RECEIVE@t=528.4: w=0.01: firingrate=0: A=0: B=1.78758e-45: factor=1.05537 scalefactor=1.5284:in NET_RECEIVE@t=1028.4: w=0.01: firingrate=0: A=0: B=1.72371e-43: factor=1.05537 scalefactor=2.0284:in NET_RECEIVE@t=1528.4: w=0.01: firingrate=0: A=0: B=2.28761e-43: factor=1.05537 scalefactor=2.5284:in NET_RECEIVE@t=2028.4: w=0.01: firingrate=0: A=0: B=2.8515e-43: factor=1.05537 scalefactor=3.0284:in NET_RECEIVE@t=2528.4: w=0.01: firingrate=0: A=0: B=3.41539e-43: factor=1.05537 scalefactor=3.5284:in NET_RECEIVE@t=3028.4: w=0.01: firingrate=0: A=0: B=3.97929e-43: factor=1.05537 scalefactor=4.0284:in NET_RECEIVE@t=3528.4: w=0.01: firingrate=0: A=0: B=4.54318e-43: factor=1.05537 scalefactor=4.5284:in NET_RECEIVE@t=4028.4: w=0.01: firingrate=0: A=0: B=5.10708e-43: factor=1.05537 scalefactor=5.0284:in NET_RECEIVE@t=4528.4: w=0.01: firingrate=0: A=0: B=5.67097e-43: factor=1.05537 scalefactor=5.5284:in NET_RECEIVE@t=5028.4: w=0.01: firingrate=0: A=0: B=6.23487e-43: factor=1.05537 scalefactor=6.0284:in NET_RECEIVE@t=5528.4: w=0.01: firingrate=0: A=0: B=6.79876e-43: factor=1.05537 scalefactor=6.5284:in NET_RECEIVE@t=6028.4: w=0.01: firingrate=0: A=0: B=7.36265e-43: factor=1.05537 scalefactor=7.0284:in NET_RECEIVE@t=6528.4: w=0.01: firingrate=0: A=0: B=7.92655e-43: factor=1.05537 scalefactor=7.5284:in NET_RECEIVE@t=7028.4: w=0.01: firingrate=0: A=0: B=8.49044e-43: factor=1.05537 scalefactor=8.0284:in NET_RECEIVE@t=7528.4: w=0.01: firingrate=0: A=0: B=9.05434e-43: factor=1.05537 scalefactor=8.5284:in NET_RECEIVE@t=8028.4: w=0.01: firingrate=0: A=0: B=9.61823e-43: factor=1.05537 scalefactor=9.0284:in NET_RECEIVE@t=8528.4: w=0.01: firingrate=0: A=0: B=1.01821e-42: factor=1.05537 scalefactor=9.5284:in NET_RECEIVE@t=9028.4: w=0.01: firingrate=0: A=0: B=1.0746e-42: factor=1.05537 scalefactor=10.0284:in NET_RECEIVE@t=9528.4: w=0.01: firingrate=0: A=0: B=1.13099e-42: factor=1.05537 scalefactor=10.5284:in

--i dont understand how A and B are evolving differently.
print before and after A and B assignments.

For 2Hz presynaptic spiking: B is increasing as scalefactor is increasing.
      A = A + w * factor * scalefactor
      B = B + w * factor * scalefactor
NET_RECEIVE@t=6.4: w=0.01: firingrate=0: A=0: B=0: factor=1.05537 scalefactor=1.0064:in 
NET_RECEIVE@t=6.4: A=0.0106213: B=0.0106213:in 
NET_RECEIVE@t=528.4: w=0.01: firingrate=0: A=0: B=1.78758e-45: factor=1.05537 scalefactor=1.5284:in NET_RECEIVE@t=528.4: A=0.0161303: B=0.0161303:in 
NET_RECEIVE@t=1028.4: w=0.01: firingrate=0: A=0: B=1.72371e-43: factor=1.05537 scalefactor=2.0284:in NET_RECEIVE@t=1028.4: A=0.0214071: B=0.0214071:in 
NET_RECEIVE@t=1528.4: w=0.01: firingrate=0: A=0: B=2.28761e-43: factor=1.05537 scalefactor=2.5284:in NET_RECEIVE@t=1528.4: A=0.026684: B=0.026684:in 
NET_RECEIVE@t=2028.4: w=0.01: firingrate=0: A=0: B=2.8515e-43: factor=1.05537 scalefactor=3.0284:in NET_RECEIVE@t=2028.4: A=0.0319609: B=0.0319609:in 
NET_RECEIVE@t=2528.4: w=0.01: firingrate=0: A=0: B=3.41539e-43: factor=1.05537 scalefactor=3.5284:in NET_RECEIVE@t=2528.4: A=0.0372377: B=0.0372377:in 
NET_RECEIVE@t=3028.4: w=0.01: firingrate=0: A=0: B=3.97929e-43: factor=1.05537 scalefactor=4.0284:in NET_RECEIVE@t=3028.4: A=0.0425146: B=0.0425146:in 
NET_RECEIVE@t=3528.4: w=0.01: firingrate=0: A=0: B=4.54318e-43: factor=1.05537 scalefactor=4.5284:in NET_RECEIVE@t=3528.4: A=0.0477914: B=0.0477914:in 
NET_RECEIVE@t=4028.4: w=0.01: firingrate=0: A=0: B=5.10708e-43: factor=1.05537 scalefactor=5.0284:in NET_RECEIVE@t=4028.4: A=0.0530683: B=0.0530683:in 
NET_RECEIVE@t=4528.4: w=0.01: firingrate=0: A=0: B=5.67097e-43: factor=1.05537 scalefactor=5.5284:in NET_RECEIVE@t=4528.4: A=0.0583451: B=0.0583451:in 
NET_RECEIVE@t=5028.4: w=0.01: firingrate=0: A=0: B=6.23487e-43: factor=1.05537 scalefactor=6.0284:in NET_RECEIVE@t=5028.4: A=0.063622: B=0.063622:in 
NET_RECEIVE@t=5528.4: w=0.01: firingrate=0: A=0: B=6.79876e-43: factor=1.05537 scalefactor=6.5284:in NET_RECEIVE@t=5528.4: A=0.0688988: B=0.0688988:in 
NET_RECEIVE@t=6028.4: w=0.01: firingrate=0: A=0: B=7.36265e-43: factor=1.05537 scalefactor=7.0284:in NET_RECEIVE@t=6028.4: A=0.0741757: B=0.0741757:in 
NET_RECEIVE@t=6528.4: w=0.01: firingrate=0: A=0: B=7.92655e-43: factor=1.05537 scalefactor=7.5284:in 
NET_RECEIVE@t=6528.4: A=0.0794526: B=0.0794526:in 
NET_RECEIVE@t=7028.4: w=0.01: firingrate=0: A=0: B=8.49044e-43: factor=1.05537 scalefactor=8.0284:in NET_RECEIVE@t=7028.4: A=0.0847294: B=0.0847294:in 
NET_RECEIVE@t=7528.4: w=0.01: firingrate=0: A=0: B=9.05434e-43: factor=1.05537 scalefactor=8.5284:in NET_RECEIVE@t=7528.4: A=0.0900063: B=0.0900063:in 
NET_RECEIVE@t=8028.4: w=0.01: firingrate=0: A=0: B=9.61823e-43: factor=1.05537 scalefactor=9.0284:in NET_RECEIVE@t=8028.4: A=0.0952831: B=0.0952831:in 
NET_RECEIVE@t=8528.4: w=0.01: firingrate=0: A=0: B=1.01821e-42: factor=1.05537 scalefactor=9.5284:in NET_RECEIVE@t=8528.4: A=0.10056: B=0.10056:in 
NET_RECEIVE@t=9028.4: w=0.01: firingrate=0: A=0: B=1.0746e-42: factor=1.05537 scalefactor=10.0284:in NET_RECEIVE@t=9028.4: A=0.105837: B=0.105837:in 
NET_RECEIVE@t=9528.4: w=0.01: firingrate=0: A=0: B=1.13099e-42: factor=1.05537 scalefactor=10.5284:in NET_RECEIVE@t=9528.4: A=0.111114: B=0.111114

g = B-A

A is 0 whenever a spike is received. B is a very small value inclreasing with spikes.
so based on this, g should be 0 at each time step.
still dont understand

print with NET_RECEIVE and state:

before a spike is received
in state @t=0.2: A=0: B=0: firingrate:0 scalefactor:1.0002
in state @t=0.4: A=0: B=0: firingrate:0 scalefactor:1.0004
in state @t=0.6: A=0: B=0: firingrate:0 scalefactor:1.0006
in state @t=0.8: A=0: B=0: firingrate:0 scalefactor:1.0008
in state @t=1: A=0: B=0: firingrate:0 scalefactor:1.001
in state @t=1.2: A=0: B=0: firingrate:0 scalefactor:1.0012
in state @t=1.4: A=0: B=0: firingrate:0 scalefactor:1.0014
in state @t=1.6: A=0: B=0: firingrate:0 scalefactor:1.0016
in state @t=1.8: A=0: B=0: firingrate:0 scalefactor:1.0018
in state @t=2: A=0: B=0: firingrate:0 scalefactor:1.002
in state @t=2.2: A=0: B=0: firingrate:0 scalefactor:1.0022
in state @t=2.4: A=0: B=0: firingrate:0 scalefactor:1.0024
in state @t=2.6: A=0: B=0: firingrate:0 scalefactor:1.0026
in state @t=2.8: A=0: B=0: firingrate:0 scalefactor:1.0028
in state @t=3: A=0: B=0: firingrate:0 scalefactor:1.003
in state @t=3.2: A=0: B=0: firingrate:0 scalefactor:1.0032
in state @t=3.4: A=0: B=0: firingrate:0 scalefactor:1.0034
in state @t=3.6: A=0: B=0: firingrate:0 scalefactor:1.0036
in state @t=3.8: A=0: B=0: firingrate:0 scalefactor:1.0038
in state @t=4: A=0: B=0: firingrate:0 scalefactor:1.004
in state @t=4.2: A=0: B=0: firingrate:0 scalefactor:1.0042
in state @t=4.4: A=0: B=0: firingrate:0 scalefactor:1.0044
in state @t=4.6: A=0: B=0: firingrate:0 scalefactor:1.0046
in state @t=4.8: A=0: B=0: firingrate:0 scalefactor:1.0048
in state @t=5: A=0: B=0: firingrate:0 scalefactor:1.005
in state @t=5.2: A=0: B=0: firingrate:0 scalefactor:1.0052
in state @t=5.4: A=0: B=0: firingrate:0 scalefactor:1.0054
in state @t=5.6: A=0: B=0: firingrate:0 scalefactor:1.0056
in state @t=5.8: A=0: B=0: firingrate:0 scalefactor:1.0058
in state @t=6: A=0: B=0: firingrate:0 scalefactor:1.006
in state @t=6.2: A=0: B=0: firingrate:0 scalefactor:1.0062
in state @t=6.4: A=0: B=0: firingrate:0 scalefactor:1.0064
in NET_RECEIVE@t=6.4: w=0.01: firingrate=0: A=0: B=0: factor=1.05537 scalefactor=1.0064:
in NET_RECEIVE@t=6.4: A=0.0106213: B=0.0106213:
in state @t=6.6: A=0.000194535: B=0.0102279: firingrate:0 scalefactor:1.0066
in state @t=6.8: A=3.56303e-06: B=0.00984915: firingrate:0 scalefactor:1.0068
in state @t=7: A=6.52592e-08: B=0.00948441: firingrate:0 scalefactor:1.007
in state @t=7.2: A=1.19526e-09: B=0.00913318: firingrate:0 scalefactor:1.0072
in state @t=7.4: A=2.1892e-11: B=0.00879495: firingrate:0 scalefactor:1.0074
in state @t=7.6: A=4.00967e-13: B=0.00846925: firingrate:0 scalefactor:1.0076
...... scalefactor is increasing by 0.0002
...... A and B increased same fraction when a spike is received. 
...... However, A decays very fast whereas B decays much slower at each time step ----> where did that happen? and which parameters are controling the decay ('tau1':0.05,'tau2':5.3--->these are the parameters defining the AMPA properties).
...... this faster vs slower decay is the reason why A is 0 and B is a very small value when next spike is received.

--- SO NEED TO ASSIGN FIRING RATE TO THE MECHANISM.
-assign firing rate using the following:
sim.net.modifySynMechs({'conds':{'label':'AMPA','sec':'soma'}, 'cellConds':{'pop':'EM'},'firingrate':2})
--firingrate needs to be calculated and fed back here.
--ratedectau should be large enough (using 1000ms for now) otherwise when the next spike arrives, synapse already forgets about the activity of the neuron.



sim.net.cells[0].secs['soma']['hObj'](0.5).v

---DEBUGGING OPTIC FLOW:
-
from netpyne import specs, sim
from neuron import h
import numpy as np
import random
from conf import dconf # configuration dictionary
import pandas as pd
import pickle
from collections import OrderedDict
from connUtils import *
from matplotlib import pyplot as plt
import os
import anim
from matplotlib import animation
from aigame import AIGame
sim.AIGame = AIGame()
rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[3], epCount = 0)
rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[3], epCount = 0)
rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[3], epCount = 0)
rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[3], epCount = 0)
rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[3], epCount = 0)
rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[4], epCount = 0)
sim.AIGame.dFiringRates # to see the firing rates of 8 different populations
sim.AIGame.ldflow[-1]['ang'] # to see the angle computed for object motion

fig = plt.figure(figsize=(8,4))
gs = fig.add_gridspec(1,2)
f_ax = []
f_ax.append(fig.add_subplot(gs[0,0])) #for 5-image input - 0
f_ax.append(fig.add_subplot(gs[0,1])) #for single image  - 1
cbaxes = fig.add_axes([0.92, 0.3, 0.01, 0.5])
f_ax[0].imshow(np.add(sim.AIGame.FullImages[-1],sim.AIGame.FullImages[-2]))
fa = f_ax[1].imshow(sim.AIGame.ldflow[-1]['ang'],vmin=0, vmax=359, cmap='Dark2')
c1 = plt.colorbar(fa,cax = cbaxes)
c1.set_ticks([22,67,112,157,202,247,292,337])
c1.set_ticklabels(['E','NE','N','NW','W','SW','S','SE'])
plt.show()

**I think it will be better to use object tracking to compute direction of motion.
**some example codes are discussed here:
https://www.learnopencv.com/multitracker-multiple-object-tracking-using-opencv-c-python/
https://gist.github.com/adioshun/72106c82674fd6cd7b06fe9105c2ab86

**Use K-MEAN CLUSTERING TO DETECT OBJECTS


***INPUTS
1. Input data or Image for CLUSTERING
2. number of clusters required at the end.
3. Critera:
  cv2.TERM_CRITERIA_EPS --stop the algorithm if specified accuracy (epsilon) is reached.
  cv2.TERM_CRITERIA_MAX_ITER --stop the algorithm after specified number of iterations (max_iter)
  cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER --stop when any of the above condition is met.
  max_iter = 10
  epsilon = 1.0
4. attempts = 10 ---- flag to specify the number of times the algorithm is executed using different initial labeling. the algorithm ruturns the labels that yield the best compactness. This compactness is returned as output.
5. cv2.KMEANS_RANDOM_CENTERS
***outputs
1. compactness: sum of squared distance from each point to their corresponding centers.
2. labels: this is the label array where ach element marked '0','1' and so on depending on number of clusters
3. centers: array of centers of clusters.


***TRY FOLLOWING CODE TO TEST OBJECTS
I = sim.AIGame.FullImages[-1]
inds = np.where(I>np.min(I))
Z = np.transpose(np.array(inds))
# convert to np.float32
Z = np.float32(Z)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 5, 1.0)
ret,label,center=cv2.kmeans(Z,3,None,criteria,5,cv2.KMEANS_RANDOM_CENTERS)
A = Z[label.ravel()==0]
B = Z[label.ravel()==1]
C = Z[label.ravel()==2]
plt.scatter(A[:,1],A[:,0],c='b')
plt.scatter(B[:,1],B[:,0],c = 'r')
plt.scatter(C[:,1],C[:,0],c = 'g')

o1_x = np.min(A[0])
o1_w = np.max(A[0])-np.min(A[0])
o1_y = np.min(A[1])
o1_h = np.max(A[1])-np.min(A[1])

o2_x = np.min(B[0])
o2_w = np.max(B[0])-np.min(B[0])
o2_y = np.min(B[1])
o2_h = np.max(B[1])-np.min(B[1])

o3_x = np.min(C[0])
o3_w = np.max(C[0])-np.min(C[0])
o3_y = np.min(C[1])
o3_h = np.max(C[1])-np.min(C[1])



--->This was complicated way to do.

** sam suggested much straight forward way of doing this.

mask = im > thresh
from scipy import ndimage
labelim, nlabels = ndimage.label(mask)
  return labelim, nlabels

check details here: https://scipy-lectures.org/intro/scipy/auto_examples/plot_connect_measurements.html

*20may11
**continue with motion direction using object identification and then object racking.
I is a grayscale image with an instance (observation) of aigame 'Pong'.
mask = I > np.min(I)
from scipy import ndimage
labelim, nlabels = ndimage.label(mask)
each pixel in labelim contains labels of the object it belongs to.
>>> np.unique(labelim)
array([0, 1, 2, 3], dtype=int32) ----here 0 is for background and then there are 3 objects labeled 1,2 and 3.

o1 = ndimage.find_objects(labelim==1)
o2 = ndimage.find_objects(labelim==2)
o3 = ndimage.find_objects(labelim==3)

>>> o1
[(slice(0, 6, None), slice(140, 144, None))]
>>> o2
[(slice(115, 131, None), slice(16, 20, None))]
>>> o3
[(slice(115, 119, None), slice(44, 46, None))]

to get a bounding box
x1_o1 = o1[0][0].start
x2_o1 = o1[0][0].stop
y1_o1 = o1[0][1].start
y2_o1 = o1[0][1].stop

# use object tracking code as an example: Code i used to test the tracking is presented below this code.

# initialize a dictionary that maps strings to their corresponding
# OpenCV object tracker implementations
OPENCV_OBJECT_TRACKERS = {
	"csrt": cv2.TrackerCSRT_create,
	"kcf": cv2.TrackerKCF_create,
	"boosting": cv2.TrackerBoosting_create,
	"mil": cv2.TrackerMIL_create,
	"tld": cv2.TrackerTLD_create,
	"medianflow": cv2.TrackerMedianFlow_create,
	"mosse": cv2.TrackerMOSSE_create
}
# KCF: Fast and accurate
# CSRT: More accurate than KCF but slower
# MOSSE: Extremely fast but not as accurate as either KCF or CSRT

# initialize OpenCV's special multi-object tracker
trackers = cv2.MultiTracker_create()
# loop over frames from the video stream
for _ in range(100):
	# grab the current frame, then handle if we are using a
	# VideoStream or VideoCapture object
  rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[4], epCount = 0)
  frame = sim.AIGame.FullImages[-1]
  # grab the updated bounding box coordinates (if any) for each
  # object that is being tracked
  (success, boxes) = trackers.update(frame)
  # loop over the bounding boxes and draw then on the frame
  for box in boxes:
	  (x, y, w, h) = [int(v) for v in box]
	  cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
# create a new object tracker for the bounding box and add it
# to our multi-object tracker

box = [x1_o1, y1_o1, x2_o1-x1_o1, y2_o1, y1_o1]

x1_o1 = o1[0][0].start
x2_o1 = o1[0][0].stop
y1_o1 = o1[0][1].start
y2_o1 = o1[0][1].stop
tracker = OPENCV_OBJECT_TRACKERS[args["moose"]]()
trackers.add(tracker, frame, box)


###################################################
from netpyne import specs, sim
from neuron import h
import numpy as np
import random
from conf import dconf # configuration dictionary
import pandas as pd
import pickle
from collections import OrderedDict
from connUtils import *
from matplotlib import pyplot as plt
import os
import anim
from matplotlib import animation
from aigame import AIGame
sim.AIGame = AIGame()
for _ in range(30):
  cact = random.randint(3,4)
  rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[cact], epCount = 0)
import cv2
# object detection and finding bounding boxes
frame = sim.AIGame.FullImages[-1]
mask = frame > np.min(frame)
from scipy import ndimage
labelim, nlabels = ndimage.label(mask)
# each pixel in labelim contains labels of the object it belongs to.
o1 = ndimage.find_objects(labelim==1)
o2 = ndimage.find_objects(labelim==2)
o3 = ndimage.find_objects(labelim==3)

# to get a bounding box
x1_o1 = o1[0][0].start
x2_o1 = o1[0][0].stop
y1_o1 = o1[0][1].start
y2_o1 = o1[0][1].stop

x1_o2 = o2[0][0].start
x2_o2 = o2[0][0].stop
y1_o2 = o2[0][1].start
y2_o2 = o2[0][1].stop

x1_o3 = o3[0][0].start
x2_o3 = o3[0][0].stop
y1_o3 = o3[0][1].start
y2_o3 = o3[0][1].stop

bbox1 = (x1_o1, y1_o1, x2_o1-x1_o1, y2_o1-y1_o1)
bbox2 = (x1_o2, y1_o2, x2_o2-x1_o2, y2_o2-y1_o2)
bbox3 = (x1_o3, y1_o3, x2_o3-x1_o3, y2_o3-y1_o3)

frame = np.ascontiguousarray(frame, dtype=np.uint8)
cv2.rectangle(frame, (y1_o1,x1_o1), (y2_o1,x2_o1), (0, 255, 0),1)
cv2.rectangle(frame, (y1_o2,x1_o2), (y2_o2,x2_o2), (255, 0, 0),1)
cv2.rectangle(frame, (y1_o3,x1_o3), (y2_o3,x2_o3), (0, 0, 255),1)
plt.imshow(frame)
plt.show()

# initialize OpenCV's special multi-object tracker
tracker = cv2.TrackerMIL_create()
bbox = ()
# grab the updated bounding box coordinates (if any) for each object that is being tracked
ret, bbox = tracker.update(frame) # probably dont need this
bbox = (x1_o1, y1_o1, x2_o1-x1_o1, y2_o1-y1_o1)
tracker = cv2.TrackerMIL_create()
tracker.init(frame, bbox)
steps = 0
cact = 3
while steps<10:
  if (steps/10)==int((steps/10)):
    if cact==3: 
      cact = 4
    else: 
      cact = 3
  rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[cact], epCount = 0)
  frame = sim.AIGame.FullImages[-1]
  bbox1 = bbox
  # tracker.init(frame, bbox)
  frame = np.ascontiguousarray(frame, dtype=np.uint8)
  ret, bbox = tracker.update(frame)
  steps = steps+1
  # (x, y, w, h) = [int(v) for v in bbox1] # mark previous frame 
 	# cv2.rectangle(frame, (y, x), (y + h, x + w), (0, 255, 0), 2)
  (x, y, w, h) = [int(v) for v in bbox] # mark tracked and updated frame
	cv2.rectangle(frame, (y, x), (y + h, x + w), (0, 255, 0), 2)
  cv2.imshow("frame",frame)
  #plt.show()

########################################################################

bug in KCF tracker: https://github.com/opencv/opencv_contrib/issues/640 ---- spent lot of time thinking that i was doing something wrong but found that there was a bug in python version of this tracker.

trackers.add(tracker, frame, box)




#Try other method ----problem with this method was that i could not install dlib to test the code below.
code here: https://www.pyimagesearch.com/2018/10/22/object-tracking-with-dlib/

from netpyne import specs, sim
from neuron import h
import numpy as np
import random
from conf import dconf # configuration dictionary
import pandas as pd
import pickle
from collections import OrderedDict
from connUtils import *
from matplotlib import pyplot as plt
import os
import anim
from matplotlib import animation
from aigame import AIGame
sim.AIGame = AIGame()
rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[3], epCount = 0)
import dlib
import cv2
frame = sim.AIGame.FullImages[-1]
mask = frame > np.min(frame)
from scipy import ndimage
labelim, nlabels = ndimage.label(mask)
# each pixel in labelim contains labels of the object it belongs to.
o1 = ndimage.find_objects(labelim==1)
o2 = ndimage.find_objects(labelim==2)
o3 = ndimage.find_objects(labelim==3)
# to get a bounding box
x1_o1 = o1[0][0].start
x2_o1 = o1[0][0].stop
y1_o1 = o1[0][1].start
y2_o1 = o1[0][1].stop
# compute the (x, y)-coordinates of the bounding box for the object
startX = o1[0][0].start
startY = o1[0][1].start
endX = o1[0][0].stop
endY = o1[0][1].stop
# construct a dlib rectangle object from the bounding box coordinates and then start the dlib correlation 
# tracker
tracker = dlib.correlation_tracker()
rect = dlib.rectangle(startX, startY, endX, endY)
tracker.start_track(frame, rect)
# draw the bounding box and text for the object
cv2.rectangle(frame, (startX, startY), (endX, endY),(0, 255, 0), 2)
steps = 0
cact = 3
while steps<10:
  if (steps/10)==int((steps/10)):
    if cact==3: 
      cact = 4
    else: 
      cact = 3
  rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = sim.AIGame.playGame(actions=[cact], epCount = 0)
  frame = sim.AIGame.FullImages[-1]
	tracker.update(frame)
	pos = tracker.get_position()
	# unpack the position object
	startX = int(pos.left())
	startY = int(pos.top())
	endX = int(pos.right())
	endY = int(pos.bottom())
	# draw the bounding box from the correlation object tracker
	cv2.rectangle(frame, (startX, startY), (endX, endY),(0, 255, 0), 2)
  plt.imshow(frame)
  plt.show()


frame = sim.AIGame.FullImages[-1]
bbox1 = bbox
# tracker.init(frame, bbox)
frame = np.ascontiguousarray(frame, dtype=np.uint8)
ret, bbox = tracker.update(frame)
(x, y, w, h) = [int(v) for v in bbox] # mark tracked and updated frame
cv2.rectangle(frame, (y,x), (y + h, x + w), (0, 255, 0), 2)
plt.imshow(frame)
plt.show()


*2020may13

**have already spent 2.5 days to figure out which object tracking algorithm will work best. The goal was to use such algorithm to trck objects in any game and use that to find motion directions.
**Most of the object trackers in cv2 didn't work. Even on internet, i found someone mentioning 'TrackerKCF_create' in python not working properly. Only one algorithm 'TrackerMIL_create' gave me some output but that output was incorrect too.
**I found another object tracker which seemed very simple and straight forward. It was using dlib. I could not install on my machine to try. May be I could try that on 'neurosim' but will leave that for now.
**Probably should use simple tracking algorithm which requires object detection for every single image frame:
https://www.pyimagesearch.com/2018/07/23/simple-object-tracking-with-opencv/
*** STEP1 : Find bounding box coordinates and compute centroids
*** STEP2 : Find euclidean distance between new bounding boxes and existing objects.
*** STEP3 : Update x,y coordinates of existing objects.
*** STEP4 : Register new objects.
*** STEP5 : Deregister old objects (the objects which no longer exist). 

****This method is called centroid tracking.

from scipy.spatial import distance as dist
from collections import OrderedDict
import numpy as np

class CentroidTracker():
	def __init__(self, maxDisappeared=50):
		# initialize the next unique object ID along with two ordered
		# dictionaries used to keep track of mapping a given object
		# ID to its centroid and number of consecutive frames it has
		# been marked as "disappeared", respectively
		self.nextObjectID = 0
		self.objects = OrderedDict()
		self.disappeared = OrderedDict()
		# store the number of maximum consecutive frames a given
		# object is allowed to be marked as "disappeared" until we
		# need to deregister the object from tracking
		self.maxDisappeared = maxDisappeared
  def register(self, centroid):
		# when registering an object we use the next available object
		# ID to store the centroid
		self.objects[self.nextObjectID] = centroid
		self.disappeared[self.nextObjectID] = 0
		self.nextObjectID += 1
  def deregister(self, objectID):
		# to deregister an object ID we delete the object ID from
		# both of our respective dictionaries
		del self.objects[objectID]
		del self.disappeared[objectID]
  def update(self, rects):
		# check to see if the list of input bounding box rectangles
		# is empty
		if len(rects) == 0:
			# loop over any existing tracked objects and mark them
			# as disappeared
			for objectID in list(self.disappeared.keys()):
				self.disappeared[objectID] += 1
				# if we have reached a maximum number of consecutive
				# frames where a given object has been marked as
				# missing, deregister it
				if self.disappeared[objectID] > self.maxDisappeared:
					self.deregister(objectID)
			# return early as there are no centroids or tracking info
			# to update
			return self.objects
    inputCentroids = np.zeros((len(rects), 2), dtype="int")
		# loop over the bounding box rectangles
		for (i, (startX, startY, endX, endY)) in enumerate(rects):
			# use the bounding box coordinates to derive the centroid
			cX = int((startX + endX) / 2.0)
			cY = int((startY + endY) / 2.0)
			inputCentroids[i] = (cX, cY)
	  # if we are currently not tracking any objects take the input
		# centroids and register each of them
		if len(self.objects) == 0:
			for i in range(0, len(inputCentroids)):
				self.register(inputCentroids[i])
    # otherwise, are are currently tracking objects so we need to
		# try to match the input centroids to existing object
		# centroids
		else:
			# grab the set of object IDs and corresponding centroids
			objectIDs = list(self.objects.keys())
			objectCentroids = list(self.objects.values())
			# compute the distance between each pair of object
			# centroids and input centroids, respectively -- our
			# goal will be to match an input centroid to an existing
			# object centroid
			D = dist.cdist(np.array(objectCentroids), inputCentroids)
			# in order to perform this matching we must (1) find the
			# smallest value in each row and then (2) sort the row
			# indexes based on their minimum values so that the row
			# with the smallest value is at the *front* of the index
			# list
			rows = D.min(axis=1).argsort()
			# next, we perform a similar process on the columns by
			# finding the smallest value in each column and then
			# sorting using the previously computed row index list
			cols = D.argmin(axis=1)[rows]
      # in order to determine if we need to update, register,
			# or deregister an object we need to keep track of which
			# of the rows and column indexes we have already examined
			usedRows = set()
			usedCols = set()
			# loop over the combination of the (row, column) index
			# tuples
			for (row, col) in zip(rows, cols):
				# if we have already examined either the row or
				# column value before, ignore it
				# val
				if row in usedRows or col in usedCols:
					continue
				# otherwise, grab the object ID for the current row,
				# set its new centroid, and reset the disappeared
				# counter
				objectID = objectIDs[row]
				self.objects[objectID] = inputCentroids[col]
				self.disappeared[objectID] = 0
				# indicate that we have examined each of the row and
				# column indexes, respectively
				usedRows.add(row)
				usedCols.add(col)
      # compute both the row and column index we have NOT yet
			# examined
			unusedRows = set(range(0, D.shape[0])).difference(usedRows)
			unusedCols = set(range(0, D.shape[1])).difference(usedCols)
      # in the event that the number of object centroids is
			# equal or greater than the number of input centroids
			# we need to check and see if some of these objects have
			# potentially disappeared
			if D.shape[0] >= D.shape[1]:
				# loop over the unused row indexes
				for row in unusedRows:
					# grab the object ID for the corresponding row
					# index and increment the disappeared counter
					objectID = objectIDs[row]
					self.disappeared[objectID] += 1
					# check to see if the number of consecutive
					# frames the object has been marked "disappeared"
					# for warrants deregistering the object
					if self.disappeared[objectID] > self.maxDisappeared:
						self.deregister(objectID)
      # otherwise, if the number of input centroids is greater
			# than the number of existing object centroids we need to
			# register each new input centroid as a trackable object
			else:
				for col in unusedCols:
					self.register(inputCentroids[col])
		# return the set of trackable objects
		return self.objects
    

***for testing the script "centroidtracker.py"

# import the necessary packages
from centroidtracker import CentroidTracker
import numpy as np
import cv2
import random
from matplotlib import pyplot as plt
from scipy import ndimage
from aigame import AIGame

AIGame = AIGame()
rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = AIGame.playGame(actions=[3], epCount = 0)

def getObjectsBoundingBoxes(frame):
  mask = frame > np.min(frame)
  labelim, nlabels = ndimage.label(mask)
  # each pixel in labelim contains labels of the object it belongs to.
  rects = []
  for labels in range(nlabels):
    clabel = labels+1
    o = ndimage.find_objects(labelim==clabel)
    # to get a bounding box
    # compute the (x, y)-coordinates of the bounding box for the object
    startX = o[0][0].start
    startY = o[0][1].start
    endX = o[0][0].stop
    endY = o[0][1].stop
    box = np.array([startX, startY, endX, endY])
    rects.append(box.astype("int"))
  return rects

# initialize our centroid tracker and frame dimensions
ct = CentroidTracker()
while True:
  caction = random.randint(3,4)
	# read the next frame from the AIGame
  rewards, epCount, proposed_actions, total_hits, Racket_pos, Ball_pos = AIGame.playGame(actions=[caction], epCount = 0)
  frame = AIGame.FullImages[-1]
	# Detect the objects, and initialize the list of
	# bounding box rectangles
  rects = getObjectsBoundingBoxes(frame)
  frame = np.ascontiguousarray(frame, dtype=np.uint8)
  # loop over rects
	for i in range(np.shape(rects)[0]):
		startX = rects[i][0]
    startY = rects[i][1]
    endX = rects[i][2]
    endY = rects[i][3]
		cv2.rectangle(frame, (startY, startX), (endY, endX),(0, 255, 0), 1)
  # update our centroid tracker using the computed set of bounding
	# box rectangles
	objects = ct.update(rects)
	# loop over the tracked objects
	for (objectID, centroid) in objects.items():
		# draw both the ID of the object and the centroid of the
		# object on the output frame
		text = "ID {}".format(objectID)
		cv2.putText(frame, text, (centroid[0] - 10, centroid[1] - 10),
			cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
		cv2.circle(frame, (centroid[0], centroid[1]), 4, (0, 255, 0), -1)
	# show the output frame
	cv2.imshow("Frame", frame)
	key = cv2.waitKey(1) & 0xFF
	# if the `q` key was pressed, break from the loop
	if key == ord("q"):
		break
# do a bit of cleanup
cv2.destroyAllWindows()


*20May14
**Before I resolve issue dealing with overlapped objects in centroidtracking.py... i will look into hitBall tracking in the aigame.py


I will need the following code to test it.

import numpy as np
import cv2
import random
from matplotlib import pyplot as plt
from scipy import ndimage
from aigame import AIGame
AIGame = AIGame()


courtYRng = (34, 194) # court y range
courtXRng = (20, 140) # court x range
last_obs = []
last_ball_dir = 0

def findobj (img, xrng, yrng):
  # find an object's x, y position in the image (assumes bright object on dark background)
  subimg = img[yrng[0]:yrng[1],xrng[0]:xrng[1],:]
  sIC = np.sum(subimg,2) #assuming the color of object is uniform, add values or r,g,b to get a single value      
  pixelVal = np.amax(sIC) #find the pixel value representing object assuming a black background
  sIC[sIC<pixelVal]=0 #make binary image
  Obj_inds = []
  for i in range(sIC.shape[0]):
    for j in range(sIC.shape[1]):
      if sIC[i,j]>0:
        Obj_inds.append([i,j])
  if sIC.shape[0]*sIC.shape[1]==np.shape(Obj_inds)[0]: #if there is no object in the subimage
    ypos = -1
    xpos = -1
  else:
    ypos = np.median(Obj_inds,0)[0] #y position of the center of mass of the object
    xpos = np.median(Obj_inds,0)[1] #x position of the center of mass of the object
  return xpos, ypos

if np.shape(last_obs)[0]>0: #if last_obs is not empty              
  xpos_Ball, ypos_Ball = findobj(last_obs, courtXRng, courtYRng)
observation, reward, done, info = env.step(caction)
#find position of ball after action
xpos_Ball2, ypos_Ball2 = findobj(observation, courtXRng, courtYRng)        
if xpos_Ball>0 and xpos_Ball2>0:
  if xpos_Ball2-xpos_Ball>0:
    ball_moves_towards_racket = 1 #use proposed action for reward only when the ball moves towards the racket
    current_ball_dir = 1 
  elif xpos_Ball2-xpos_Ball<0:
    ball_moves_towards_racket = 0
    current_ball_dir = -1
  else:
    ball_moves_towards_racket = 0
    current_ball_dir = 0 #direction can't be determinted  prob. because the ball didn't move in x dir.
else:
  ball_moves_towards_racket = 0
  current_ball_dir = 0 #direction can't be determined because either current or last position of the ball is outside the court

ball_hits_racket = 0
if last_ball_dir==0 or current_ball_dir==0: # no way to find out if the ball hit the racket
  ball_hits_racket = 0 #therefore assumed that ball didn't hit the racket--weak/bad assumption
else:
  if last_ball_dir==1 and current_ball_dir==-1 and reward==0:
    #if the ball was moving towards the racket and now its moving away from racket and didnt lose
    ball_hits_racket = 1
last_ball_dir = current_ball_dir

**OUTPUT of testing script:

1 instance:
np.shape(last_obs)[0]: 210
xpos_Ball: 115.5
xpos_Ball: 115.5
xpos_Ball2: 118.5
reward:  0.0
last ball direction: 1
current ball direction: 1
0  <--- hitBall signal
4
np.shape(last_obs)[0]: 210
xpos_Ball: 118.5
xpos_Ball: 118.5
xpos_Ball2: 115.5
reward:  0.0
last ball direction: 1
current ball direction: -1
1   <--- hitBall signal

2nd instance:
np.shape(last_obs)[0]: 210
xpos_Ball: 115.5
xpos_Ball: 115.5
xpos_Ball2: 118.5
reward:  0.0
last ball direction: 1
current ball direction: 1
0   <--- hitBall signal
3
np.shape(last_obs)[0]: 210
xpos_Ball: 118.5
xpos_Ball: 118.5
xpos_Ball2: 117.5
reward:  0.0
last ball direction: 1
current ball direction: -1
1   <--- hitBall signal


an instance where the algorithm didn't work-----


np.shape(last_obs)[0]: 210
xpos_Ball: 114.5
xpos_Ball: 114.5
xpos_Ball2: 117.5
reward:  0.0
last ball direction: 1
current ball direction: 1
0
4
np.shape(last_obs)[0]: 210
xpos_Ball: 117.5
xpos_Ball: 117.5
xpos_Ball2: 117.5
reward:  0.0
last ball direction: 1
current ball direction: 0
0
4
np.shape(last_obs)[0]: 210
xpos_Ball: 117.5
xpos_Ball: 117.5
xpos_Ball2: 111.5
reward:  0.0
last ball direction: 0
current ball direction: -1
0

***CHANGE CODE IS aigame.py


      if self.last_ball_dir==1 and reward==0:
        # i noticed that sometimesthe ball don't move when it is very close to the racket/edge of the court.
        if current_ball_dir==0 and xpos_Ball2>courtXRng[1]-courtXRng[0]-3: 
          ball_hits_racket = 1 
        elif self.last_ball_dir==1 and current_ball_dir==-1:
          #if the ball was moving towards the racket and now its moving away from racket and didnt lose
          ball_hits_racket = 1
        else: ball_hits_racket = 0
      else: ball_hits_racket = 0




**Looks like its fixed....

np.shape(last_obs)[0]: 210
xpos_Ball: 115.5
xpos_Ball: 115.5
xpos_Ball2: 118.5
reward:  0.0
last ball direction: 1
current ball direction: 1
0
4
np.shape(last_obs)[0]: 210
xpos_Ball: 118.5
xpos_Ball: 118.5
xpos_Ball2: 118.5
reward:  0.0
last ball direction: 1
current ball direction: 0
1   <--- hitBall signal
4
np.shape(last_obs)[0]: 210
xpos_Ball: 118.5
xpos_Ball: 118.5
xpos_Ball2: 112.5
reward:  0.0
last ball direction: 0
current ball direction: -1

** found another problem.... sometimes ball is outside court and still get hit by the racket.


    if current_ball_dir-last_ball_dir<0 and reward==0 and xpos_Ball2>courtXRng[1]-courtXRng[0]-3:
      ball_hits_racket = 1
    elif xpos_Ball==-1 and reward==0 and xpos_Ball2>courtXRng[1]-courtXRng[0]-3:
      ball_hits_racket = 1
** so far works for all tested conditions
** object tracking fixed--- working nicely.....
** displaying object tracking and plotting direction of motion.

** still need to integrate the code in the model.

* 2020may18
** in testCentroidTracking.py, i use FULLImage to compute motion vectors and then downsample matrices with motion vectors to match the number of neurons.
*** This is better to preserve the direction of object motion. Using downsampled image gives less accurate motion directions.
** Part of lack of accuracy seems to be due to downsampling.
** Two options included in sim.json to compute direction flow:
  "DirectionDetectionAlgo":{"CentroidTracker":1,"OpticFlow":0}
** added function in imgutils to get the coordinates of the bounding boxes for non-ovelaping objects.
  -- def getObjectsBoundingBoxes(frame):
** added function in imgutils to get the flow of motion of all existing objects. New objects or disappeaered objects are ignored. 
  -- def getObjectMotionDirection(objects, last_objects, rects, dims):
** initialize the CentroidTracker and related objects in init()
    if dconf['DirectionDetectionAlgo']['CentroidTracker']==1:
      self.ct = CentroidTracker()
      self.objects = OrderedDict() # objects detected in current frame
      self.last_objects = OrderedDict() # objects detected in previous frame
** added function to compute angles of motion.
  -- computeAllObjectsMotionDirections(self, UseFull=True)

** Debugging aigame.....
*** need to explicitly import deepcopy from copy
*** import cv2
*** adjusted plotting in actmap.py because when using CentroidTracking 'flow' is used instead of 'thflow'. Also 'flow' has a different data structure.

*** i think it might be better to change the structure of flow and also save thflow.

    flow = np.zeros(shape=(np.shape(cimage)[0],np.shape(cimage)[1],2))
    flow[:,:,0] = dirX
    flow[:,:,1] = dirY
    goodInds = np.zeros(shape=(np.shape(cimage)[0],np.shape(cimage)[1],2))
    self.ldflow.append({'flow':flow,'mag':mag,'ang':ang,'goodInds':goodInds,'thang':ang,'thflow':flow})

*** add zeros when the last objects is empty.

** More debugging centroid tracking in aigame
*** always compute motion flow using FullImages
*** if dirSensitiveNeuronDim!= cimage.shape[0], resize the direction vectors, angles etc.
*** to match the format of optical flow. keep the flow inverted in y direction.

probably need more testing.

*** X and Y were replaced. Fixed now.
*** too much activity for 0 degrees  i.e. E neurons.
---> solution: ang[mag == 0] = 'nan'
*** looks like 'nan' doesnt work. so use -100.
*** use centroidtracker with both FullImage and ReducedImage.
*** Run for 100 sec.
*** seems too low activity. try increasing the probability of RL connections.


or prety in ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW','EV1DSW', 'EV1DS','EV1DSE', 'EV4', 'EMT']:
  for poty in EMotorPops:
    for strty,synmech,weight in zip(['','n'],['AMPA', 'NMDA'],[dconf['net']['EEMWghtAM']*cfg.EEGain, dconf['net']['EEMWghtNM']*cfg.EEGain]):
      k = strty+prety+'->'+strty+poty
      netParams.connParams[k] = {
        'preConds': {'pop': prety},
        'postConds': {'pop': poty},
        'convergence': prob2conv(0.1, dnumc[prety]), #using 0.2 instead of 0.1 dated May18,2020
        'weight': weight,
        'delay': 2,
        'synMech': synmech,
        'sec':'dend', 'loc':0.5
      }
      if dSTDPparamsRL[synmech]['RLon']: # only turn on plasticity when specified to do so
        netParams.connParams[k]['plast'] = {'mech': 'STDP', 'params': dSTDPparamsRL[synmech]}



        Change prob2conv(0.1, dnumc[prety]) to prob2conv(2*0.1, dnumc[prety])

and set doplot=1, doquit=0

*** still racket not moving----probably no activity in motor neurons.

"EEMWghtAM":0.000075,"EEMWghtNM":0.0000075 increase 10 times to "EEMWghtAM":0.00075,"EEMWghtNM":0.000075

raster saves as: 20may18_ZN_B_100sec_raster.png
saving actmap movie .....

** Try running simulation with same parameters but targeted RL in 20may18_ZN_C_....

*20may20
**broadening the flow of each object.... using FlowWidth
*** In addition to assigning direction vectors to the object pixels, now i expand direction vector assignment to additional FlowWidth pixels in each dimension. 
**** e.g. if FlowWith is 8, the direction vectors are assigned to 4 pixels berfor startX of the object and 4 pixels after the endX of the object, similarly 4 pixels before startY of the object and 4 pixels after the endY of the object. 
changes in imgutils.py 
      for i in range(np.shape(rects)[0]):
        startX = rects[i][0]
        if startX<(FlowWidth/2):
          startX =  0
        else:
          startX = startX-(FlowWidth/2) 
        startY = rects[i][1]
        if startY<(FlowWidth/2):
          startY = 0
        else:
          startY = startY-(FlowWidth/2)
        endX = rects[i][2]
        if endX>dims-(FlowWidth/2):
          endX = dims
        else:
          endX = endX+(FlowWidth/2)
        endY = rects[i][3]
        if endY>dims-(FlowWidth/2):
          endY = dims
        else:
          endY = endY+(FlowWidth/2)

and change in aigame.py
dirX, dirY = getObjectMotionDirection(self.objects, self.last_objects, rects, dims=np.shape(cimage)[0],FlowWidth=8)
*** test directions and network activity in file "20may20_A_"
**** Too high activity in motor cortex (~19 Hz).... very few actions during 10 sec sim.
*** reduce the weights and rerun in file "20may20_B_"
------ "EEMWghtAM":0.0005,"EEMWghtNM":0.00005,"EEMWghtThreshMin":0.0005 ---> "EEMWghtAM":0.0002,"EEMWghtNM":0.00002,"EEMWghtThreshMin":0.0002
**** still high firing rate (~15 Hz)....
*** also change ,"EEMWghtThreshMax":0.005 --> "EEMWghtThreshMax":0.002 in file "20may20_B2_"
**** still high firing rate (~11 Hz) ....
*** change the parameters are below and rerun sim in "20may20_C_"
------ "EEMWghtAM":0.0001,"EEMWghtNM":0.00001,"EEMWghtThreshMin":0.0001, "EEMWghtThreshMax":0.001


** DISCUSSION WITH SAM:

*** Haroon: "one problem i see is: we assume where ever the racket is, up and down action should be generated independently which might be right but it kills the purpose of having different associations built between different motor neurons and sensory neurons coz we are summing up the activity"

*** Sam: "why? if the correct inputs activate the right subpopulation through learning ... isn't that the association?" 

*** Haroon: "not saying that associations are not being built properly saying that the actions are not generated based on associations because spatial element is completely lost"

*** Sam: "spatial element = spatial information provided to M?""

*** Haroon: "spatial element for action not for input. if we assume that a sub pop of motor neurons take action when the ball is on top right quadrant and another subpop take action when the ball is on top bottom quadrant, the associations will result in topologically relevant actions"

*** Sam: "so you're saying M should have topographic layout too"

*** Haroon: "yes for outputs, not for inputs"

*** Sam: "not sure what that means for outputs, since your example was dependent on ball's position , which is input related (?)"

*** Haroon: "for inputs it should be probabilistic or even may be all to all, for outputs we just use a map and say neuron 1-10 decides action when the ball is at one region, 1-10 in both UP and DOWN regions"

*** Sam: "so that is input dependent selection of M subpops"

*** Haroon: "or this doesn’t make any sense? yes. no idea how to make that selection though"

*** Sam: "hoping that learning would allow that selection. is there a way to build it into the architecture in a general way?"

*** Haroon: "no idea how to make that selection though biologically speaking"

*** Sam: "yeah, not sure"

*** Haroon: "but one thing is sure , generating action by comparing pop firing rates is incorrect"

*** Sam: "probably. would spatial layout of M help though?"

*** Haroon: "it could"

*** Sam: "it would mean most of the time most M neurons are silent/irrelevant. possibly..."

*** Sam: "seems worth trying anyway...at least the spatial info would then be provided to M. well, more spatial info. so sg. and could possibly allow some prediction..if ball moving right, activate M neurons in a sequence..."

*** Haroon: "yes and then within that pop, some neurons will learn associations between actions, location and direction"

*** Sam: "sg, guess you should implement that...seems like most major change. good idea"

*** Haroon: "ok… will have more questions/problems/challenges when i start building that up. so stay tuned"

*** Sam: "sg. was also looking at adjusting the weight normalization. to additionally match weights to each M pop ... to avoid any bias in output. but that has drawbacks since specific actions should be preferred"

In personal chat:

*** Sam: "was thinking about some of those questions a few days ago (from notebook): "any E M neuron could receive information from spatially separated locations ...
if no topography, then should have recurrent connectivity in EM neurons with RL synapses ...
topographic arrangement of M neurons might allow better prediction on when to move ... for
example if ball is far away but moving in a certain direction, might want to initiate movement
in advance of the ball getting to the paddle ...
so while there's some spatial information with random connectivity, it's less organized/useful if
receiving random (from spatial perspective) inputs?
if ball in middle of screen moving SE, and paddle is at top right stationary, EM Down should be
activated ... so there should be at least one EM Down neuron that receives strong V1 input at top
right and middle of screen SE neuron ... if there was a topographic arrangement of EM neurons,
would that be possible? not if there are restriction of connectivity across spatially distant
neurons... but having additional recurrent connectivity in EM might still allow that encoding to emerge"

*** Sam: "not sure if useful/understandable"

*** Sam: "this case was why wasn't sure: "if ball in middle of screen moving SE, and paddle is at top right stationary, EM Down should be activated ... so there should be at least one EM Down neuron that receives strong V1 input at top right and middle of screen SE neuron""

*** Sam:is that possible with topography. if need both inputs to know to move down

*** Haroon: seems so---need to think more

*** samn: ic, sure. and if recurrent conn could help. difficult/interesting problem here :slightly_smiling_face:

*** Haroon: yes… it is…. i wonder how motor systems are studied… what kind of topological mapping is there. based on input/output or combined

*** samn: good q. suppose if there's no obvious drawback to topographic setup of M should try it

*** Haroon: i think we both agree here that topological setup would be probably helpful, what needs to be determined is how actions will be generated

*** samn: well, i'm not completely sure

*** Haroon: still pop activity?

*** samn: if it will help. since could be useful for a M neuron to gather info from spatially separated locations in space. e..g that example (ball in middle of screen moving SE and paddle at top right), you might want one M neuron to integrate that info. unless the population of M could do it together somehow. pop activity - another good q

*** Haroon: yeah- recurrent conns will make it hard to guess i think

*** samn: for command output - might it help to have a minimum margin between firing rates to generate an action (to avoid noise),recurrent conns make it harder?,suppose could have topology but also some recurrent connectivity,though at that point why not just high recurrent...not really sure

*** Haroon: if some lingering activity left from last time step, due to recurrency, i guess will depend on the architcture, if we keep it recurrency strictly local then probably not or if inhibition is setup in a way to filter those effects spatially

*** samn: yeah, and that raises whether we want some antag inhib effects, one M pop activated I -> M of another pop ... suppose lot of things to try :slightly_smiling_face:

** test sim using optical flow in file "20may20_D_" - run time: 581 sec
----> the raster is saved as "20may20-D0"
** test sim using centroid tracking in file "20may20_D_" with broader flow and with FullImage - run time: 572.71 sec
----> the raster is saved as "20may20-D"
----> Didnt change the file name, so the results for sim with optical flow got overridden.
*** potential problem in plotting actmap.... i noticed that for 10000 ms sim, actmap was plotted for 9960 ms. i.e. roughly 2 frames are skipped. so probably this is the reason why the firing rates of direction selective neurons dont look aligned to the quiver plot.
**** check aigame.py----FullImages were not saved correctly. always previous image was saved. now saving current image.
** test sim using centroid tracking in file "20may20_E_" --- run time: 1257 s --- quite slow.
*** looks like still one frame off.. also sometimes wierd directionsin quiver plot. Not sure why? because when i run testCentroidTracking no such effect appears.
*** test with optic flow in file "20may20_F_" ---- runtime: 3049 sec
**** flow for first frame was missing----- 
*** In computeMotionFields, append zero-valued arrays for all except ang and thang, where 0 were replaced with -100 to avoid 0 considered as movement towards 0 degrees i.e. E.
*** test sim using optic flow in file "20may22_A_"
**** "EEMWghtAM":0.000025,"EEMWghtNM":0.0000025,"EEMWghtThreshMin":0.000025,"EEMWghtThreshMax":0.000075,"EEMProb":0.3,"EEMRecProb":0.0,"EEMPopNorm":0

*20may27
** Needs to confirm: 1) actmap movie is accurate. 2) direction selective neurons are activated properly in both optic flow and centroid tracking cases.
*** add UseFull in sim configuration: "DirectionDetectionAlgo":{"CentroidTracker":0,"OpticFlow":1,"UseFull":0}, For Optic flow set UseFull = 0
*** test sim (2 sec) using optic flow in file "20may27_A0_"
checking details:
InputImages.shape -- prints -- (100,20,20)
np.shape(ldflow) -- prints -- (100,)
t1 -- prints -- range(0,2000,20)
t2 -- prints -- range(20,2020,20)
np.shape(ldflow[0]['thflow']) -- prints -- (20,20,2).... where ldflow[0]['thflow'][:,:,0] is X component of direction vectors and ldflow[0]['thflow'][:,:,1] is Y component of direction vectors.
-- the racket moves south from timestep 6 to timestep 7 (from top edge of racket at 6.5 to top edge of racket at 7.5)
-- quiver plot at timestep 7 shows correct directions (for most of the pixels)
-- the ball moves south west from timestep 20 to timestep 21. rackets dont move.
-- quiver plot at timestep 21 shows correct directions (for most of the pixels)
-- now check the direcrtion sensitive neurons during that timestep.
-- there seems to be a difference of 2 timesteps in datastructures e.g. dact['EV1DSW'][23,:,:] showed the activity for ldflow[21]['thflow']
---- This doesn't make sense... how is this possible. 
dact['EV1DSW'][0,:,:] has activity between 0-20 ms
ldflow[0]['thflow'] has optical flow recorded at 20 ms.---> This will be used to drive activity between 20-40 ms.
InputImage[0] is recorded at 20 ms.

dact['EV1DSW'][1,:,:] has activity between 20-40 ms ---> This should be associated with ldflow[0]
InputImage[1] is recorded at 40 ms.
ldflow[1]['thflow'] is recorded at 40 ms.   

-- run 100 ms sim in 20may27_A1_


* 20may28
**setting up falcor
---got instructions from sam
** NKI VPN notes
To access the new VPN, go to https://sshvpn.rfmh.org and login with your NKI username and password.
After signing in, there will be links to download the VPN client for your operating system and
well as instructions for connecting.
to access the VPN from outside of NKI use cisco anyconnect and go to https://63.117.203.75
then use this username: sneymotin
and the rfmh live.com password
is there x2go for falcor?
alias snnki ssh -X samn@10.76.253.150
alias nkisftp sftp samn@10.76.253.150
alias falcor ssh -X samn@falcor.rfmh.org
alias falcorsftp sftp samn@falcor.rfmh.org
alias vnc2falcor 'ssh -X -L 5901:localhost:5901 samn@falcor.rfmh.org'
alias vncv 'vncviewer localhost:5901'
to use x2go
x2goclient
make sure to use xfce for falcor

-------
using cisco vpn connect using 63.117.203.75 and nki password
login to falcor ssh -X hanwar@falcor.rfmh.org
change session type to xfce
host is falcor.rfmh.org
login is your username on falcor

copy this in .bashrc

export LD_LIBRARY_PATH="/home/samn/miniconda3/lib"
export SITE="/home/samn/site"
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/samn/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/samn/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/samn/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/samn/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

--- testing sims on falcor
-- ran 2 sec sim with optical flow named 20may27_A0_
-- running 2 sec sim with centroid tracking named 20may27_A1_
-- both sims successful---actmap movies copied to local drive SMARTAgent/gif/ using
scp hanwar@falcor.rfmh.org://home/hanwar/GamesProject/SMARTAgent/gif/* Documents/NKI-modeling/SMARTAgent/gif/
-- run 100 sec sim with optical flow and using these parameters
"EEMWghtAM":0.00005,"EEMWghtNM":0.0000025,"EEMWghtThreshMin":0.00005,"EEMWghtThreshMax":0.0001,"EEMProb":0.3,"EEMRecProb":0.1,"EEMPopNorm":0
save results in file 20may28_A0_
-- run 100 sec sim with centroid tracking and flowwidth of 16 and using these parameters
"EEMWghtAM":0.00005,"EEMWghtNM":0.0000025,"EEMWghtThreshMin":0.00005,"EEMWghtThreshMax":0.0001,"EEMProb":0.3,"EEMRecProb":0.1,"EEMPopNorm":0
save results in file 20may28_A1_

**some  potentially useful articles
1. Learning robust cortico-cortical associations with the basal ganglia: An integrative review.
2. From reinforcement learning models of the basal ganglia to the pathophysiology of psychiatric and neurological disorders.
3. The Basal ganglia : a vertebrate solution to the selection problem.
4. Anticipatory control of movement in a thalamo-cortical curcuit model ---- not exactly what i am looking for but may provide some inspirational ideas.

* 20june02

** EMUP and EMDOWN each population has 400 neurons.
-- I want only 3x3 or 5x5 neurons centered around a neuron that represents the location of the object in the game environment to be active.
-- All other neurons should be inhibited.
-- I hope that this will allow actions based on position and direction of objects in the environment.
-- HOW TO ACHIEVE THIS?

Option 1: Make topological connections between visual and motor cortices.
-- For connections from ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW','EV1DSW', 'EV1DS','EV1DSE'] to ['EMUP', 'EMDOWN'] use
    (400 neurons to 400 neurons with 3x3 overlap.) 
    use blistEV1toEM = connectLayerswithOverlap(NBpreN = dnumc['EV1'], NBpostN = dnumc['EMUP'], overlap_xdir = 3)
-- For connections from ['EV1DN4'] to ['EMUP', 'EMDOWN'] 
    use blistEV4toEM = connectLayerswithOverlapDiv(NBpreN = dnumc['EV4'], NBpostN = dnumc['EMUP'], overlap_xdir = 3)
-- For connections from ['EMT'] to ['EMUP', 'EMDOWN']
    use blistEMTtoEM = connectLayerswithOverlapDiv(NBpreN = dnumc['EMT'], NBpostN = dnumc['EMUP'], overlap_xdir = 5)
-- Use recurrent connections as in case of non-topological architecture.
-- Leave local E->I->E architecture in motor areas same as before.

** ability to choose architecture type from sim.json
"architecurePreMtoM": {"useProbabilistic":1,"useTopological":0}

** start testing topological architecture between preMotor and Motor areas. run 10 sec in "20june02_A_"

-- no activity generated in M, probably too weak connection stengths---> increase weights
"EEMWghtAM":0.00008,"EEMWghtNM":0.0000025 ---> "EEMWghtAM":0.0008,"EEMWghtNM":0.000025
-- run with new weights.
-- still low firing rates--- but the firing rate in motor areas produced movements.

** also change sn.json --- add "architecurePreMtoM": {"useProbabilistic":1,"useTopological":0},

** Using topological architecture between preMotor and Motor areas. run 200 sec sim in "20june02_B_"

run sim on ZN with "EEMRecProb":0.6 in file "20june02_ZN_B_"
-- was not taking any action so i reduced weights again.
-- was not taking any action, so i reverted weights back and change "EEMRecProb":0.4 and rerun.
-- E and I Firing rates of M neurons are high. (23 Hz). 

** play with convergence of E->I ------------- save in file "20june02_C_"

netParams.connParams['EMDOWN->IM'] = {
        'preConds': {'pop': 'EMDOWN'},
        'postConds': {'pop': 'IM'},
        #'probability': 0.125/2.,     
        'convergence': prob2conv(0.125/4, dnumc['EMDOWN']),
        'weight': 0.02 * cfg.EIGain,
        'delay': 2,
        'synMech': 'AMPA', 'sec':'soma', 'loc':0.5}
netParams.connParams['EMUP->IM'] = {
        'preConds': {'pop': 'EMUP'},
        'postConds': {'pop': 'IM'},
        #'probability': 0.125/2.,       
        'convergence': prob2conv(0.125/4, dnumc['EMUP']),
        'weight': 0.02 * cfg.EIGain,
        'delay': 2,
        'synMech': 'AMPA', 'sec':'soma', 'loc':0.5}

-- Firing rate of E and I neurons in this sim is too high: 23Hz. (Raster saved as 'Raster_June2_2020_C.png')
-- to see the connectivity, sam suggested: look at the inputmap functions in simdat.py


TIPS FROM SAM:


Use this to access the activity

python -i simdat.py backupcfg/20jun1_B2_falcor_sim.json
dstr = '20jun2_'; simstr = dconf['sim']['name'] # date and sim string
#
plotFollowBall(actreward,ax=subplot(1,3,1),msz=3); ylim((0,.6))
plotHitMiss(actreward,ax=subplot(1,3,2),msz=3); ylim((0,120));
plotRewards(actreward,ax=subplot(1,3,3),msz=3);
subplot(1,3,1); plot([40e3,80e3,120e3,160e3,200e3,240e3,280e3,320e3,360e3,400e3],[.45,.45,.45,.45,.45,0.45,.45,.45,.45,.45],'bo',markersize=10) # times of weight norm
savefig('gif/'+dstr+simstr+'perf.png')
clf(); drawraster(dspkT,dspkID); xlim((390e3,400e3)); savefig('gif/'+dstr+simstr+'rast.png')
clf(); drawcellVm(simConfig); xlim((390e3,400e3)); savefig('gif/'+dstr+simstr+'Vm.png')


* 20june03

** on june02, I ran sim on ZN with "EEMRecProb":0.4 in file "20june02_ZN_B_"
-- with weights: 'EEMWghtAM': 0.0008, 'EEWeightNM': 0.00025, 'EEMWghtThreshMin': 0.0002, 'EEMWghtThreshMax':0.0008
-- E and I Firing rates of M neurons were high. (23 Hz).

** reduce weights to: 'EEMWghtAM': 0.0004, 'EEWeightNM': 0.000125 and run for 20 sec in file "20june03_ZN_B_"
-- still very high firing rate (~21Hz).

** reduce weights to: 'EEMWghtAM': 0.0002, 'EEWeightNM': 0.00006 and run for 20 sec in file "20june03_ZN_B2_"
-- still very high firing rate (~18Hz).

** reduce weights to: 'EEMWghtAM': 0.0001, 'EEWeightNM': 0.00003 and run for 300 sec in file "20june03_ZN_B3_"
-- the other weight parameters are 'EEMWghtThreshMin':0.00002, 'EEMWghtThreshMax':0.0008
-- 'EEMRecProb':0.4
-- still very high firing rate (~16 Hz)

** reduce weights to: 'EEMWghtAM': 0.00005, 'EEWeightNM': 0.000015 and run for 20 sec in file "20june04_ZN_B_"
-- the other weight parameters are 'EEMWghtThreshMin':0.00001, 'EEMWghtThreshMax':0.0004
-- 'EEMRecProb':0.4



####################################################
** on june02, I ran sim on falcor with reduced convergence of E->I ------------- saved in file "20june02_C_"
-- had too high firing rate of E and I neurons in M.

** reduce weights to: 'EEMWghtAM': 0.0004, 'EEWeightNM': 0.000125 and run for 20 sec in file "20june03_C_"
-- the other weight parameters are: 'EEMWghtThreshMin': 0.0002, 'EEMWghtThreshMax':0.0008
-- 'EEMRecProb':0.3
-- still high firing rates (~20Hz).

** reduce weights to: 'EEMWghtAM': 0.0002, 'EEWeightNM': 0.00006 and run for 20 sec in file "20june03_C2_"
-- still high firing rates (~17Hz).

** reduce weights to: 'EEMWghtAM': 0.0001, 'EEWeightNM': 0.00003 and run for 20 sec in file "20june03_C3_"
-- the other weight parameters are 'EEMWghtThreshMin':0.00002, 'EEMWghtThreshMax':0.0008
-- firing rate is in reasonable range.
-- record actmap movie as well as weightmap movie. mv those movies to my computer.

** run this simulatio for 200 sec in file "20june03_C4_"
-- Firing rate is in reasonable range (~1Hz for E and ~3Hz for I)
-- record actmap and weightmap movies..copied those movies to my computer

** run this simulation for 400 sec in file "20june03_C5"
-- Firing rate is in reasoanable range.
-- record actmao and weight movies ... copied those movies to my computer.
-- I DON'T SEE ANY LEARNING.

** run a 20 sec sim with .... in file "20june05_C1_"and compare results with "20june03_C3_"
-- 'EEMRecProb':0.4
-- the firing rate increased to ~16Hz. i.e. too high.

** reduce weights to: 'EEMWghtAM': 0.00005, 'EEWeightNM': 0.000015 and run for 20 sec in file "20june05_C2_"
-- the other weight parameters are 'EEMWghtThreshMin':0.00001, 'EEMWghtThreshMax':0.0004
-- The firing rate decreased to 0.17 Hz.

** increase -- 'EEMRecProb' to 0.5 and run 20 sec in "20june05_C3_"
-- firing rate of E neurons didnt change much. Firing rate of I neurons went a bit up.---didnt save raster.
-- need to see connectivity maps.

TRY THIS 

drfmap = plotallinputmaps(pdf, pdf.time[0], dstartidx['EMUP'] + 0, 'EMUP', dnumc, dstartidx, dendidx, lprety)
drfmap = plotallinputmaps(pdf, pdf.time[0], dstartidx['EMUP'] + 1, 'EMUP', dnumc, dstartidx, dendidx, lprety)


** Learning depends on how well the reward is associated with the action. ---> This is somewhat straightforward to test.
** similarly, learning also depends on how well the firing rate of M neural population represent the action generated. ---> This is more difficult to test.

* 20june08
** run 20 sec sim in file "20june08_A_" 
-- 'EEMRecProb' to 0.5
-- 'EEMWghtAM': 0.00005, 'EEWeightNM': 0.000015
-- 'EEMWghtThreshMin':0.00001, 'EEMWghtThreshMax':0.0004
-- no RL between preM and M.
-- RL only between recurrent connections in M.

.... very synchronized activity in M pops.
.... very high firing rate (~15Hz)

** run 20 sec sim in file "20june08_A2_"
-- reduce to 'EEMWghtAM': 0.00001, 'EEWeightNM': 0.000003

... E stopped firing.

-- rerun sim with 'EEMWghtAM': 0.00003, 'EEWeightNM': 0.000009
... very low firing rate. ~0.01 Hz
-- rerun sim with 'EEMWghtAM': 0.00004, 'EEWeightNM': 0.000012
... very low activity ~0.13 Hz. saved raster on falcor.
...


from aigame import AIGame
AIGame = AIGame()
epCount = []

LOOK HERE: IT IS WORKING FINE.

>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([3], epCount)
Current_ball_dir 1
Last ball dir 1
current X pos Ball 115.5
last X pos Ball 112.5
Court Range (20, 140)
0
>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([3], epCount)
Current_ball_dir 1
Last ball dir 1
current X pos Ball 118.5
last X pos Ball 115.5
Court Range (20, 140)
0
>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([3], epCount)
Current_ball_dir -1
Last ball dir 1
current X pos Ball 117.5
last X pos Ball 118.5
Court Range (20, 140)
1


HERE WAS THE Problem


>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([4], epCount)
Current_ball_dir 0
Last ball dir 1
current X pos Ball -1 ---> the ball goes out of courtXRng
last X pos Ball 118.5
Court Range (20, 140)
0
>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([4], epCount)
Current_ball_dir 0
Last ball dir 0
current X pos Ball 115.5 --> comes back in the courtXRng
last X pos Ball -1
Court Range (20, 140)
0

condition 0:
----If last X pos Ball was 116.5, current X pos Ball would be 119.5. 
    and if its picked up by the racket, in next step last X Ball would be 119.5 and current X pos Ball would be 116.5
condition 1:
----If last X pos Ball was 117.5, current X pos Ball would be 120.5 that would be -1. 
    and if its picked up by the racket, in next step last X Ball would be -1 and current X pos Ball would be 114.5
condition 2:
----If last X pos Ball was 118.5, current X pos Ball would be 121.5 that would be -1. 
    and if its picked up by the racket, in next step last X Ball would be -1 and current X pos Ball would be 115.5
condition 3:
----If last X pos Ball was 119.5, current X pos Ball would be 122.5 that would be -1. 
    and if its picked up by the racket, in next step last X Ball would be -1 and current X pos Ball would be 116.5


if current_ball_dir-self.last_ball_dir<0 and reward==0 and xpos_Ball2>courtXRng[1]-courtXRng[0]-3:
  ball_hits_racket = 1
elif xpos_Ball==-1 and reward==0 and xpos_Ball2>courtXRng[1]-courtXRng[0]-6: # before i was using  xpos_Ball2>courtXRng[1]-courtXRng[0]-3
  ball_hits_racket = 1

>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([3], epCount)
Current_ball_dir -1
Last ball dir 1
current X pos Ball 117.5
last X pos Ball 118.5
Court Range (20, 140)
1

>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([1], epCount)
Current_ball_dir 0
Last ball dir 1
current X pos Ball 117.5
last X pos Ball 117.5
Court Range (20, 140)
1

IT MISSED AGAIN HERE:

>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([1], epCount)
Current_ball_dir -1
Last ball dir 1
current X pos Ball 107.5
last X pos Ball 116.5
Court Range (20, 140)
0

FIX:

if current_ball_dir-self.last_ball_dir<0 and reward==0 and xpos_Ball2>courtXRng[1]-courtXRng[0]-40:
  ball_hits_racket = 1


>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([3], epCount)
Current_ball_dir -1
Last ball dir 1
current X pos Ball 116.5
last X pos Ball 119.0
Court Range (20, 140)
1

>>> rewards, epCount, proposed_actions, total_hits = AIGame.playGame([1], epCount)
Current_ball_dir -1
Last ball dir 1
current X pos Ball 113.5
last X pos Ball 119.0
Court Range (20, 140)
1

** adjust sim.json according to sn.json

** run 200 sec sim on falcor with only plasticity in recurrent connections in motor pop.


* 2020june10
** running 400 sec sim on falcor using sn.json

** working on algorithm to find the racket ball intercept.

import random
from matplotlib import pyplot as plt
import numpy as np
import gym
courtXRng = (20, 140)
courtYRng = (34, 194)
racketXRng = (141, 144)
def findobj (img, xrng, yrng):
  subimg = img[yrng[0]:yrng[1],xrng[0]:xrng[1],:]
  sIC = np.sum(subimg,2)
  pixelVal = np.amax(sIC)
  sIC[sIC<pixelVal]=0
  Obj_inds = []
  for i in range(sIC.shape[0]):
    for j in range(sIC.shape[1]):
      if sIC[i,j]>0:
        Obj_inds.append([i,j])
  if sIC.shape[0]*sIC.shape[1]==np.shape(Obj_inds)[0]:
    ypos = -1
    xpos = -1
  else:
    ypos = np.median(Obj_inds,0)[0]
    xpos = np.median(Obj_inds,0)[1]
  return xpos, ypos

env = gym.make('Pong-v0',frameskip=3)
env.reset()
# ball appears on 20th action so
ball_xpos = []
ball_ypos = []
for _ in range(200):
  caction = random.randint(3,4)
  observation, reward, done, info = env.step(caction)
  env.render()
  xpos, ypos = findobj (observation, courtXRng, courtYRng)
  ball_xpos.append(xpos)
  ball_ypos.append(ypos)

# find delta_x, delta_y per step and then estimate x and y after N steps.
predicted_y = [-1]
predicted_x = [120]
predicted_steps = [-1]
NBsteps = 200
for i in range(1,NBsteps):
  predicted_x.append(120)
  deltax = ball_xpos[i]-ball_xpos[i-1]
  if deltax<=0:
    predicted_y .append(-1)
    predicted_steps.append(-1)
  else:
    if ball_ypos[i-1]<0:
      predicted_y .append(-1)
      predicted_steps.append(-1)
    else:
      NB_intercept_steps = np.ceil((120.0 - ball_xpos[i])/3.0)
      deltay = ball_ypos[i]-ball_ypos[i-1]
      predY_nodeflection = ball_ypos[i] + (NB_intercept_steps*deltay)
      predicted_steps.append(NB_intercept_steps)
      if predY_nodeflection<0:
        predY = -1*predY_nodeflection
      elif predY_nodeflection>160:
        predY = predY_nodeflection-160
      else:
        predY = predY_nodeflection
      predicted_y.append(predY)

plt.plot(ball_xpos,ball_ypos,'bo')
plt.plot(predicted_x,predicted_y,'ro')

##############################################################################

import random
from matplotlib import pyplot as plt
import numpy as np
import gym
courtXRng = (20, 140)
courtYRng = (34, 194)
racketXRng = (141, 144)

xpos_Ball = -1 #previous location
ypos_Ball = -1
xpos_Ball2 = -1 #current location
ypos_Ball2 = -1

def findobj (img, xrng, yrng):
  subimg = img[yrng[0]:yrng[1],xrng[0]:xrng[1],:]
  sIC = np.sum(subimg,2)
  pixelVal = np.amax(sIC)
  sIC[sIC<pixelVal]=0
  Obj_inds = []
  for i in range(sIC.shape[0]):
    for j in range(sIC.shape[1]):
      if sIC[i,j]>0:
        Obj_inds.append([i,j])
  if sIC.shape[0]*sIC.shape[1]==np.shape(Obj_inds)[0]:
    ypos = -1
    xpos = -1
  else:
    ypos = np.median(Obj_inds,0)[0]
    xpos = np.median(Obj_inds,0)[1]
  return xpos, ypos

env = gym.make('Pong-v0',frameskip=3)
env.reset()

def predictBallRacketYIntercept(xpos_Ball,ypos_Ball,xpos_Ball2,ypos_Ball2):
  if ((xpos_Ball==-1) or (xpos_Ball2==-1)):
    predY = -1
  else:
    deltax = xpos_Ball2-xpos_Ball
    if deltax<=0:
      predY = -1
    else:
      if ypos_Ball<0:
        predY = -1
      else:
        NB_intercept_steps = np.ceil((120.0 - xpos_Ball2)/deltax)
        deltay = ypos_Ball2-ypos_Ball
        predY_nodeflection = ypos_Ball2 + (NB_intercept_steps*deltay)
        if predY_nodeflection<0:
          predY = -1*predY_nodeflection
        elif predY_nodeflection>160:
          predY = predY_nodeflection-160
        else:
          predY = predY_nodeflection
  return predY

  observation, reward, done, info = env.step(1)
  xpos_Ball2, ypos_Ball2 = findobj (observation, courtXRng, courtYRng)
  xpos_Racket2, ypos_Racket2 = findobj (observation, racketXRng, courtYRng)
  predY = predictBallRacketYIntercept(xpos_Ball,ypos_Ball,xpos_Ball2,ypos_Ball2)
  for _ in range(200):
    if predY==-1:
      caction = random.randint(3,4)
    else:
      targetY = ypos_Racket2 - predY
      if targetY>8: # racket height is 16 pixels, so use 8 here
        caction = 4
      elif targetY<-8:
        caction = 3
      else:
        caction = 1
    observation, reward, done, info = env.step(caction)
    env.render()
    xpos_Ball = xpos_Ball2
    ypos_Ball = ypos_Ball2
    xpos_Ball2, ypos_Ball2 = findobj (observation, courtXRng, courtYRng)
    xpos_Racket2, ypos_Racket2 = findobj (observation, racketXRng, courtYRng)
    predY = predictBallRacketYIntercept(xpos_Ball,ypos_Ball,xpos_Ball2,ypos_Ball2)
    if done==1:
      env.reset()

try this: env = gym.make('PongNoFrameskip-v4')
-- improved performance
-- when the racket on the top or bottom, it has tendency to miss the ball. probably because it still considers the ball is within 16 pixels around the median.

** use "useRacketPredictedPos": 1 to use RacketPredictedPos for proposing actions.
*** when "useRacketPredictedPos": 1, the it overrides the proposed actions from "followtheball" rule.
** run 20 sec sim in "20june12_A_"

--- previously i was using these parameters
"architecturePreMtoM": {"useProbabilistic":0,"useTopological":1},
    "net":{"scale":1,"ER":400,"IR":100,"EV1":400,"EV1DE":400,"EV1DNE":400,"EV1DN":400,"EV1DNW":400,"EV1DW":400,"EV1DSW":400,"EV1DS":400,"EV1DSE":400,"IV1":100,"EV4":100,"IV4":25,"EMT":25,"IMT":9,"EMDOWN":400,"EMUP":400,"IM":200,"AngRFSigma":22.5,"DirMinRate":0.0,"DirMaxRate":50.0,"EEMWghtAM":0.00003,"EEMWghtNM":0.000009,"EEMWghtThreshMin":0.00001,"EEMWghtThreshMax":0.0004,"EEMProb":0.3,"EEMRecProb":0.5,"EEMPopNorm":0,"EEMRecProbCross":0},
    "RL":{"AMPA":
        {"wbase":0.0000001,"wmax":0.00024,"RLon":1,"RLlenhebb":100,"RLlenanti":50,"useRLexp":1,"RLhebbwt":0.000004,"RLantiwt":-0.0,"hebbwt":0,"antiwt":0,"tauhebb":10,"RLwindhebb":50,"softthresh":0,"verbose":0},
        "NMDA":
        {"wbase":0.000001,"wmax":0.000075,"RLon":0,"RLlenhebb":800,"RLlenanti":100,"useRLexp":1,"RLhebbwt":0.000004,"RLantiwt":-0.0,"hebbwt":0,"antiwt":0,"tauhebb":10,"RLwindhebb":50,"softthresh":1,"verbose":0}
      }

--- now i will use what sam uses.

** change followBall and avoidBall to followTarget and avoidTarget respectively.

** ran 400 sec of sim in "20june12_B_"

** running 100 sec of sim in "20june12_C_" with RLon = 0
-- something went wrong.... could not use simdat.py
--re run sim for 10 sec to check if everything is running or not.

** running 10 sec of sim in "20june16_A1_falcor" using sn.json (cp sn.json sim.json)
-- simdat.py running fine.
- run sim with RLon = 0.... for 10 sec to check if everything is running or not.

** running 10 sec of sim in "20june16_A2_falcor" using sn.json (cp sn.json sim.json)

** Had discussion with Sam
-- reduce network by removing V4 and MT layers.
-- push the connectivity prob between pre and post motor neurons to maximum
-- create a simulation of pong game with simple scenerios.



-- ball color 236,236,236 (width = 2 , height = 4)
-- racket color 92,186,92 (width = 4 ,height = 16 pixels)
-- background color 144,72,17
-- other racket: 213,130,74
import gym
import random
env = gym.make('PongNoFrameskip-v4',repeat_action_probability=0)
env.reset()
for _ in range(20):
  caction = random.randint(3,4)
  observation, reward, done, info = env.step(caction)




######################################
import numpy as np

class simulatePong:
  def __init__ (self):
    self.court_top = 36
    self.court_bottom = 195
    self.ball_width = 2
    self.ball_height = 4
    self.racket_width = 4
    self.racket_height = 16
    # start ball from the middle
    self.ypos_ball = 80  # this corresponds to 0 index
    self.xpos_ball = 20  # this corresponds to 1 index
    self.xpos_racket = 140 # this is fixed
    self.ypos_racket = 80 # this can change
    # create background
    self.obs = np.zeros(shape=(210,160,3))
    self.obs[self.court_top:self.court_bottom,:,0]=144
    self.obs[self.court_top:self.court_bottom,:,1]=72
    self.obs[self.court_top:self.court_bottom,:,2]=17
    # create ball
    self.b1x = self.xpos_ball
    self.b2x = self.xpos_ball+self.ball_width
    self.b1y = self.court_top+self.ypos_ball
    self.b2y = self.court_top+self.ypos_ball+self.ball_height  
    self.obs[self.b1y:self.b2y,self.b1x:self.b2x,0]=236
    self.obs[self.b1y:self.b2y,self.b1x:self.b2x,1]=236
    self.obs[self.b1y:self.b2y,self.b1x:self.b2x,2]=236
    # create racket
    self.r1x = self.xpos_racket
    self.r2x = self.xpos_racket+self.racket_width
    self.r1y = self.court_top+self.ypos_racket
    self.r2y = self.court_top+self.ypos_racket+self.racket_height
    self.obs[self.r1y:self.r2y,self.r1x:self.r2x,0]= 92
    self.obs[self.r1y:self.r2y,self.r1x:self.r2x,1]= 186
    self.obs[self.r1y:self.r2y,self.r1x:self.r2x,0]= 92

  def createnewframe(self):
    self.obs = np.zeros(shape=(210,160,3))
    self.obs[self.court_top:self.court_bottom,:,0]=144
    self.obs[self.court_top:self.court_bottom,:,1]=72
    self.obs[self.court_top:self.court_bottom,:,2]=17

  def moveball(self,xshift_ball,yshift_ball):
    self.b1x = self.b1x+xshift_ball
    self.b2x = self.b2x+xshift_ball
    self.b1y = self.b1y+yshift_ball
    self.b2y = self.b2y+yshift_ball
    self.obs[self.b1y:self.b2y,self.b1x:self.b2x,0]=236
    self.obs[self.b1y:self.b2y,self.b1x:self.b2x,1]=236
    self.obs[self.b1y:self.b2y,self.b1x:self.b2x,2]=236

  def moveracket(self,yshift_racket):
    self.r1y = self.r1y+yshift_ball
    self.r2y = self.r2y+yshift_ball
    self.obs[self.r1y:self.r2y,self.r1x:self.r2x,0]= 92
    self.obs[self.r1y:self.r2y,self.r1x:self.r2x,1]= 186
    self.obs[self.r1y:self.r2y,self.r1x:self.r2x,0]= 92

  def step(self,action):
    if action==3:
      yshift_racket=10
    elif action==4:
      yshift_racket=-10
    else:
      yshift_racket=0
    self.createnewframe()
    self.moveracket(yshift_racket)
    self.moveball(xshift_ball=3, yshift_ball=0)
    if self.b2x>=self.r1x:
      if ((self.b1y>self.r1y) and (self.b1y<self.r2y)) or ((self.b2y>self.r1y) and (self.b2y<self.r2y)): # if upper or lower edge of the ball is within the range of the racket 
        reward = 1
      else:
        reward = -1
    else:
      reward = 0
    if self.b2x>self.r2x+4:
      self.ypos_ball = 80
      self.xpos_ball = 20
  return self.obs, reward


from matplotlib import pyplot as plt
import numpy as np
from simulatePong import simulatePong
pong = simulatePong()

obs, reward, done = pong.step(1)
plt.imshow(obs.astype(np.uint8))
plt.show()


* 20june18

** integrated simulatePong in the game
-- simple ball movement from left side of the court to right side of the screen implemented.
-- racket can be controled by Motor Cortex model.
-- when the ball is hit by the racket (reward = 1 is generated and done = 1 is set), the ball is reset to the initial position i.e. on the left side of the court
-- when the ball is missed by the racket (reward = -1 is generated and done = 1), the ball is reset to the initial position i.e. on the left side of the ciurt.

** set 'useSimulatedEnv' =  1 in sim.json to use simulatedPong instead of aigame enviroment.

** test if simulatePong is working well.

** add dconf['simulatedEnvParams']['yball'] and dconf['simulatedEnvParams']['yracket'] in sim.json to be used with simulatePong.py

** randomly moving opponent racket added in simulatePong.py

** fixed bugs
-- set type of self.obs to uint8 in simulatePong.py
-- fix the court range in simulatePong.py

* 20june19

** ran '20june18_C_' for 1000 sec.
-- something seems off.
-- learning does not improve follow the ball.
-- hit was awarded a score 1. so its different than regular game, where hit was awarded score for being hit.
-- looking the act video to find what went wrong.
-- looks like between 30 and 31 minutes in the actmap.mp4, many populations become epileptic... that is when the learning/performance starts going down.
   -- may be the parameters are not good to produce stable activity.

* 20june22

** ran '20june22_A_' for 100 sec using reduced architecture (parameters copied from sn.json).

** when using simulatedPong, use scorePoint=0.5 instead of scorePoint=1.0

** ran 400 sec simulation in '20june22_B' with reduced architecture (parameters copied from sn.json), simulated Pong and scorePoint of 0.5.
-- results dont seem to improve. see saved plots.

** rerun with lower weights in '20june22_C'.
-- reduce all weights to half.
-- too weak .... increase it so that its 3/4 of original---> DO that after '20june22_D'

** rerun with parameters same as in '20june22_B' but with targeted RL on.
-- results are saved in '20june22_D'
-- run for 500 sec.

** DISCUSSION:
-- I think part of problem is that it's difficult to get any kind of stability with the output encoding used and there seems to be some bias to moving up from the get-go
-- it seems different from totally random movement in the beginning
-- so one question is if the RL is just spending all its time overcoming the bias then it won't be able to learn effectively...
-- could look into source of bias, improving the output encoding, and maybe the related momentum issue
-- but I think the movie shows that there is some learning taking place, it's just difficult to measure at each timestep
-- biases seem easier to fix
-- if there's any lack of symmetry in inputs could cause the bias, so could check for those...for output encoding had a param that controls diff btwn rates of two populations to allow a middle ground; 

** SUGGESTIONS:
-- also had some suggestion about population that produces a "hold" output
-- or could have some EMDown -> inhib -> EMUp? when EMDown fires a lot suppresses other pop and vice versa?



** TO RESUME SIMULATION:

so if i want to continue run from previous sim, i just change ResumeSim to 1 and ResumeSimFromFIle name in sim.json?
samn  2:01 PM
yeah
i'd suggest that you just save the final weights to a file first
pdfs = pdf[pdf.time==np.amax(pdf.time)]; D = pdf2weightsdict(pdfs); pickle.dump(D, open('data/'+simstr+'synWeights_final.pkl','wb'))
for example, and use that output filename
(that's after loading simdat.py)

Haroon Anwar  2:02 PM
use that output filename for what?

samn  2:02 PM
for the resumesimfromfile name
since it's smaller file
otherwise could run out of memory if 16 processes load a huge file


** new machine at nki
ssh hanwar@10.76.252.198
haroonnki20
bash


** i had resumed simulation '20june22_D' in '20june22_D2' using '20june22_D_synWeights_final.pkl'
-- it looks like the simulation was started from the initial values.
-- to confirm this, i will rerun sim in '20june22_D3' for only 10 sec using '20june22_D_synWeights.pkl'
-- looks like the problem was that if i am not using multistepSim, then i need to specify synWeights file name as 'data/20june22_D_synWeights.pkl'
-- running now after fixing path.
-- (183 Hits, 322 Misses) ratio = 0.568

** repeat '20june22_D2_' sim. 500 sec (197 Hits, 279 Misses) ration = 0.706

** repeat '20june22_D3_' sim. 1000 sec. (413 Hits, 617 Misses) ratio = 0.669

** add 'EMSTAY' population in the simulation

** Rule change:
-- if firing rate of UP neurons is higher than firing rates of DOWN neurons and STAY neurons, then move UP.
-- if firing rate of DOWN neurons is higher than firing rates of UP neurons and STAY neurons, then move DOWN.
-- if firing rate of STAY neurons is higher than firing rates of UP neurons and DOWN neurons, then NO MOVE.
-- if firing rate of UP neurons and STAY neurons is same and also higher than the firing rate of DOWN neurons, then choose randomly either to move UP or NO MOVE.
-- if firing rate of DOWN neurons and STAY neurons is same and also higher than the firing rate of UP neurons, then choose randomly either to move DOWN or NO MOVE.
-- if firing rate of UP neurons and DOWN neurons is same and also higher than the firing rate of STAY neurons, then choose randomly either to move UP or DOWN.
-- if none of the above mentioned conditions hold true then choose a random action from UP, DOWN or NO MOVE. 

      if 'movefctr' in dconf: movefctr=dconf['movefctr']
      if 'randmove' in dconf: randmove=dconf['randmove']
      if randmove:
        lmoves = list(dconf['moves'].values())
        for ts in range(int(dconf['actionsPerPlay'])): actions.append(lmoves[np.random.randint(0,len(lmoves))])
      else:
        for ts in range(int(dconf['actionsPerPlay'])):
          if (F_UPs[ts]>F_DOWNs[ts] * movefctr) and (F_UPs[ts]>F_STAYs[ts] * movefctr):
            actions.append(dconf['moves']['UP'])
          elif (F_DOWNs[ts]>F_UPs[ts] * movefctr) and (F_DOWNs[ts]>F_STAYs[ts] * movefctr):
            actions.append(dconf['moves']['DOWN'])
          elif (F_STAYs[ts]>F_UPs[ts] * movefctr) and (F_STAYs[ts]>F_DOWNs[ts] * movefctr):
            actions.append(dconf['moves']['NOMOVE']) # No move
          elif (F_UPs[ts]>F_DOWNs[ts] * movefctr) and (F_UPs[ts]==F_STAYs[ts]):
            actions.append(np.random.randint(dconf['moves']['UP'],dconf['moves']['NOMOVE']))
          elif (F_DOWNs[ts]>F_UPs[ts] * movefctr) and (F_DOWNs[ts]==F_STAYs[ts]):
            actions.append(np.random.randint(dconf['moves']['DOWN'],dconf['moves']['NOMOVE']))
          elif (F_DOWNs[ts]>F_STAYs[ts] * movefctr) and (F_DOWNs[ts]==F_UPs[ts]):
            actions.append(np.random.randint(dconf['moves']['DOWN'],dconf['moves']['UP']))
          else:
            lmoves = list(dconf['moves'].values())
            actions.append(lmoves[np.random.randint(0,len(lmoves))])
            #actions.append(dconf['moves']['NOMOVE']) # No move       

** RULE CHANGE for targeted RL:

    if not dconf['sim']['targettedRL']:
      if dconf['verbose']: print('APPLY RL to EMUP, EMDOWN and EMSTAY')
      for STDPmech in dSTDPmech['all']: STDPmech.reward_punish(float(critic))
    elif UPactions>DOWNactions and UPactions>STAYactions:
      if dconf['verbose']: print('APPLY RL to EMUP')
      for STDPmech in dSTDPmech['EMUP']: STDPmech.reward_punish(float(critic))
    elif DOWNactions>UPactions and DOWNactions>STAYactions:
      if dconf['verbose']: print('APPLY RL to EMDOWN')
      for STDPmech in dSTDPmech['EMDOWN']: STDPmech.reward_punish(float(critic))
    elif STAYactions>UPactions and STAYactions>DOWNactions:
      if dconf['verbose']: print('APPLY RL to EMSTAY')
      for STDPmech in dSTDPmech['EMSTAY']: STDPmech.reward_punish(float(critic))
    elif UPactions==DOWNactions and UPactions>STAYactions:
      if dconf['verbose']: print('APPLY RL to EMUP and EMDOWN')
      for STDPmech in dSTDPmech['EMUP']: STDPmech.reward_punish(float(critic))
      for STDPmech in dSTDPmech['EMDOWN']: STDPmech.reward_punish(float(critic))
    elif UPactions==STAYactions and UPactions>DOWNactions:
      if dconf['verbose']: print('APPLY RL to EMUP and EMSTAY')
      for STDPmech in dSTDPmech['EMUP']: STDPmech.reward_punish(float(critic))
      for STDPmech in dSTDPmech['EMSTAY']: STDPmech.reward_punish(float(critic))
    elif DOWNactions==STAYactions and DOWNactions>UPactions:
      if dconf['verbose']: print('APPLY RL to EMDOWN and EMSTAY')
      for STDPmech in dSTDPmech['EMDOWN']: STDPmech.reward_punish(float(critic))
      for STDPmech in dSTDPmech['EMSTAY']: STDPmech.reward_punish(float(critic))
    elif DOWNactions==STAYactions and UPactions==STAYactions:
      if dconf['verbose']: print('APPLY RL to EMUP, EMDOWN and EMSTAY')
      for STDPmech in dSTDPmech['all']: STDPmech.reward_punish(float(critic))



** Plotting by joining resumed sims

#
actlearn0 = pd.DataFrame(np.loadtxt('data/20jun17_E0_targetted_falcor_ActionsRewards.txt'),columns=['time','action','reward','proposed','hit'])
actlearn1 = pd.DataFrame(np.loadtxt('data/20jun18_E1_targetted_falcor_ActionsRewards.txt'),columns=['time','action','reward','proposed','hit'])
actlearn1.time += 800e3
actlearn2 = pd.DataFrame(np.loadtxt('data/20jun19_E2_targetted_falcor_ActionsRewards.txt'),columns=['time','action','reward','proposed','hit'])
actlearn2.time += 1600e3
actlearn3 = pd.DataFrame(np.loadtxt('data/20jun20_E3_targetted_falcor_ActionsRewards.txt'),columns=['time','action','reward','proposed','hit'])
actlearn3.time += 2400e3
actlearn4 = pd.DataFrame(np.loadtxt('data/20jun23_E4_targetted_falcor_ActionsRewards.txt'),columns=['time','action','reward','proposed','hit'])
actlearn4.time += 4000e3
pda = actlearn0; pda = pda.append(actlearn1); pda = pda.append(actlearn2); pda = pda.append(actlearn3); pda = pda.append(actlearn4)
#
clf()
plotFollowBall(pda,ax=subplot(1,3,1),cumulative=True,color='r'); ylim((0,.6))
plotHitMiss(pda,ax=subplot(1,3,2));
plotRewards(pda,ax=subplot(1,3,3));
11:30
i just have that in my notebook - many places there
11:30
easier if it ws a function to load all the actions passed in, etc.
11:30
whatever works




** using 100% connectivity

if you want the 100% conn params to compare against later - /home/samn/SMARTAgent/backupcfg/20jun24_F2_targetted_tank_sim.json
1:15
on falcor


** use random.choice with list of actions instead of random.randint

** Some ideas discussed with Sam

Haroon Anwar
so i was thinking-----
if we didnt have to follow this stupid RL rule of pre-post spiking

samn  2:50 PM
pre->post, well, it worked in the past but there's also hebbian rule

Haroon Anwar  2:50 PM
i would have ran random actions and based on actions, make connections stronger or weaker
i am not criticizing that

samn  2:50 PM
random actions produced by model?

Haroon Anwar  2:51 PM
just trying to be creative

samn  2:51 PM
you can criticize
how else to make it beter

Haroon Anwar  2:51 PM
thats training phase i am talking about during training
make random actions
but make connections stronger or weaker between pre and postM
once training is done, then let M decide
coz now we will have only synapses which are relevant

samn  2:52 PM
so random actions - and which synapses are strengthened/weakened?

Haroon Anwar  2:52 PM
that would be topological neurons in M

samn  2:52 PM
the ones that contribute to action? so all of the ones that contribute?

Haroon Anwar  2:52 PM
with targeted

samn  2:53 PM
how do you know if they contributed?
if they were silent recently should they be strengthened?

Haroon Anwar  2:53 PM
no contribution
i know the neuron representing a space in visual field

samn  2:53 PM
so if pre and postsynaptic neuron fired recently, then strengthen synapse if it contributed to the right action
and weaken it if it contributed to the wrong action

Haroon Anwar  2:54 PM
no post synaptic neurons are not involved in anything here

samn  2:54 PM
post synaptic is the M neurons that contribute to an action

Haroon Anwar  2:54 PM
but during training they dont

samn  2:55 PM
since it's random action - so i'm unclear about which synapses to strengthen and weaken then
you mean to strengthen all synapses projecting to a EM population?

Haroon Anwar  2:55 PM
spatially associated postsynaptic M neuron and presynaptic neurons
no not all
we dont use all to all connectivity
we do topological connectivity
in M too

samn  2:56 PM
i was using all or close to all to EM recently
without topology in M
probabalistic
if you have different rule, can try it too
just want one that will work and is bio plausible

Haroon Anwar  2:56 PM
I am proposing this --> we dont use all to all connectivity
we do topological connectivity in M too
not saying we did that

samn  2:57 PM
ic
so spatially associated postsynaptic M neuron synapses are strengthened in which condition?
when they receive synaptic inputs that cause the right action?

Haroon Anwar  2:58 PM
when UP is good , UP neuron for that location
when DOWN is good, DOWN neuron for that location

samn  2:58 PM
that sg to try

Haroon Anwar  2:58 PM
this way only those neurons will get selectivity excited

samn  2:58 PM
yes, that seems like an interesting algorithm
take note of it and can try it if have time


** sim with 'EMSTAY' in '20june25_D_' gives weird results.
-- racket get stuck on upper corner or lower corner.
-- RLhebbwt was 0.0000002

** sim with 'EMSTAY' in '20june25_E_' still gives weird results.

** run sim with 0 pop size of 'EMSTAY' in '2ojune25_F_'

** pass lpop to the following functions in simdat.py otherwise by default allpossible_pops will be passed.
-- use the following code to see which of the pops are defined for the simulation network. 
  allpossible_pops = ['ER','IR','EV1','EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE','IV1','EV4','IV4','EMT','IMT','EMDOWN','EMUP','EMSTAY','IM']
  lpop = []
  for pop_ind in range(len(allpossible_pops)):
    cpop = allpossible_pops[pop_ind]
    if cpop in dconf:
      if dconf['net'][cpop]>0:
        lpop.append(cpop)
  print('lpop: ', lpop)
  simConfig, pdf, actreward, dstartidx, dendidx, dnumc, dspkID, dspkT, InputImages, ldflow, dact = loadsimdat(getactmap=False,lpop)

-- dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,\
                lpop = allpossible_pops)
-- loadsimdat (name=None,getactmap=True,lpop = allpossible_pops): # load simulation data
-- animActivityMaps (outpath='gif/'+dconf['sim']['name']+'actmap.mp4', framerate=10, figsize=(18,10), dobjpos=None,\
  lpop = allpossible_pops): # plot activity in different layers as a function of input images


** test simdat.py.....

-- just use: dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop)
-- juset use: animActivityMaps (outpath='gif/'+dconf['sim']['name']+'actmap.mp4', framerate=10, lpop = lpop)

** debugging simdat.py
-- lpop OK
-- dact loading fine.
-- animAcitivytMaps has problems since now we should have capacity to plot more than 20 subplots.
-- tried fixing it.... test again.
-- still problem...
-- tried fixing it .... test again.
-- seems working --- fix labeling


-- dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx, lpop)
-- animActivityMaps (outpath='gif/'+dconf['sim']['name']+'actmap.mp4', framerate=10, figsize=(18,10), dobjpos=None,\
  lpop = lpop)

** debug animSynWeights
-- plot only if pop exists.
-- make more panels to fit in 11 more pre-post pairs.
-- testing .... expecting some more bugs to fix.
-- more fixing...
-- more fixing...


** test sim.py without 'EMSTAY' in '20june30_A_' -- 100 sec sim.

** copy '20june29_A_' on my computer to work on plotting firing rate statistics.

** Found out that the code in sim.py was messed up.... no idea when did it happen... probably pushed the code without savind and then pulled which override the unsaved changes.

** anyway tried fixing all the error --- test now.

** sim without 'EMSTAY' in '20june30_A' looks fine. 
-- actmap looks ok.
-- MissScore plot looks ok
-- weights plot looks ok
-- follow the ball plot looks ok.
-- animSynWeights crashed--- didnt look into the reason why... since its not very useful anyway.

** now run sim with 'EMSTAY'=16 in '20june30_B'...
-- code was completely messed up.... 'EMSTAY' was not set up at all.
-- made changes and now will test....
-- looks OK --- not performance wise..

** now run sim with 'EMSTAY'=0 in '20june30_C'...
-- looks OK --- not performance wise..

** repeat sim without 'EMSTAY' in '20june30_A2'.

** repeat sim for 2000 sec without 'EMSTAY' in '20june30_A3'.

-- HISTOGRAM

hist, bin_edges = np.histogram(d)

* 2020july1

** Need to undestand how many leels of firing rates exist in individual neurons as well as pop of M neurons.
-- looking at file from sam.... 20jun26_F4_targetted_tank_sim.json
-- very similar single neuron dynamics:
      --hist, bins = np.histogram(dact['EMUP'])
        hist = 708285 (0), 449672 (1), 122009 (2), 34 (3)
      --hist, bins = np.histogram(dact['EMDOWN'])
        hist = 715238 (0), 426331 (1), 138200 (2), 231 (3)  


-- looking at pop firing rates:
FR_UP = []
FR_DOWN = []
for t in range(np.shape(dact['EMUP'])[0]):
  FR_UP.append(np.sum(dact['EMUP'][t]))
  FR_DOWN.append(np.sum(dact['EMDOWN'][t]))
Decisive_FR = np.subtract(FR_UP,FR_DOWN)
plt.hist(Decisive_FR, bins = 200)
plt.hist(FR_UP, bins = 200)
plt.hist(FR_DOWN, bins = 200)

-- too many times FR_UP == FR_DOWN
-- not that many times, FR_UP or FR_DOWN equal 0.
If a neuron can have 0, 1, 2 or 3 spikes, how many possible firing patterns will be there?

-- unique FR_DOWN: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,32
-- unique FR_UP: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,27

inds = np.where(np.array(FR_UP)==1.)
FR_UP_1s = dact['EMUP'][inds] --- 801 inds
np.sum(FR_1s,0)
--- [[75,103,42,132],
      [236,0,0,0],
      [0,1,0,0],
      [59,66,87,0]


inds = np.where(np.array(FR_UP)==2.)
FR_UP_2s = dact['EMUP'][inds] --- 977 inds
np.sum(FR_2s,0)
--- [[89,617,85,627],
      [172,1,0,0],
      [0,0,1,0],
      [102,108,151,1]]

inds = np.where(np.array(FR_UP)==3.) --- 708 inds
FR_UP_3s = dact['EMUP'][inds]
np.sum(FR_3s,0)
--- [[213,342,221,346],
      [297,1,6,6],
      [2,2,1,5],
      [207,232,241,2]]

inds = np.where(np.array(FR_UP)==4.) ---  816 inds
FR_UP_4s = dact['EMUP'][inds]
np.sum(FR_4s,0)
--- [[418,374,414,369],
      [418,0,4,3],
      [2,2,0,4],
      [424,418,413,1]]

inds = np.where(np.array(FR_UP)==5.) ---  1603 inds
FR_UP_5s = dact['EMUP'][inds]
np.sum(FR_5s,0)
--- [1343,437,1326,433],
    [569,2,1,1],
    [1,1,2,1],
    [1317,1333,1247,1]

inds = np.where(np.array(FR_UP)==6.) ---  4619 inds
FR_UP_6s = dact['EMUP'][inds]
np.sum(FR_6s,0)
--- [4413,759,4407,747],
    [4240,2,1,2],
    [3,3,2,1],
    [4415,4433,4283,3]

inds = np.where(np.array(FR_UP)==7.) --- 2713 inds
FR_UP_7s = dact['EMUP'][inds]
np.sum(FR_7s,0)
--- [2594,2172,2579,2071],
    [1977,0,2,2],
    [2,2,0,2],
    [2537,2538,2511,2]

inds = np.where(np.array(FR_UP)==8.) ---  35419 inds --- on time axis, when is this happening??
FR_UP_8s = dact['EMUP'][inds]
np.sum(FR_8s,0)
--- [35431,35368,35427,35366],
    [35403,3,13,13],
    [8,8,3,12],
    [35439,35427,35423,8]

ninds = np.where(FR_UP_8s[:,1,1]>0)
3933, 12190, 30613 -- single spikes.


* 20july02
** run 100 sec sim in '20july02_A_'
--'EMSTAY':16
--tstepPerAction:20
--EEMProb:1.0
--EEMRecProb:0
--weightVar:0.1
--RLlenhebb:20
--RLlenanti:20

** run 100 sec sim in '20july02_B_'
...reduce weights
-- EEMWghtAM:0.00001
-- EEMWghtNM:0.000001
-- EEPreMWghtAM:0.00006  - Not relevant
-- EEPreMWghtNM:0.000002  - Not relevant
-- EEMWghtThreshMin: 0.000006
-- EEMWghtThreshMax: 0.0003
-- EEMFeedbackWghtAM: 0.00001 - Not relevant
-- EEMFeedbackWghtNM: 0.000001 - Not relevant

** run 1000 sec sim in '20july02_B2_'
-- use same parameters as above.

** some ideas
-- may be adding EMSTAY has caused higher inhibition. so try reducing the strength of I to E in M.

** run 100 sec sim on cycle using same parameters as in '20july02_A_' but lower EMDOWN to IM and EMUP to IM and EMSTAY to IM.
-- reduce to 0.15 from 0.2

** run 1000 sec sim in '20july03_B_'
-- use same parameters as in '20july02_B_'
-- use RLhebbwt=0.0000001

** run 1000 sec sim in '20july03_B2_'
-- weightVar: 0.4

** run 1000 sec sim in '20july03_B3_' ----> not yet sumbitted
-- tstepPerAction:100ms
-- RLwindhebb: 100
-- RLlenhebb: 100
-- RLlenanti: 100


** SAM SUGGESTED:
-- look at normalizeAdjustableWeights to see options - EEMPopNorm might be useful - not sure

** start 1000 sec sim in '20july03_B2_R1_' and '20july03_B_R1_'

** run 200 sec sim on cycle in file "20july06_B_cycle_"
-- set rewards for 'followTarget' = 0 and 'avoidTarget' = 0
-- weightVar: 0.4
--use RLhebbwt=0.0000002



** run 1000 sec sim in "20july07_A_" ----> This got terminated.
-- weightVar: 0

** we saw that Hits performance increases while followtheball performance pleateus and starts slowly decaying.
-- Could this be because of the difference in score values used?
-- Check what happens if you keep both types of reward values same.

** run 1000 sec sim in "20july07_B_"
-- weightVar: 0
-- scorePoint: 0.25, losePoint: -0.25

** SOME IDEAS:

-- Lets say M neurons are under constant inhibition all the time.
-- When neurons in Visual Cortex get activated, it release the spatially associated M neurons from inhibition, and only those neurons can go under RL based plasticity.



comparing actions between '20jul8_A0_withMPI' (blue) and '20jul8_A0_noMPI' (red)
-- first difference is observed at time step # 74. withMPI had caction = 4 whereas noMPI had caction = 1
-- We can see that effect in input images. so that was clearly the effect of firing rates. so look at the raster plots.
-- save raster plot from 1380-1500 ms. all cells, input cells and output cells.


** some material to read:

https://medium.com/gradientcrescent/fundamentals-of-reinforcement-learning-automating-pong-in-using-a-policy-model-an-implementation-b71f64c158ff
https://arxiv.org/pdf/1807.08452.pdf


** Try original game vs current game

epCount = []
from aigame import AIGame
AIGame = AIGame()
rewards, epCount, proposed_actions, total_hits = AIGame.playGame([4], epCount)


for pong environments:
https://github.com/openai/gym/blob/master/gym/envs/__init__.py


--- LOOKS LIKE repeat_action_probability=0. not working properly.... see the discussion below.
https://github.com/openai/gym/issues/349

also check: 
PongNoFrameskip-v4
PongDeterministic-v0
PongDeterministic-v4


--- may be should use register(
            id='{}NoFrameskip-v0'.format(name),
            entry_point='gym.envs.atari:AtariEnv',
            kwargs={'game': game, 'obs_type': obs_type, 'frameskip': 1, 'repeat_action_probability': 0.25}, # A frameskip of 1 means we get every frame
            max_episode_steps=frameskip * 100000,
            nondeterministic=nondeterministic,
        )

        because i can assign rpeat_action_probabilyt:0


didnt work... seems like both NoFrameskip-v0 and NoFrameskip-v4 giving me same behavior.


* 20july10

** change to "env":  {"name": "Pong-v0", "frameskip":2, "savemp4":0} from  "env":  {"name": "PongNoFrameskip-v4", "savemp4":0}

** now decide how many STAYs needed to have no momentum.
-- "stayStepLim": 0,
-- "stayStepLim": 1,
-- "stayStepLim": 2,

** How many MODEL steps needed by racket to move from top to bottom?
-- "stayStepLim": 3 --- 14 MODEL Steps

so we can either use “stayStepLim”: 1 or “stayStepLim”: 2… there will be a compromise for  both 
for both transition from 3 to 4 and 4 to 3 is immediate (without momentum)
same when transition from 1 to 3 and 1 to 4
difference is only when we transition from 3 to 1 and 4 to 1
when we use stayStepLim:1, it takes 2 MODEL steps to overcome the momentum from 3 or 4 which ever it was
when we use stayStepLim:2, it takes 1 MODEL step to overcome the momentum from 3 or 4 which ever it was
staysteplim of 0 will have momentums in all transitions
so i could overcome momentum using staysteplim of 3 but then it would be difficult for racket to catch the ball
so in my opinion we could use a trick:
when action is 3 or 4, we take 1 STAY
if action is 1, we take 3 STAYs
or use staysteplim of 2
middle ground


WE DECIDED TO USE staysteplim of 1 for now.

** run 100 sec sim in "20jul10_A0_falcor_"
--change "RLlenhebb": 200 to "RLlenhebb": 50
-- change "RLlenanti": 200 to "RLlenanti": 50
(Length of the eligibility Hebbian and anti-Hebbian eligibility traces, or the decay time constants if the traces are decaying exponentials.)
-- change "RLwindhebb": 50 to "RLwindhebb": 20
(Maximum interval between pre- and post-synaptic events for an starting an eligibility trace.) 


** run 100 sec sim in "20jul10_B0_falcor"
-- all parameters are same as for "20jul10_B0_falcor"
-- change "FlowWidth":8 (default was 16)

** run 100 sec sim in "20jul10_C0_falcor"
-- all parameters are same as for "20jul10_B0_falcor"
-- change "FlowWidth":4 (default was 16)

** run 100 sec sim in "20jul10_A1_falcor_"
-- same parameters as in "20jul10_A0_falcor_"
-- use "tstepPerAction": 100 instead of "tstepPerAction": 20

** run 100 sec sim in "20jul10_B1_falcor"
-- same parameters as in "20jul10_B0_falcor_"
-- use "tstepPerAction": 100 instead of "tstepPerAction": 20

** run 1000 sec sim in "20jul10_C1_falcor"
-- all parameters are same as for "20jul10_C0_falcor"
-- use "tstepPerAction": 100 instead of "tstepPerAction": 20

** run 1000 sec sim in "20jul10_B2_falcor"
--resume from "20jul10_B1_falcor" 
--same parameters as in "20jul10_B1_falcor_"


** run 1000 sec sim in "20jul10_A2_falcor"
--resume from "20jul10_A1_falcor" 
--same parameters as in "20jul10_A1_falcor_"


* 20july13

** pull the latest version of code at 5:48 pm.

** run sim 100 sec "20jul13_A0_cycle_"
-- set "useRacketPredictedPos":0
-- "FLowWidth":16 (default)
-- remove "EMSTAY" from sim
-- Looks promising so run in "20jul13_A1_cycle_" for 1000 sec.

** run sim 100 sec "20jul13_B0_cycle_"
-- same as "20jul13_A0_cycle_"
-- "FLowWidth":8
-- Looks promising so run in "20jul13_B1_cycle_" for 1000 sec.

** run sim 100 sec "20jul13_C0_cycle_"
-- same as "20jul13_A0_cycle_"
-- "FLowWidth":4
-- Doesnt look very good. so drop this sim.json

** run sim 1000 sec "20jul13_A1_cycle_"
-- same as "20jul13_A0_cycle_"

** run sim 1000 sec "20jul13_B1_cycle_"
-- same as "20jul13_B0_cycle_"

** run sim 1000 sec "20jul13_B1lstep_cycle_"
-- same as "20jul13_B0_cycle_"
-- tstep = 100 ms

** run sim 1000 sec "20jul13_D1lstep_cycle_"
-- same as "20jul13_B1lstep_cycle_"
-- tstep = 100 ms
-- useRacketPredictedPos: 1
-- "FLowWidth":8
-- LOOKS improving

** resume sim 1000 sec "20jul13_D1lstep_cycle_" and save as "20jul13_D1lstep2_cycle_"
** resume sim 1000 sec "20jul13_D1lstep_cycle_" and save as "20jul13_E1lstep3_cycle_" ---->FILENAME MISTAKE. BE careful


** run sim 1000 sec "20jul13_D1_cycle_"
-- same as "20jul13_D1lstep_cycle_"
-- tstep = 20 ms
-- useRacketPredictedPos: 1
-- "FLowWidth":8

** run sim 1000 sec "20jul13_E1_cycle_"
-- same as "20jul13_D1_cycle_"
-- tstep = 20 ms
-- useRacketPredictedPos: 1
-- "FLowWidth":16

** run sim 1000 sec "20jul13_E1lstep_cycle_"
-- same as "20jul13_E1_cycle_"
-- tstep = 100 ms
-- useRacketPredictedPos: 1
-- "FLowWidth":16

** resume sim 1000 sec "20jul13_E1lstep_cycle_" and save as "20jul13_E1lstep2_cycle_"

For saving movies using png files.

import anim
anim.savemp4(inpath='CentroidTrackingImages/*.png',outpath='CentroidTracking.mp4',framerate=10)


plotting tips:


plotFollowBall(actreward,ax=subplot(1,3,1),cumulative=True,color='k');  ylim((0,.75))
plotHitMiss(actreward,ax=subplot(1,3,2),lclr=['k'],asratio=True); ylim((0,.75))
plotScoreMiss(actreward,ax=subplot(1,3,3),clr='k',asratio=True); ylim((0,.75))
2:44
plotHitMiss and have asratio=True


more plotting tips

lfn = ['20jun30_S0_cycle_', '20jun30_S1_cycle_', '20jun30_S2_cycle_', '20jul2_S3_cycle_', '20jul3_S4_cycle__step_0_','20jul3_S4_cycle__step_1_','20jul3_S4_cycle__step_2_','20jul3_S4_cycle__step_3_','20jul14_cont_20jul3_S4_cycle__step_3__step_0_']
lfn = ['data/'+x+'ActionsRewards.txt' for x in lfn]
pdac = getconcatactionreward(lfn)
plotFollowBall(pdac,ax=subplot(1,1,1),cumulative=True,color='b');  ylim((0,.45))
plotHitMiss(pdac,ax=subplot(1,1,1),lclr=['g'],asratio=True); ylim((0,.45))
plotScoreMiss(pdac,ax=subplot(1,1,1),clr='r',asratio=True); ylim((0,.45))
11:30
that's example, where lfn has the simulation names



*20july23

** I will start the parameters in file "/home/samn/SMARTAgent/backupcfg/20jul14_cont_with_norm_20jul3_S4_cycle__step_3__step_5_sim.json" as reference to start exploring further
** Additions: 
-- "env":  {"name": "Pong-v0", "frameskip":2, "savemp4":0},
-- "EEMFeedbackProb": 0.05
-- "EEMRecProb": 0.07
-- "weightVar": 0.4

** run 1000 sec sim in "20jul23_A0_cycle_"

** run 1000 sec sim in "20jul23_A0_falcor_" with timestep = 100 ms 
-- p(FollowBall) = 0.29
-- avg. Hit/Miss = 0.15
-- avg. Score/Miss = 0.03
-- Firing rates:  2.61 Hz (EMSTAY), 2.71 Hz (EMUP), 2.77 Hz (EMDOWN), 9.27 Hz (IM)


** run 1000 sec sim in "20jul23_A1_cycle_"
-- -- "EEMRecProb": 0.14

** run 1000 sec sim in "20jul23_A1_falcor_" with timestep = 100 ms
-- p(FollowBall) = 0.2867
-- avg. Hit/Miss = 0.16
-- avg. Score/Miss = 0.04
-- Firing rates: 2.71 Hz (EMSTAY), 2.82 Hz (EMUP), 2.84 Hz (EMDOWN), 9,45 Hz (IM)

** run 1000 sec sim in "20jul23_A2_cycle_"
-- "EEMRecProb": 0.21

** run 1000 sec sim in "20jul23_A2_falcor_" with timestep = 100 ms
-- p(FollowBall) ~ 0.28 (did not note down exact value, so should not compare)
-- avg. Hit/Miss = 0.16
-- avg. Score/Miss = 0.03
-- Firing rates: 2.76 Hz (EMSTAY), 2.86 Hz (EMUP), 2.89 Hz (EMDOWN), 9.59 (IM)

** run 100 sec sim in "20jul28_A0_falcor_"
-- EEMFeedbackProb = 0.1
-- EEMRecProb = 0.07

** run 100 sec sim in "20jul28_A1_falcor_"
-- EEMFeedbackProb = 0.15
-- EEMRecProb = 0.07

** run 100 sec sim in "20jul28_A2_falcor_"
-- EEMFeedbackProb = 0.2
-- EEMRecProb = 0.07



----------

SOME IDEAS TO WORK ON:


For Architecture:

Haroon: 
coz eventually sensory areas learn how to drive motor neurons based on these PFC-sensory connections
sensory cortex encodes sensory information as well as associations between what actions to execute based on the associations
so VC also needs learning

samn:meal:
i agree VC learning could help

Haroon Anwar:
i dont know just thinking how to make it more learnable

samn:
since no reason to assume our initial  wiring is optimal
but not sure i understand the PFC role yet ...
could develop that idea further

Haroon Anwar  11:35 AM
question is how to keep topological connectivity while making connections learnable
could be possibly different types of neurons

samn:meal: 
could use the V4, IT areas we had before to learn additional info on top of topology

Haroon Anwar:
with within area connectivity
good idea

samn:meal:
yeah, other types sg too
from serre's talk - he mentioned deep network with > 150 layers

Haroon Anwar:
so some neurons encode toplogy (FF) but then some neurons encode associations (via feedback and recurrent pathways)
topology means visual scene in topological manner

samn:
maybe we can't compete with a smaller network without those additional features
associations via feedback/recurrent - that sg

Haroon Anwar:
ok good
feeling excited about “associations via feedback/recurrent”

samn:
yeah, sounds interesting
either with RL or not - maybe interesting to compare

Haroon Anwar  11:39 AM
feedback with RL
recurrent with/without
feedback should be with RL
if not strongly FF driven
anyway
something interesting to move forward


http://www.neurosimlab.com/pdfs/jnm275_1.pdf

samn: suppose simpler to start just by looking at how weight matrix changes over time
either full matrix or subset of the weights

sam: in the old videos, looked like some locations were going up a lot and others not changing much
if that's right, it's a clue...what is special about the weights that increase a lot

samn: and would have to track it back to the neurons involved

Haroon Anwar: i think this is important question “what is special about the weights that increase a lot”

samn: ok good, so have a direction to explore

Haroon Anwar: and also otherway

samn: agree

Haroon Anwar: and also how does that increase influence the action




----------

*20jul29

** continue for 1000 sec sim in "20jul29_A0_falcor_" from "20jul28_A0_falcor"
-- EEMFeedbackProb = 0.1
-- EEMRecProb = 0.07

** continue for 1000 sec sim in "20jul29_A1_falcor_" from "20jul28_A1_falcor"
-- EEMFeedbackProb = 0.15
-- EEMRecProb = 0.07

** continue 1000 sec sim in "20jul29_A2_falcor_" from "20jul28_A2_falcor"
-- EEMFeedbackProb = 0.2
-- EEMRecProb = 0.07

** Run from start 1000 sec sim in "20jul29_A3_falcor_"
-- EEMFeedbackProb = 0.4
-- EEMRecProb = 0.07

** create a prob map of racket and ball locations (roughly) during the game.

sInputImages = np.zeros((20,20),dtype=float)
for i in range(10000):
  sInputImages = np.add(sInputImages,InputImages[i,:,:])

midInds = np.where(InputImages[:,10,10]>250)

# for each midInd, find 14 (13 could be enough but i am not sure) consecutive Images to see the trajectory. 
seqInputs = np.zeros((int(len(midInds[0])/2),14,20,20),dtype=float)
seqActions = np.zeros((int(len(midInds[0])/2),14),dtype=float)
seqPropActions = np.zeros((int(len(midInds[0])/2),14),dtype=float)
seqRewards = np.zeros((int(len(midInds[0])/2),14),dtype=float)
seqHitMiss = np.zeros((int(len(midInds[0])/2),14),dtype=float)
seqOutputsUP = np.zeros((int(len(midInds[0])/2),14,5,5),dtype=float)
seqOutputsDOWN = np.zeros((int(len(midInds[0])/2),14,5,5),dtype=float)
seqOutputsSTAY = np.zeros((int(len(midInds[0])/2),14,5,5),dtype=float)

dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop =lpop)

count = 0
for i in range(0,len(midInds[0]),2):
  cmidInd = midInds[0][i]
  for j in range(14):
    seqInputs[count,j,:,:] = InputImages[cmidInd+j,:,:]
    seqActions[count,j] = actreward['action'][cmidInd+j]
    seqRewards[count,j] = actreward['reward'][cmidInd+j]
    seqPropActions[count,j] = actreward['proposed'][cmidInd+j]
    seqHitMiss[count,j] = actreward['hit'][cmidInd+j]
    seqOutputsUP[count,j,:,:] = dact['EMUP'][cmidInd+j,:,:]
    seqOutputsDOWN[count,j,:,:] = dact['EMDOWN'][cmidInd+j,:,:]
    seqOutputsSTAY[count,j,:,:] = dact['EMSTAY'][cmidInd+j,:,:]
  count = count + 1

# now i have all inputs, outputs, actions and proposed etc for all inputs where the ball starts in the middle of the screen.
# But i need to pick up the sequences which are exactly like one another.

from scipy.stats import pearsonr
x = np.sum(seqInputs,axis=1)[1,:,:] #3:17
goodInds = []
for j in range(seqInputs.shape[0]):
  y = np.sum(seqInputs,axis=1)[j,:,:]
  corr, p_value = pearsonr(x.flat, y.flat)
  if corr>0.9:
    goodInds.append(j)

# for comparison only use correlated sequences...
seqInputs4comp = seqInputs[goodInds,:,:,:]
seqActions4comp = seqActions[goodInds,:]
seqRewards4comp = seqRewards[goodInds,:]
seqPropActions4comp = seqPropActions[goodInds,:]
seqHitMiss4comp = seqHitMiss[goodInds,:]
seqOutputsUP4comp = seqOutputsUP[goodInds,:,:,:]
seqOutputsDOWN4comp = seqOutputsDOWN[goodInds,:,:,:]
seqOutputsSTAY4comp = seqOutputsSTAY[goodInds,:,:,:]

lSeqNBs4comp = [0,1,2,3,4,5,6,7,8,9,10]

fig, axs = plt.subplots(6, 5, figsize=(10,8));
lax = axs.ravel()
for i in range(5):
  cSeq = lSeqNBs4comp[i]
  lax[i].imshow(np.sum(seqInputs4comp,axis=1)[cSeq])
  lax[i].axis('off')

for i in range(5):
  cSeq = lSeqNBs4comp[i+5]
  lax[i+15].imshow(np.sum(seqInputs4comp,axis=1)[cSeq])
  lax[i+15].axis('off')

for i in range(5):
  cSeq = lSeqNBs4comp[i]
  lax[i+5].plot(np.sum(np.sum(seqOutputsUP4comp,axis=2),axis=2)[cSeq],'b-o',markersize=3)
  lax[i+5].plot(np.sum(np.sum(seqOutputsDOWN4comp,axis=2),axis=2)[cSeq],'r-o',markersize=3)
  lax[i+5].plot(np.sum(np.sum(seqOutputsSTAY4comp,axis=2),axis=2)[cSeq],'g-o',markersize=3)
  if i==0: lax[i+5].set_ylabel('# of pop spikes')

lax[i+5].legend(['UP','DOWN','STAY'],loc='best')

for i in range(5):
  cSeq = lSeqNBs4comp[i+5]
  lax[i+20].plot(np.sum(np.sum(seqOutputsUP4comp,axis=2),axis=2)[cSeq],'b-o',markersize=3)
  lax[i+20].plot(np.sum(np.sum(seqOutputsDOWN4comp,axis=2),axis=2)[cSeq],'r-o',markersize=3)
  lax[i+20].plot(np.sum(np.sum(seqOutputsSTAY4comp,axis=2),axis=2)[cSeq],'g-o',markersize=3)
  if i==0: lax[i+20].set_ylabel('# of pop spikes')

for i in range(5):
  cSeq = lSeqNBs4comp[i]
  lax[i+10].plot(seqActions4comp[cSeq,:],'-o',color=(0,0,0,1),markersize=3)
  lax[i+10].plot(seqPropActions[cSeq,:],'-o',color=(0.5,0.5,0.5,1),markersize=3)
  lax[i+10].set_yticks([1,3,4])
  if i==0: lax[i+10].set_yticklabels(['STAY','DOWN','UP'])

lax[i+10].legend(['Actions','Proposed'],loc='best')

for i in range(5):
  cSeq = lSeqNBs4comp[i+5]
  lax[i+25].plot(seqActions4comp[cSeq,:],'-o',color=(0,0,0,1),markersize=3)
  lax[i+25].plot(seqPropActions[cSeq,:],'-o',color=(0.5,0.5,0.5,1),markersize=3)
  lax[i+25].set_yticks([1,3,4])
  if i==0: lax[i+25].set_yticklabels(['STAY','DOWN','UP'])


for i in range(0,len(midInds[0]),2):
  cmidInd = midInds[0][i]
  seqInputs[count,:,:] = InputImages[cmidInd,:,:]
  seqActions[count] = actreward['action'][cmidInd]
  seqRewards[count] = actreward['reward'][cmidInd]
  seqPropActions[count] = actreward['proposed'][cmidInd]
  seqHitMiss[count] = actreward['hit'][cmidInd]
  seqOutputsUP[count,:,:] = dact['EMUP'][cmidInd,:,:]
  seqOutputsDOWN[count,:,:] = dact['EMDOWN'][cmidInd,:,:]
  seqOutputsSTAY[count,:,:] = dact['EMSTAY'][cmidInd,:,:]
  count = count + 1

FR_UP = np.sum(np.sum(seqOutputsUP,axis=1),axis=1)
FR_DOWN = np.sum(np.sum(seqOutputsDOWN,axis=1),axis=1)
FR_STAY = np.sum(np.sum(seqOutputsSTAY,axis=1),axis=1)

fig, axs = plt.subplots(2, 3, figsize=(12,7));
lax = axs.ravel()
lax[0].imshow(np.sum(seqInputs,axis=0))
lax[0].axis('off')

lax[3].hist(FR_UP)
lax[3].set_xlabel('# of EMUP spikes')
lax[4].hist(FR_DOWN)
lax[4].set_xlabel('# of EMDOWN spikes')
lax[5].hist(FR_STAY)
lax[5].set_xlabel('# of EMSTAY spikes')

lax[1].hist(seqActions,bins=[-1.5,-0.5,0.5,1.5,2.5,3.5,4.5])
lax[1].set_xlabel('Actions')
lax[1].set_xticks([1,3,4])
lax[1].set_xticklabels(['STAY','DOWN','UP'])

lax[2].hist(seqPropActions,bins=[-1.5,-0.5,0.5,1.5,2.5,3.5,4.5])
lax[2].set_xlabel('Proposed Actions')
lax[2].set_xticks([1,3,4])
lax[2].set_xticklabels(['STAY','DOWN','UP'])

fig, axs = plt.subplots(4, 1, figsize=(10,8));
lax = axs.ravel()
lax[0].imshow(np.sum(seqInputs,axis=0))
lax[0].axis('off')
lax[1].plot(np.sum(np.sum(seqOutputsUP,axis=1),axis=1),'b-o',markersize=3)
lax[1].plot(np.sum(np.sum(seqOutputsDOWN,axis=1),axis=1),'r-o',markersize=3)
lax[1].plot(np.sum(np.sum(seqOutputsSTAY,axis=1),axis=1),'g-o',markersize=3)
lax[1].set_ylabel('# of pop spikes')
lax[2].plot(seqActions,'-o',color=(0,0,0,1),markersize=3)
lax[2].plot(seqPropActions,'-o',color=(0.5,0.5,0.5,1),markersize=3)
lax[2].set_yticks([1,3,4])
lax[2].set_yticklabels(['STAY','DOWN','UP'])
lax[3].plot(seqRewards ,'-o',color=(0,0,0,1),markersize=3)
lax[3].plot(seqHitMiss,'-o',color=(0.5,0.5,0.5,1),markersize=3)
lax[3].set_yticks([-1,0,1])
lax[3].legend(['Rewards','Hit/Moss'])
lax[1].legend(['UP','DOWN','STAY'],loc='best')
lax[2].legend(['Actions','Proposed'],loc='best')


--- Not sure how the above analysis would help figure out the problem with the circuit.
-- No need for targetCorr in function: analyzeRepeatedInputForSingleEvent(dact, InputImages, targetPixel=(10,10)) 

----------

*20aug04

def setdminID (sim, lpop):
  # setup min ID for each population in lpop
  alltags = sim._gatherAllCellTags() #gather cell tags; see https://github.com/Neurosim-lab/netpyne/blob/development/netpyne/sim/gather.py
  dGIDs = {pop:[] for pop in lpop}
  for tinds in range(len(alltags)):
    if alltags[tinds]['pop'] in lpop:
      dGIDs[alltags[tinds]['pop']].append(tinds)
  sim.simData['dminID'] = {pop:np.amin(dGIDs[pop]) for pop in lpop}


  -- why only setdminID(sim, ['ER', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE'])?

  -- added capability in script to remove 'ER' and 'IR' from simulation so that V1 is directly driven by the stimMod.
  -- simdat.py needs adjustment accordingly. 

  -- running 1000 sec sim in "20aug05_B0_cycle" with 100 ms step and no ER and no IR.
  -- changed parameters in sim.json based on sn.json

  -- Why do we apply RL to the pop which produced action and why not apply RL to the pop which is expected to produce CORRECT action.
  -- Is the reason for above choice is because applying reward/punishment to the pop which is expected to produce CORRECT action because its nonbiological?



  -- add "anticipatedRL": 0 in "sim"
  
  * 20aug06

  -- added rule for "anticipatedRL" as shown below

  if dconf['sim']['anticipatedRL']==1:
    for cpaction in proposed_actions:
      anticipated_reward = dconf['rewardcoded']['followTarget']
      if cpaction==dconf['moves']['UP']:
        if dconf['verbose']: print('APPLY RL to EMUP')
        for STDPmech in dSTDPmech['EMUP']: STDPmech.reward_punish(float(anticipated_reward))
      elif cpaction==dconf['moves']['DOWN']:
        if dconf['verbose']: print('APPLY RL to EMDOWN')
        for STDPmech in dSTDPmech['EMDOWN']: STDPmech.reward_punish(float(anticipated_reward))
      elif cpaction==dconf['moves']['STAY'] and dnumc['EMSTAY']>0:
        if dconf['verbose']: print('APPLY RL to EMSTAY')
        for STDPmech in dSTDPmech['EMSTAY']: STDPmech.reward_punish(float(anticipated_reward))
      else:
        print('No anticipated action for the input!!!')
  else:
    if critic != 0: 
    .......... # previous code

-- run 10 sec sim using anticipatedRL in "20aug04_A0_cycle_" on falcor... still using probabilistic connections.

-- run 1000 sec sim using anticipatedRL in "20aug06_A0_falcor_" on falcor... still using probabilistic connections.

-- tuning parameters to run with topological connectivity in "20aug06_B0_falcor_"

        "EEMWghtAM": 5e-05, --> premotor to motor connection strengths. --->
        "EEMWghtNM": 5e-06,
        "EEPreMWghtAM": 8e-05,
        "EEPreMWghtNM": 2.5e-06,
        "EEMWghtThreshMin": 6.25e-06,
        "EEMWghtThreshMax": 0.00032,
        "EEMProb": 0.3,
        "EEMRecProb": 0.3,
        "EEPreMProb": 0.0,
        "EEMPopNorm": 1,
        "EEMRecProbCross": 0,
        "EEMFeedbackProb": 0.0,
        "EEMFeedbackWghtAM": 1.25e-05,
        "EEMFeedbackWghtNM": 1.25e-06,
        "VisualFeedback": 0,
        "weightVar": 0.5

-- run 100 sec sim in "20aug06_B1_falcor_" with topological connectivity and "EEMWghtAM": 5e-3, EMDOWN=400 and EMUP = 400

-- analysis functions modified... should work with any number of neurons in M.

analyzeRepeatedInputSequences(dact,dnumc,InputImages, targetPixel=(10,10),nbseq=14,targetCorr=0.9)
-- plotting fix number of sequences 1-10.... should be able to plot any 10. will modify later.
analyzeRepeatedInputForSingleEvent(dact, dnumc, InputImages, targetPixel=(10,10))

-- debugged and using dictionaries now.
analyzeRepeatedInputSequences(dact, InputImages, targetPixel=(10,10),nbseq=14,targetCorr=0.9)
analyzeRepeatedInputForSingleEvent(dact, InputImages, targetPixel=(10,10))

Debugging function in simdat.py--- analyzeRepeatedInputSequences(dact, InputImages, targetPixel=(10,10),nbseq=14,targetCorr=0.9):

-- instead of choosing alternative indices, i am looking for seqStartIndices with no repetitive sequences.

  midInds = np.where(InputImages[:,targetPixel[0],targetPixel[1]]>250)
  repSeqInds = []
  for i in range(len(midInds[0])-1):
    if midInds[0][i+1]-midInds[0][i]<5:
      repSeqInds.append(i+1)
  uniqueSeqStartInds = []
  for i in range(len(midInds[0])):
    if i not in repSeqInds:
      uniqueSeqStartInds.append(midInds[0][i])

-- still need to test it.

-- if the number of sequences is less than 10, then dont generate an error. checking.....


* 20aug10

-- TASK: ADD PADDING NEURONS TO AVOID BOUNDARY EFFECTS IN THE NETWORK.

-- Features:
1. should be automatic
2. Number of padding neurons will depend on Size of Pop and Connections generated from the pop.
    e.g. if we have 10x10 neurons in a population and 3x3 neurons are projecting from this population to other population
    then we need to add a single layer of neurons around 10x10 neurons which will be 44 additional neurons.
    if we have 10x10 neurons in a population and 5x5 neurons are projecting from this population to other population 
    then we need to add double layer of neurons around 10x10 neurons which be 44 additional neurons in first layer and 52
    additional neurons in 2nd layer. 

-- to automate, add topological connectivity parameters in the sim.json file as follows.

        "alltopolcons":{
            "ER":{"IR":3,"EV1":3},
            "IR":{"ER":5},
            "EV1":{"IV1":3,"EV4":3,"ER":3},
            "IV1":{"EV1":5,"IV4":5,"ER":5},
            "EV4":{"IV4":3,"EMT":3,"EV1":3},
            "IV4":{"EV4":5,"IMT":5,"EV1":5},
            "EMT":{"IMT":3,"EV4":3},
            "IMT":{"EMT":5,"EV4":5}
        },
        "useNeuronPad": 1,

-- update number of neurons by including padding neurons, if useNeuronPad = 1	

dnumc_padx = OrderedDict({ty:dconf['net']['allpops'][ty]*0 for ty in allpops}) # a dictionary with zeros to keep number of padded neurons in one dimension

dtopolcons = dconf['net']['alltopolcons']
allpops_withtopology = list(dtopolcons.keys())
# below is the code for updating neuronal pop size to include padding. 
if useNeuronPad:
  for pop in allpops_withtopology:
    max_receptive_field = np.amax(list(dtopolcons[pop].values()))
    if dnumc[pop]>0 and max_receptive_field>0:
      dnumc[pop] = int((np.sqrt(dnumc[pop])+max_receptive_field-1)**2)
      dnumc_padx[pop] = max_receptive_field-1

-- take care of padded neurons while making connection list using:

def connectLayerswithOverlap (NBpreN, NBpostN, overlap_xdir,padded_preneurons_xdir,padded_postneurons_xdir):

could be used as 

connectLayerswithOverlap(NBpreN = dnumc['EV1'], NBpostN = dnumc['EV4'], overlap_xdir = dtopolcons['EV1']['EV4'], padded_preneurons_xdir = dnumc_padx['EV1'], padded_postneurons_xdir = dnumc_padx['EV4'])


    targetOffset_x = int(padded_postneurons_xdir/2)
    targetOffset_y = int(padded_postneurons_xdir/2) # assuming we have pops in square format. so anything x dimension would be same as in y dimension
    sourceOffset_x = int(padded_preneurons_xdir/2)
    sourceOffset_y = int(padded_preneurons_xdir/2) # assuming we have pops in square format. so anything x dimension would be same as in y dimension
    target_postNIndices = list(range(targetOffset_x,NBpostN_x-targetOffset_x,1))
    source_preNIndices = list(range(sourceOffset_x,NBpreN_x-sourceOffset_x,int(convergence_factor_x)))
    for i in range(len(target_postNIndices)):				#parse the non
        for j in range(len(target_postNIndices)):
            postN = int(postNIndices[target_postNIndices[i],target_postNIndices[j]])
            preN = int(preNIndices[source_preNIndices[i],source_preNIndices[j]]) 
            preNIndices[int(i*convergence_factor_y),int(j*convergence_factor_x)]


-- similar modifications in:
def connectLayerswithOverlapDiv(NBpreN, NBpostN, overlap_xdir,padded_preneurons_xdir,padded_postneurons_xdir):

except now:

    target_postNIndices = list(range(targetOffset_x,NBpostN_x-targetOffset_x,int(divergence_factor_x)))
    source_preNIndices = list(range(sourceOffset_x,NBpreN_x-sourceOffset_x,1))


-- looked GOOD

-- now the problem is that I have extra neurons which are not used in network. These neurons were generated because I used receptive field size for both convergent and divergent connections.
-- We dont need to consider adding neurons (padding) for divergent connections. so i changes sim.json to


        "alltopoldivcons":{
            "IR":{"ER":5},
            "EV1":{"ER":3},
            "IV1":{"EV1":5,"ER":5},
            "EV4":{"EV1":3},
            "IV4":{"EV4":5,"EV1":5},
            "EMT":{"EV4":3},
            "IMT":{"EMT":5,"EV4":5}
        },
        "alltopolconvcons":{
            "ER":{"IR":3,"EV1":3},
            "EV1":{"IV1":3,"EV4":3},
            "IV1":{"IV4":5},
            "EV4":{"IV4":3,"EMT":3},
            "IV4":{"IMT":5},
            "EMT":{"IMT":3}
        },

and 


dtopoldivcons = dconf['net']['alltopoldivcons']
dtopolconvcons = dconf['net']['alltopolconvcons']
allpops_withconvtopology = list(dtopolconvcons.keys())
# below is the code for updating neuronal pop size to include padding. 
if dconf['net']['useNeuronPad']==1:
  for pop in allpops_withconvtopology:
    receptive_fields = []
    for postpop in list(dtopolconvcons[pop].keys()):
      if dnumc[postpop]>0:
        receptive_fields.append(dtopolconvcons[pop][postpop])
    if len(receptive_fields)>0:
      max_receptive_field = np.amax(receptive_fields)
    else:
      max_receptive_field = 0
    if dnumc[pop]>0 and max_receptive_field>0:
      dnumc[pop] = int((np.sqrt(dnumc[pop])+max_receptive_field-1)**2)
      dnumc_padx[pop] = max_receptive_field-1




Changes In aigame.py

-- initialization:
.... finding receptive field size to use for padding
    self.dReceptiveField = OrderedDict({pop:np.amax(list(dconf['net']['alltopolconvcons'][pop].values())) for pop in self.lratepop})
.... dictionary of pop size after padding.
    self.dInputs = OrderedDict({pop:int((np.sqrt(dconf['net']['allpops'][pop])+self.dReceptiveField[pop]-1)**2) for pop in self.lratepop})
.... if use neuron padding, then create dictionary with different size.
    if dconf['net']['useNeuronPad']==1:
      self.dFiringRates = OrderedDict({pop:np.zeros(dInputs[pop]) for pop in self.lratepop}) # python objects for firing rate calculations
    else:
      self.dFiringRates = OrderedDict({pop:np.zeros(dconf['net']['allpops'][pop]) for pop in self.lratepop}) # python objects for firing rate calculations
.... if use neuron padding, compute input_dims accordingly:
    if dconf['net']['useNeuronPad']==1:
      self.input_dim = int(np.sqrt(self.dInputs[self.InputPop]))
    else:  
      self.input_dim = int(np.sqrt(dconf['net']['allpops'][self.InputPop])) # input image XY plane width,height -- not used anywhere

-- function to update firing rates of neurons when using padded neurons.

  def updateInputRatesWithPadding (self, dsum_Images):
    # update input rates to retinal neurons
    padded_Image = np.zeros(shape=(self.input_dim,self.input_dim))
    offset = int((self.dReceptiveField[self.InputPop]-1)/2)
    padded_Image[offset:offset+dsum_Images.shape[0],offset:offset+dsum_Images.shape[1]]=dsum_Images
    fr_Images = 40/(1+np.exp((np.multiply(-1,padded_Image)+123)/25))
    fr_Images = np.subtract(fr_Images,np.min(fr_Images)) #baseline firing rate subtraction. Instead all excitatory neurons are firing at 5Hz.
    print(np.amin(fr_Images),np.amax(fr_Images))
    self.dFiringRates[self.InputPop] = np.reshape(fr_Images,self.dInputs[self.InputPop]) #400 for 20*20, 900 for 30*30, etc.

-- updating firing rates of input neurons.

    if dconf['net']['useNeuronPad']==1:
      self.updateInputRatesWithPadding(dsum_Images)
    else:
      self.updateInputRates(dsum_Images) # update input rates to retinal neurons


-- tested a little bit--- seems that the padding is working without any problem.

-- running 500 sec sim on falcor with paddings "20aug11_A0_falcor_"


* 20aug12

-- Things to do:

1. background should be 0 firing rate and binary firing rates.
2. try with edges instead of full objects
3. better measure of performance

-------------------------------------------------------------------
Solving 1. background should be 0 firing rate and binary firing rates.

-- find the range of firing rates:

from netpyne import specs, sim
from neuron import h
import numpy as np
import random
from conf import dconf # configuration dictionary
import pandas as pd
import pickle
from collections import OrderedDict
from connUtils import *
from matplotlib import pyplot as plt
import os
import anim
from matplotlib import animation
from aigame import AIGame
sim.AIGame = AIGame()
rewards, epCount, proposed_actions, total_hits = sim.AIGame.playGame(actions= [3], epCount = 0)

>>> np.unique(sim.AIGame.dFiringRates['EV1'])
array([ 0.        , 33.00293599])

-- for nonpadded case, we got 2 firing rates.
-- with padded case, we get more than 2 firing rates (probably 3 because we subtract 0 from the firing rates instead of subtracting min value).
---> See fix below:

>>> np.unique(sim.AIGame.dFiringRates['EV1DS'])
array([ 0., 50.])

-- for converting image to binary use

from skimage.filters import threshold_otsu
thresh = threshold_otsu(image)
binary = image > thresh



-- before was using 0 value for padded input pixels.
now using min value for padded input pixels: 

def updateInputRatesWithPadding (self, dsum_Images):
  padded_Image = np.amin(dsum_Images)*np.ones(shape=(self.input_dim,self.input_dim))
  offset = int((self.dReceptiveField[self.InputPop]-1)/2)
  padded_Image[offset:offset+dsum_Images.shape[0],offset:offset+dsum_Images.shape[1]]=dsum_Images
  if dconf['net']['useBinaryImage']==1:
    thresh = threshold_otsu(padded_Image)
    binary_Image = padded_Image > thresh
    fr_Images = 50.0*binary_Image
  else:
    padded_Image = padded_Image - np.amin(padded_Image)
    fr_Images = 40/(1+np.exp((np.multiply(-1,padded_Image)+123)/25))
    fr_Images = np.subtract(fr_Images,np.min(fr_Images))
  self.dFiringRates[self.InputPop] = np.reshape(fr_Images,self.dInputs[self.InputPop])


similarly:

def updateInputRates (self, dsum_Images):
  if dconf['net']['useBinaryImage']==1:
    thresh = threshold_otsu(dsum_Images)
    binary_Image = dsum_Images > thresh
    fr_Images = 50.0*binary_Image
  else:
    fr_Images = 40/(1+np.exp((np.multiply(-1,dsum_Images)+123)/25))
    fr_Images = np.subtract(fr_Images,np.min(fr_Images)) 
  self.dFiringRates[self.InputPop] = np.reshape(fr_Images,dconf['net']['allpops'][self.InputPop])


-- PROBLEM: max firing rates of EV1 (~33 Hz) and EV1D(50Hz) were different. 



using fr_Images = 50/(1+np.exp((np.multiply(-1,dsum_Images)+123)/25))

np.unique(sim.AIGame.dFiringRates['EV1'])
array([ 0.36231198, 43.75388096])


using fr_Images = 50/(1+np.exp((np.multiply(-1,dsum_Images)+123)/10))

-- SOLUTION:

padded_Image = padded_Image - np.amin(padded_Image)
padded_Image = (255.0/np.amax(padded_Image))*padded_Image # this will make sure that padded_Image spans 0-255
fr_Images = 50/(1+np.exp((np.multiply(-1,padded_Image)+123)/10))


and 

dsum_Images = dsum_Images - np.amin(dsum_Images)
dsum_Images = (255.0/np.amax(dsum_Images))*dsum_Images
fr_Images = 50/(1+np.exp((np.multiply(-1,dsum_Images)+123)/10))


-- now firing rates are close enough....when using nonbinary image.

>>> np.unique(sim.AIGame.dFiringRates['EV1'])[1]
49.99990747011135
>>> np.unique(sim.AIGame.dFiringRates['EV1'])[0]
0.00022758618723999394



-- run 1000 sec sim on cycle "20aug12_A0_cycle_" with padding and binary inputs.

        "useNeuronPad": 1,
        "useBinaryImage": 1,



-- some idea for analysis:

"i think its unfair to look at the hits/misses etc for all possible scenarios lumped together…… 
the model learns from its experience. to judge the real performance, need to isolate which pattern 
repeated and for that repeated pattern over time, did model learn to hit the ball or not over time….. 
if during 2000 sec the model experienced 1000 times new sequence/pattern of ball and only 10 times 
repeated sequence…. i should not expect from the model to hit the ball in those 1000 new sequences…. 
if it did it was by chance. only for 10 times repeated sequences, the model should get better at 
hitting the ball"


-- revisting topological connectivity between preM and M neurons.

1. Using topological connections between preM and M, only topologically relevant neurons will be involved in action generation.
2. Lets say, the ball is at (10,10) and moving towards SE, the racket is at (10,19) moving North (i.e. UP):
    -- The ball will activate neurons at location (10,10) in EV1 and EV1DSE.
    -- The racket will activate neurons at location (10,19) in EV1 and EV1DN.
    -- Goal is that when next time, these neurons are activated, Racket should move DOWN.
    -- This could be acheieved 2 ways: 1. Strengthening connections between the activated neurons and EMDOWN or 2. Weakening connections between the activated neurons and EMUP.


-- need to look into direction selectivitiy firing rates code.....


>>> from neuron import h
>>> from pylab import concatenate, figure, show, ion, ioff, pause,xlabel, ylabel, plot, Circle, sqrt, arctan, arctan2, close
>>> from copy import copy, deepcopy
>>> from random import uniform, seed, sample, randint
>>> from matplotlib import pyplot as plt
>>> import random
>>> import numpy as np
>>> from skimage.transform import downscale_local_mean, resize
>>> from skimage.color import rgb2gray
>>> from skimage.filters import threshold_otsu
>>> import json
>>> import gym
>>> import sys
>>> from gym import wrappers
>>> from time import time
>>> from collections import OrderedDict
>>> from imgutils import getoptflow
>>> from imgutils import getObjectsBoundingBoxes, getObjectMotionDirection
>>> import cv2
>>> from centroidtracker import CentroidTracker
>>> from conf import dconf
>>> env = gym.make(dconf['env']['name'],frameskip=dconf['env']['frameskip'],repeat_action_probability=0.)
>>> env.reset()
>>> courtYRng = (34, 194)
>>> courtXRng = (20, 140)
>>> racketXRng = (141, 144)
>>> lobs_gimage_ds = [] # because no action has been taken place yet.
caction = 3 # take a random action.
observation, reward, done, info = env.step(caction)
last_obs = observation
gray_Image = 255.0*rgb2gray(observation[courtYRng[0]:courtYRng[1],:,:])
gray_ns = np.where(gray_Image>np.min(gray_Image)+1,255,gray_Image)
last_objects = OrderedDict()
FullImages = []
lgimage_ns = []
lgimage_ns.append(gray_ns)
nsum_Images = lgimage_ns[0]
FullImages.append(nsum_Images)

ct = CentroidTracker()
objects = OrderedDict() # objects detected in current frame
last_objects = OrderedDict() # objects detected in previous frame

last_objects, ldflow = computeAllObjectsMotionDirections(FullImages, last_objects, ldflow, UseFull=1)

def computeAllObjectsMotionDirections(FullImages, last_objects, ldflow, UseFull=False):
  dirSensitiveNeuronDim = 20
  #Detect the objects, and initialize the list of bounding box rectangles
  if len(FullImages)==0: return
  cimage = FullImages[-1]
  rects = getObjectsBoundingBoxes(cimage)
  cimage = np.ascontiguousarray(cimage, dtype=np.uint8)
  # update our centroid tracker using the computed set of bounding box rectangles
  objects = ct.update(rects)
  if len(last_objects)==0: 
    last_objects = deepcopy(objects)
    flow = np.zeros(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim,2))
    mag = np.zeros(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim))
    ang = np.zeros(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim))
    ang[mag == 0] = -100
    goodInds = np.zeros(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim))
  else:
    dirX, dirY = getObjectMotionDirection(objects, last_objects, rects, dims=np.shape(cimage)[0],\
                                          FlowWidth=dconf['DirectionDetectionAlgo']['FlowWidth'])
    if np.shape(cimage)[0] != dirSensitiveNeuronDim or np.shape(cimage)[1] != dirSensitiveNeuronDim:
      dirX = resize(dirX, (dirSensitiveNeuronDim, dirSensitiveNeuronDim), anti_aliasing=True)
      dirY = resize(dirY, (dirSensitiveNeuronDim, dirSensitiveNeuronDim), anti_aliasing=True)
    mag, ang = cv2.cartToPolar(dirX, -1*dirY)
    ang = np.rad2deg(ang)
    ang[mag == 0] = -100
    last_objects = deepcopy(objects)
    flow = np.zeros(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim,2))
    flow[:,:,0] = dirX
    flow[:,:,1] = dirY
    goodInds = np.zeros(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim))
  ldflow.append({'flow':flow,'mag':mag,'ang':ang,'goodInds':goodInds,'thang':ang,'thflow':flow})
  return last_objects, ldflow



-----------------------------------------------

from netpyne import specs, sim
from neuron import h
import numpy as np
import random
from conf import dconf # configuration dictionary
import pandas as pd
import pickle
from collections import OrderedDict
from connUtils import *
from matplotlib import pyplot as plt
import os
import time
import anim
from matplotlib import animation

from aigame import AIGame
sim.AIGame = AIGame()
t = 0
for _ in range(100000):
  rewards, epCount, proposed_actions, total_hits = sim.AIGame.playGame([random.randint(3,4)], 0, t)

t = 1
def plotDSneuronsFiringRates(t,sim):
  fig = plt.figure(figsize=(10, 7.5))
  grid = plt.GridSpec(3, 4)
  ax0 = fig.add_subplot(grid[0,0])
  ax1 = fig.add_subplot(grid[0,1])
  ax2 = fig.add_subplot(grid[0,2])
  ax3 = fig.add_subplot(grid[0,3])
  ax4 = fig.add_subplot(grid[1,:])
  ax5 = fig.add_subplot(grid[2,:])
  ax0.imshow(sim.AIGame.FullImages[t-1])
  ax0.set_title('Image at [t-1]')
  ax1.imshow(sim.AIGame.FullImages[t])
  ax1.set_title('Image at [t]')
  a2 = ax2.quiver(sim.AIGame.ldflow[t]['flow'][:,:,0],-sim.AIGame.ldflow[t]['flow'][:,:,1], pivot='mid', units='inches',width=0.022,scale=1/0.25)
  ax2.invert_yaxis()
  ax2.set_title('Directions')
  a3 = ax3.imshow(sim.AIGame.ldflow[t]['ang'])
  ax3.set_title('Direction Angles')
  plt.colorbar(a3,ax=ax3)
  ax4.plot(sim.AIGame.dAllFiringRates[t]['EV1DE'],'k')
  ax4.plot(sim.AIGame.dAllFiringRates[t]['EV1DNE'],'r')
  ax4.plot(sim.AIGame.dAllFiringRates[t]['EV1DN'],'b')
  ax4.plot(sim.AIGame.dAllFiringRates[t]['EV1DNW'],'g')
  ax4.set_ylabel('Firing rate (Hz)')
  ax4.set_xlabel('Neurons')
  ax4.legend(['E','NE','N','NW'])
  ax5.plot(sim.AIGame.dAllFiringRates[t]['EV1DW'],'k--')
  ax5.plot(sim.AIGame.dAllFiringRates[t]['EV1DSW'],'r--')
  ax5.plot(sim.AIGame.dAllFiringRates[t]['EV1DS'],'b--')
  ax5.plot(sim.AIGame.dAllFiringRates[t]['EV1DSE'],'g--')
  ax5.set_ylabel('Firing rate (Hz)')
  ax5.set_xlabel('Neurons')
  ax5.legend(['W','SW','S','SE'])
  plt.show()


-- could use another analysis first:
E_fr = []
W_fr = []
for t in range(len(sim.AIGame.dAllFiringRates)):
  E_fr.append(np.sum(sim.AIGame.dAllFiringRates[t]['EV1DE']))
  W_fr.append(np.sum(sim.AIGame.dAllFiringRates[t]['EV1DW']))



-- whenever S activates, 4-5 Hz activity in SW but not in SE. see t110, t119, t123
-- SE got activated (4 Hz) in t118.


--- look at the conversion from angle to Firing rates

def updateDirSensitiveRates (sim,t):
  dirSensitiveNeuronDim = 20
  AngRFSigma2 = 22.5*22.5
  MaxRate = 50
  dAngPeak = OrderedDict({'EV1DE': 0.0,'EV1DNE': 45.0, # receptive field peak angles for the direction selective populations
                          'EV1DN': 90.0,'EV1DNW': 135.0,
                          'EV1DW': 180.0,'EV1DSW': 235.0,
                          'EV1DS': 270.0,'EV1DSE': 315.0})
  dflow = sim.AIGame.ldflow[t]
  motiondir = dflow['thang'] # angles in degrees, but thresholded for significant motion; negative value means not used
  for pop in sim.AIGame.ldirpop: dFiringRates[pop] = MaxRate * np.ones(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim))
  if EXPDir:
    for y in range(motiondir.shape[0]):
      for x in range(motiondir.shape[1]):
        if motiondir[y,x] >= 0.0: # make sure it's a valid angle
          for pop in sim.AIGame.ldirpop:
            fctr = np.exp(-1.0*(getangdiff(motiondir[y][x],dAngPeak[pop])**2)/AngRFSigma2)
            dFiringRates[pop][y,x] += MaxRate * fctr
    



--- try this from SAM:

binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DW']}
for k,clr in zip(list(dhist.keys()),['r','b']): plot(dhist[k][0],dhist[k][1],clr)




dAngPeak = OrderedDict({'EV1DE': 0.0,'EV1DNE': 45.0,'EV1DN': 90.0,'EV1DNW': 135.0,'EV1DW': 180.0,'EV1DSW': 235.0,'EV1DS': 270.0,'EV1DSE': 315.0})



-- 

For 0 degree direction angle firing rates of direction selective neurons are:

print('E:',50*np.exp(-1.0*(getangdiff(0,dAngPeak['EV1DE'])**2)/AngRFSigma2))
print('NE:',50*np.exp(-1.0*(getangdiff(0,dAngPeak['EV1DNE'])**2)/AngRFSigma2))
print('N:',50*np.exp(-1.0*(getangdiff(0,dAngPeak['EV1DN'])**2)/AngRFSigma2))
print('NW:',50*np.exp(-1.0*(getangdiff(0,dAngPeak['EV1DNW'])**2)/AngRFSigma2))
print('W:',50*np.exp(-1.0*(getangdiff(0,dAngPeak['EV1DW'])**2)/AngRFSigma2))
print('SW:',50*np.exp(-1.0*(getangdiff(0,dAngPeak['EV1DSW'])**2)/AngRFSigma2))
print('S:',50*np.exp(-1.0*(getangdiff(0,dAngPeak['EV1DS'])**2)/AngRFSigma2))
print('SE:',50*np.exp(-1.0*(getangdiff(0,dAngPeak['EV1DSE'])**2)/AngRFSigma2))

E: 50.0
NE: 0.9157819444367089
N: 5.626758735962956e-06
NW: 1.1597614151217848e-14
W: 8.019054452743189e-27
SW: 1.971602355360359e-12
S: 5.626758735962956e-06
SE: 0.9157819444367089


For 0 degree direction angle firing rates of direction selective neurons are:

E = []
NE = []
N = []
NW = []
W = []
SW = []
S = []
SE = []
for a in range(0,360,1):
  E.append(50*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DE'])**2)/AngRFSigma2))
  NE.append(50*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DNE'])**2)/AngRFSigma2))
  N.append(50*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DN'])**2)/AngRFSigma2))
  NW.append(50*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DNW'])**2)/AngRFSigma2))
  W.append(50*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DW'])**2)/AngRFSigma2))
  SW.append(50*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DSW'])**2)/AngRFSigma2))
  S.append(50*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DS'])**2)/AngRFSigma2))
  SE.append(50*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DSE'])**2)/AngRFSigma2))


from matplotlib import pyplot as plt
plt.plot(E,'k')
plt.plot(NE,'r')
plt.plot(N,'b')
plt.plot(NW,'g')
plt.plot(W,'k--')
plt.plot(SW,'r--')
plt.plot(S,'b--')
plt.plot(SE,'g--')
plt.legend(['E','NE','N','NW','W','SW','S','SE'])
plt.ylabel('Firing rate (Hz)')
plt.show()


-- The bug was in here:
dAngPeak = OrderedDict({'EV1DE': 0.0,'EV1DNE': 45.0,'EV1DN': 90.0,'EV1DNW': 135.0,'EV1DW': 180.0,'EV1DSW': 235.0,'EV1DS': 270.0,'EV1DSE': 315.0})


'EV1DSW': 235.0 ----> should be --->'EV1DSW': 225.0


dAngPeak = OrderedDict({'EV1DE': 0.0,'EV1DNE': 45.0,'EV1DN': 90.0,'EV1DNW': 135.0,'EV1DW': 180.0,'EV1DSW': 225.0,'EV1DS': 270.0,'EV1DSE': 315.0})



-- Use this code provided by sam to debug further.


python -i simdat.py backupcfg/20aug14_C0_cycle_sim.json
dobjpos = loadObjPos() ## 
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DW']}
clf(); viewInput(2300,InputImages,ldflow,dhist,['EV1DE','EV1DW'],['r','b'], twin=1000, dobjpos=dobjpos)
t= 2300 ball x= 2.8125 y= 17.1875
t= 2300 racket x= 17.625 y= 8.6875
t= 2320 ball x= 2.6875 y= 17.3125
t= 2320 racket x= 17.625 y= 8.6875


* 20aug18

-- When i used the above code to plot the images, object locations, direction of motion and activity of neurons, the first thing we notice is that the coordinates of detected objects are slighly off.

Task 1: Find the reason why is it so....
-- could be a bug or could be saving incorrect information.

First step: I will run the game seperately.

-- I thought the problem might be that position was plotted for the last object and not the objects in the current frame. But the viewInput function in simdat.py takes care of this.

-- So i need to test if the find object is working properly or not....

from skimage.color import rgb2gray
import numpy as np
from matplotlib import pyplot as plt
import gym
env = gym.make('Pong-v0',repeat_action_probability=0.)
courtYRng = (34, 194)
courtXRng = (20, 140)
racketXRng = (141, 144)
dObjPos = {'time':[], 'racket':[], 'ball':[]}
last_obs = []

# will take 20 steps as it takes to get the game started i.e. 2 rackets and a ball appears on the screen

for _ in range(20):
  observation, reward, done, info = env.step(3)

# since i used action = 3 for first 20 steps, the racket moved to the bottom corner. so i will run a couple of actions "UP" so that racket can move towards the center

observation, reward, done, info = env.step(4)
observation, reward, done, info = env.step(4)
observation, reward, done, info = env.step(4)
observation, reward, done, info = env.step(4)

# Now i will test the function find_obj on the observation.

def findobj (img, xrng, yrng):
  # find an object's x, y position in the image (assumes bright object on dark background)
  subimg = img[yrng[0]:yrng[1],xrng[0]:xrng[1],:]
  sIC = np.sum(subimg,2) #assuming the color of object is uniform, add values or r,g,b to get a single value      
  pixelVal = np.amax(sIC) #find the pixel value representing object assuming a black background
  sIC[sIC<pixelVal]=0 #make binary image
  Obj_inds = []
  for i in range(sIC.shape[0]):
    for j in range(sIC.shape[1]):
      if sIC[i,j]>0:
        Obj_inds.append([i,j])
  if sIC.shape[0]*sIC.shape[1]==np.shape(Obj_inds)[0]: #if there is no object in the subimage
    ypos = -1
    xpos = -1
  else:
    ypos = np.median(Obj_inds,0)[0] #y position of the center of mass of the object
    xpos = np.median(Obj_inds,0)[1] #x position of the center of mass of the object
  return xpos, ypos

last_obs = observation
xpos_Ball, ypos_Ball = findobj(last_obs, courtXRng, courtYRng)
xpos_Racket, ypos_Racket = findobj(last_obs, racketXRng, courtYRng)

plt.imshow(observation)
plt.plot(xpos_Ball+courtXRng[0],ypos_Ball+courtYRng[0],'ro')
plt.plot(xpos_Racket+courtXRng[1]+1,ypos_Racket+courtYRng[0],'ro')


the court X range is (20, 140) 
the racket X range is (141, 144)
the court Y range is (34, 194)

so lets say that the ball is at pos: pos_x = 41.5 and pos_y = 99.5
it means that the 
lx0 = 20
lxp = lx0+pos_x = 20+41.5

ly0 = 34
lyp = ly0+pos_y = 34+99.5

so now lets say the racket is at pos: pos_x = 1, pos_y = 107.5
it means that the
lx0 = 141
lxp = lx0+pos_x = 141+1

ly0 = 34
lyp = ly0+pos_y = 34+107.5

so the plotting should be


plt.imshow(observation)
plt.plot(xpos_Ball+courtXRng[0],ypos_Ball+courtYRng[0],'ro')
plt.plot(xpos_Racket+racketXRng[0],ypos_Racket+courtYRng[0],'ro')


therefore accordingly

self.dObjPos['ball'].append([courtXRng[0]+xpos_Ball,ypos_Ball]) # incorrect
should be changed to 
self.dObjPos['ball'].append([courtXRng[0]+xpos_Ball,ypos_Ball]) # correct

and 

self.dObjPos['racket'].append([racketXRng[0]-1+xpos_Racket,ypos_Racket]) # incorrect
should be changed to 
self.dObjPos['racket'].append([racketXRng[0]+xpos_Racket,ypos_Racket]) # correct


-- OK so object location fixed but this location is for FullImage and we want to display object location on downsampled image

from skimage.transform import downscale_local_mean
downsampshape = (8,8)
gray_Image = 255.0*rgb2gray(observation[courtYRng[0]:courtYRng[1],:,:])
gray_ds = downscale_local_mean(gray_Image,downsampshape) # then downsample
gray_ds = np.where(gray_ds>np.min(gray_ds)+1,255,gray_ds) # Different thresholding


-- now lets see what we have for plotting in function viewInput in simdat.py

objfctr = 1.0/8

lobjx,lobjy = [objfctr*dobjpos[k][tdx-objofftdx][0] for k in ['ball','racket']], [objfctr*dobjpos[k][tdx-objofftdx][1] for k in ['ball','racket']]



--- seems problematic

-- solution is below:

b = np.zeros(shape=(160,160))
b[int(xpos_Ball+courtXRng[0]),int(ypos_Ball)]=1
bc = downscale_local_mean(b,(8,8))
bd = np.where(bc>0)

r = np.zeros(shape=(160,160))
r[int(xpos_Ball+courtXRng[0]),int(ypos_Ball)]=1
rc = downscale_local_mean(r,(8,8))
rd = np.where(rc>0)

-- havent integrated the solution yet into the function. Want to focus on real problem which is investigating why E and W neurons fire at the same time.
-- ALso was not sure how to to adapt the current code with this format.

-- when i used the following code
python -i simdat.py backupcfg/20aug14_A0_local_sim.json
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DW']}
for k,clr in zip(list(dhist.keys()),['r','b']): plot(dhist[k][0],dhist[k][1],clr)

I found 'E' and 'W' overlap at time 24500 ms--- till 25200 ms.

clf(); viewInput(24500,InputImages,ldflow,dhist,['EV1DE','EV1DW'],['r','b'], twin=1000, dobjpos=dobjpos)


-- better look crudely

plt.plot(dhist['EV1DE'][1],'b')
plt.plot(dhist['EV1DW'][1],'r')


plt.plot(dhist['EV1DE'][1][1200:1299],'b')
plt.plot(dhist['EV1DW'][1][1200:1299],'r')

saved as Figs_Debugging_FR_EV1Dneurons/CompareEwithW.png

-- look at 1250 time step of the simulation......

to look at the activity of different direction selective neurons at 1250th time step load dact......

dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)


plt.imshow(dact['EV1DE'][1250])
<matplotlib.image.AxesImage object at 0x13021b828>
>>> plt.colorbar()
<matplotlib.colorbar.Colorbar object at 0x1324b1f28>
>>> plt.title('EV1DE at tstep=1250')

-- Image saved as Figs_Debugging_FR_EV1Dneurons/EV1DE_tstep1250.png

>>> np.where(dact['EV1DE'][1250]>0)
(array([13, 13, 13, 14, 15]), array([13, 14, 15, 13, 13]))



>>> plt.imshow(dact['EV1DW'][1250])
<matplotlib.image.AxesImage object at 0x1324f6320>
>>> plt.colorbar()
<matplotlib.colorbar.Colorbar object at 0x13094a128>
>>> plt.title('EV1DW at tstep=1250')
Text(0.5, 1, 'EV1DW at tstep=1250')

-- Image saved as Figs_Debugging_FR_EV1Dneurons/EV1DW_tstep1250.png

>>> np.where(dact['EV1DW'][1250]>0)
(array([13, 14, 15, 15, 16, 16, 16]), array([13, 12, 12, 13, 11, 12, 13]))

-- also look at other directions for reference.

>>> np.unique(ldflow[1249]['ang'])
array([-100.        ,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289658,  153.4328966 ,  153.43289663,  153.43289673,
        270.        ])

at timestep 1249: Moving in S (SW and SE),NW (W)


>>> np.unique(ldflow[1250]['ang'])
array([-100.        ,   90.        ,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289666])

at timestep 1250: Moving in N, NW.


So the firing recorded from the neurons at timestep 1250 should correspond to ldflow recorded at timestep 1249.

A few neurons in E and W pops are generating single spikes as shown above.... just for clarity writing again below..


>>> np.where(dact['EV1DE'][1250]>0)
(array([13, 13, 13, 14, 15]), array([13, 14, 15, 13, 13]))

>>> np.where(dact['EV1DW'][1250]>0)
(array([13, 14, 15, 15, 16, 16, 16]), array([13, 12, 12, 13, 11, 12, 13]))
 when only W pop might have asigned firing rates because the direction angles are

 ~153 for ball and 270 degrees for the racket as shown by 

>>> np.unique(ldflow[1249]['ang'])
array([-100.        ,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289657,  153.43289657,  153.43289657,  153.43289657,
        153.43289658,  153.4328966 ,  153.43289663,  153.43289673,
        270.        ])

at timestep 1249: Moving in S (SW and SE),NW (W)


-- The exact cause of these extra spikes is STILL UNCLEAR and requires FURTHER INVESTIGATION.
__ Another important point to note is that i have this gut feeling that "downscale_local_mean" is causing a few problems in the model.
------Depending on where the object pixel is, in the down scaled image, the obect pixels could stretch. This may create problem. Though I dont have any evidence for that.

..... the investigation into the problem ... to be continued.


* 20aug19

-- Yesterday, I found single spikes generated in direction selective neurons when there was no motion detected in that direction.

-- To further investigate what is going on, I included a function to save Assigned Firing Rates for direction selective neurons using an option "saveAssignedFiringRates": 1

-- ran a 300 sec sim with "saveAssignedFiringRates": 1 in "20aug19_A0_local_" to compare Assigned firing rates with spiking activity of neurons.
-- The goal is to investigate whether the direction selective neurons were able to produce those firing rates or not.

--> simConfig = pickle.load(open('data/'+name+'simConfig.pkl','rb'))

import pickle
import numpy as np
import matplotlib.pyplot as plt

dAssignedFR = pickle.load(open('data/20aug19_A0_local_AssignedFiringRates.pkl','rb'))
assignedFR_E = []
assignedFR_W = []
for i in range(len(dAssignedFR)):
  assignedFR_E.append(np.sum(np.round(np.multiply(dAssignedFR[i]['EV1DE'],0.02))))
  assignedFR_W.append(np.sum(np.round(np.multiply(dAssignedFR[i]['EV1DW'],0.02))))

python -i simdat.py backupcfg/20aug19_A0_local_sim.json
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DW']}
for k,clr in zip(list(dhist.keys()),['r','b']): plot(dhist[k][0],dhist[k][1],clr)


-- run sim '20aug19_A1_local_noDirInput_' with 
stimModDirW = 0 instead of stimModDirW = 0.01

python -i simdat.py backupcfg/20aug19_A1_local_noDirInput_sim.json


ok so no spiking in direction selective neurons when stimModDirW = 0
means neurons are not active spontaneously

-- run sim '20aug19_A2_local_' with 
stim['hObj'].interval = 1e8

.....

* 20aug20


python -i simdat.py backupcfg/20aug19_A2_local_sim.json
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DW']}

... saved spike hist of E and W, plotted using 
plt.plot(dhist['EV1DE'][1])
plt.plot(dhist['EV1DW'][1],'r')
and saved as spikeHist_EvsW_20aug19_A2_local.png

dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)

still extra spikes



-- run sim '20aug19_A4_local_' with 
stim['hObj'].number = 0

python -i simdat.py backupcfg/20aug19_A4_local_sim.json
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DW']}

no spiking at all.....


-- run sim '20aug19_A5_local_' with 

          if dFiringRates[pop][int(cell.gid-offset)]==0:
            #stim['hObj'].interval = 1e8
            stim['hObj'].number = 0
          else:
            stim['hObj'].number = int(dFiringRates[pop][int(cell.gid-offset)]*0.020) 

didnt change much.... its possible that we need to increase the weights because now we have less preM activity which could be insufficient to drive M neurons.
anyway let sim run and increase weights afterwards.

python -i simdat.py backupcfg/20aug19_A5_local_sim.json
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']}



probably start with making rates 5 times higher.....later

----------------

-- run sim '20aug19_A6_local_' with
interval of 10 ms. 

every neuron produces exactly 2 spikes in 20ms window starting from timepoint 2.
timepoint 0 and timepoint1 has 1 spike per neuron in 20 ms window.

-- run sim '20aug19_A7_local_' with
          rind = random.randint(0,1)
          fchoices = [20,100]
          if dFiringRates[pop][int(cell.gid-offset)]==0:
            stim['hObj'].interval = fchoices[rind]#1e8
          else:
            stim['hObj'].interval = fchoices[rind] 

python -i simdat.py backupcfg/20aug19_A7_local_sim.json 
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']}
plt.plot(dhist['EV1DE'][1],'b-o')
plt.ylabel('# of spikes')
plt.xlabel('tpnts')
plt.title('NetStim-interval: 20 ms or 100 ms')
....hist of EV1DE saved as dhist_20aug19_A7_local_sim_EV1DE.png
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
plt.imshow(dact['EV1DE'][20]) --->showing 0 to 4 spikes for different neurons. However it should have showed 1 spike every tpnt or 1spk every 4th tpnt.
plt.colorbar()
plt.title('dact[EV1DE][20]')
SEEMS LIKE ONCE THE INTERVAL IS ASSIGNED, THE SPIKE WILL BE GENERATED AT LATER TIMEPNT REGARDLESS OF UPDATED INTERVAL

... should rerun this sim and also save what firing rates were assigned.


-- run sim '20aug19_A8_local_' with
interval of 40 ms.
hist of EV1DE saved as dhist_20aug19_A8_local_sim_EV1DE.png
1 spike per neuron every other 20ms bin- as expected.

Looks like no problem with NETSTIM... THE PROBLEM MIGHT BE IN THE WAY WE ARE USING IT.


* 20aug21


-- run sim '20aug21_A0_local_' with
          rind = random.randint(0,2)
          fchoices = [20,50,1000] #20 will represent 50Hz and so on 
          if dFiringRates[pop][int(cell.gid-offset)]==0:
            stim['hObj'].interval = fchoices[rind] #1e8
          else:
            stim['hObj'].interval = fchoices[rind] #1000.0/dFiringRates[pop][int(cell.gid-offset)] #40 #fchoices[rind] #10 #
          sim.AIGame.dAllFiringRates[-1][pop][int(cell.gid-offset)] = fchoices[rind]

python -i simdat.py backupcfg/20aug21_A0_local_sim.json 
binsz=20
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']}
plt.plot(dhist['EV1DE'][1],'b-o')
plt.plot(dhist['EV1DW'][1],'r-o')
plt.plot(dhist['EV1DN'][1],'g-o')
plt.plot(dhist['EV1DS'][1],'c-o')
plt.legend(['EV1DE','EV1DW','EV1DN','EV1DS'])
plt.xlabel('tpnts')
plt.ylabel('# of spikes')
plt.title('NetStim Interval: [20,50,1000]')

--PROBLEM: 
....The problem was with the Firing rates we were using. e.g. we were using peak firing rate of 50Hz, firing rates for overlapping directions aroung 20Hz and firing rate at the boundary of direction tuning curve about 1 Hz.
.... These firing rates translate to 20 ms, 50 ms and 1000 ms.
.... we are using time bin of 20 ms (per game play).
.... which means that for that particular 20 ms, we want to execute spike at 20 ms, 50ms and 1000 ms.
.... we will have a single spike corresponding to 20 ms in the next interval and we will have another spike in the following interval corresponding to 50 ms but then we will have another spike at 50th timestep/time bin
.... so the problem is that direction encoding for the environment and action will be spread across time. making it temporally less precise.
.... We may lose temporal precision/ noise could become larger than the original signal. Original signal would be a single spike and signal from multiple previous steps could produce 3 spikes.
-- SOLUTION:
.... one solution is to increase the peak 2 or 3 times or even 4 times to increase the temporal precision... which would hopefully help differentiate between temporally delayed and temporally precise signals.

-- Debugging:
from collections import OrderedDict

def getangdiff (ang1, ang2):
  if ang1 > 180.0:
    ang1 -= 360.0
  if ang2 > 180.0:
    ang2 -= 360.0
  angdiff = ang1 - ang2
  if angdiff > 180.0:
    angdiff-=360.0
  elif angdiff < -180.0:
    angdiff+=360.0
  return angdiff


dAngPeak = OrderedDict({'EV1DE': 0.0,'EV1DNE': 45.0, # receptive field peak angles for the direction selective populations
                        'EV1DN': 90.0,'EV1DNW': 135.0,
                        'EV1DW': 180.0,'EV1DSW': 225.0,
                        'EV1DS': 270.0,'EV1DSE': 315.0})

#AngRFSigma2 = dconf['net']['AngRFSigma']**2
AngRFSigma2 = 22.5**2

E = []
NE = []
N = []
NW = []
W = []
SW = []
S = []
SE = []
for a in range(0,360,1):
  E.append(150*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DE'])**2)/AngRFSigma2))
  NE.append(150*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DNE'])**2)/AngRFSigma2))
  N.append(150*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DN'])**2)/AngRFSigma2))
  NW.append(150*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DNW'])**2)/AngRFSigma2))
  W.append(150*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DW'])**2)/AngRFSigma2))
  SW.append(150*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DSW'])**2)/AngRFSigma2))
  S.append(150*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DS'])**2)/AngRFSigma2))
  SE.append(150*np.exp(-1.0*(getangdiff(a,dAngPeak['EV1DSE'])**2)/AngRFSigma2))


from matplotlib import pyplot as plt
plt.plot(E,'k')
plt.plot(NE,'r')
plt.plot(N,'b')
plt.plot(NW,'g')
plt.plot(W,'k--')
plt.plot(SW,'r--')
plt.plot(S,'b--')
plt.plot(SE,'g--')
plt.legend(['E','NE','N','NW','W','SW','S','SE'])
plt.ylabel('Firing rate (Hz)')
plt.show()

... saved as Angle2FiringRateConversion_withoutBug_NEW.png

-- change peak firing rate from  "DirMaxRate": 50.0 to "DirMaxRate": 150.0


-- run 30 sec sim with peak firing rate for direction selective neurons of 150 Hz in "20aug21_A1_local_"
... also save assigned firing rates.

python -i simdat.py backupcfg/20aug21_A1_local_sim.json
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops) 
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']}
....dhist_20aug21_A1_local_sim.png .... still overlap.


-- just to test, change
          if dFiringRates[pop][int(cell.gid-offset)]==0:
            stim['hObj'].interval = 1e12
to
          if dFiringRates[pop][int(cell.gid-offset)]<50:
            stim['hObj'].interval = 1e12
... and run sim in "20aug21_A2_local_"
... now i am restricting all the activity to 1 time bin. there should not be any overlap as there is no propagation of activity across timebins.

python -i simdat.py backupcfg/20aug21_A2_local_sim.json



dAssignedFR = pickle.load(open('data/20aug19_A0_local_AssignedFiringRates.pkl','rb'))


-- Add "FiringRateCutoff" : 50.0 in sim.json.
-- Add self.FiringRateCutoff = dconf['net']['FiringRateCutoff'] in aigame.py
-- Add if MaxRate * fctr < self.FiringRateCutoff: fctr = 0 in function updateDirSensitiveRates (self) in aigame.py.
-- run 30 sec "20aug21_A3_local_"

* 20aug24

-- Make sure that the firing rates are properly implemented in direction selective neurons as well as ER or EV1 depending on which one is present in the circuit.
I believe these parameters are required for direction selective neurons to fire in timely manner i.e. without producing noise e.g. when the firing rate was 1 Hz, the spike will be generated after 1000 ms which will be 880 ms delayed for the visual scene.
        "AngRFSigma": 22.5,
	      "EXPDir": 1,
        "DirMinRate": 0.0,
        "DirMaxRate": 150.0,
        "FiringRateCutoff" : 50.0,


python -i simdat.py backupcfg/20aug21_A3_local_sim.json
dAssignedFR = pickle.load(open('data/20aug21_A3_local_AssignedFiringRates.pkl','rb'))

FRs_V1 = []
FRs_E = []
FRs_NE = []
FRs_N = []
FRs_NW = []
FRs_W = []
FRs_SW = []
FRs_S = []
FRs_SE = []

for tpnts in range(len(dAssignedFR)):
  FRs_V1.append(dAssignedFR[tpnts]['EV1'])
  FRs_E.append(dAssignedFR[tpnts]['EV1DE'])
  FRs_NE.append(dAssignedFR[tpnts]['EV1DNE'])
  FRs_N.append(dAssignedFR[tpnts]['EV1DN'])
  FRs_NW.append(dAssignedFR[tpnts]['EV1DNW'])
  FRs_W.append(dAssignedFR[tpnts]['EV1DW'])
  FRs_SW.append(dAssignedFR[tpnts]['EV1DSW'])
  FRs_S.append(dAssignedFR[tpnts]['EV1DS'])
  FRs_SE.append(dAssignedFR[tpnts]['EV1DSE'])

>>> np.unique(np.ceil(np.reshape(FRs_V1,(np.shape(FRs_V1)[0]*np.shape(FRs_V1)[1]))))
array([ 0., 50.])
>>> np.unique(np.ceil(np.reshape(FRs_E,(np.shape(FRs_E)[0]*np.shape(FRs_E)[1]))))
array([  0.,  59.,  72.,  74.,  77.,  78.,  79.,  84.,  86.,  87.,  98.,
       106., 111., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_NE,(np.shape(FRs_NE)[0]*np.shape(FRs_NE)[1]))))
array([  0.,  52.,  53.,  54.,  55.,  58.,  59.,  61.,  63.,  64.,  66.,
        67.,  68.,  69.,  71.,  73.,  74.,  75.,  76.,  77.,  79.,  82.,
        83.,  85.,  90.,  92.,  93.,  96., 100., 101., 106., 107., 115.,
       117., 118., 121., 123., 125., 126., 128., 132., 133., 135., 136.,
       138., 139., 141., 142., 146., 147., 149., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_N,(np.shape(FRs_N)[0]*np.shape(FRs_N)[1]))))
array([  0.,  52.,  53.,  54.,  55.,  56.,  57.,  58.,  59.,  60.,  61.,
        62.,  65.,  67.,  68.,  69.,  70.,  72.,  73.,  75.,  76.,  77.,
        79.,  80.,  81.,  82.,  83.,  84.,  88.,  96.,  97.,  99., 100.,
       102., 103., 104., 107., 108., 110., 111., 113., 116., 119., 121.,
       122., 123., 126., 128., 129., 130., 131., 132., 133., 134., 135.,
       136., 138., 139., 140., 141., 142., 143., 145., 146., 147., 148.,
       149., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_NW,(np.shape(FRs_NW)[0]*np.shape(FRs_NW)[1]))))
array([  0.,  51.,  53.,  55.,  56.,  57.,  63.,  64.,  65.,  66.,  67.,
        69.,  70.,  72.,  74.,  75.,  76.,  77.,  78.,  84.,  86.,  93.,
        95., 102., 105., 107., 111., 114., 117., 126., 128., 131., 132.,
       134., 135., 142., 143., 144., 147., 148., 149., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_W,(np.shape(FRs_W)[0]*np.shape(FRs_W)[1]))))
array([  0.,  65.,  67.,  77., 117., 126., 129., 146., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_SW,(np.shape(FRs_SW)[0]*np.shape(FRs_SW)[1]))))
array([  0.,  75.,  77.,  78.,  83.,  95., 112., 113., 114., 117., 119.,
       123., 128., 129., 130., 132., 136., 137., 138., 139., 140., 141.,
       142., 143., 144., 145., 146., 147., 148., 149., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_S,(np.shape(FRs_S)[0]*np.shape(FRs_S)[1]))))
array([  0.,  51.,  53.,  57.,  61.,  65.,  68.,  70.,  72.,  75.,  77.,
        86.,  88.,  89.,  92.,  93.,  94.,  97., 102., 104., 109., 110.,
       112., 115., 116., 117., 119., 122., 123., 125., 127., 128., 129.,
       131., 133., 135., 136., 137., 138., 139., 140., 141., 142., 143.,
       144., 145., 147., 148., 149., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_SE,(np.shape(FRs_SE)[0]*np.shape(FRs_SE)[1]))))
array([  0.,  52.,  55.,  59.,  60.,  64.,  66.,  67.,  69.,  70.,  71.,
        72.,  74.,  75.,  76.,  77.,  78.,  79.,  82.,  84.,  91.,  95.,
       102., 106., 116., 117., 127., 128., 129., 130., 131., 132., 133.,
       134., 135., 138., 139., 140., 141., 144., 146., 147., 149., 150.])

.... Assigned firing rates look good for 20 ms.

dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops) 
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']}



plt.plot(dhist['EV1DE'][1],'b-')
plt.plot(dhist['EV1DW'][1],'r-')
plt.plot(dhist['EV1DN'][1],'g-')
plt.plot(dhist['EV1DS'][1],'c-')
plt.legend(['EV1DE','EV1DW','EV1DN','EV1DS'])
plt.xlabel('tpnts')
plt.ylabel('# of spikes')



>>> dhist['EV1DE'][1][1410]
0
>>> dhist['EV1DNE'][1][1410]
0
>>> dhist['EV1DN'][1][1410]
88
>>> dhist['EV1DNW'][1][1410]
39
>>> dhist['EV1DW'][1][1410]
0
>>> dhist['EV1DSW'][1][1410]
0
>>> dhist['EV1DS'][1][1410]
24
>>> dhist['EV1DSE'][1][1410]
0

-- see the Assigned Firing rates at tpnt 1409:
>>> np.unique(dAssignedFR[1409]['EV1DE'])
array([0.])
>>> np.unique(dAssignedFR[1409]['EV1DNE'])
array([0.])
>>> np.unique(dAssignedFR[1409]['EV1DN'])
array([  0., 150.])
>>> np.unique(dAssignedFR[1409]['EV1DNW'])
array([ 0.        , 76.66776632, 76.66776651, 76.66776653, 76.66776653,
       76.66776653, 76.66776653, 76.66776653, 76.66776653, 76.66776653,
       76.66776653, 76.66776653, 76.66776653, 76.66776653, 76.66776653])
>>> np.unique(dAssignedFR[1409]['EV1DW'])
array([0.])
>>> np.unique(dAssignedFR[1409]['EV1DSW'])
array([0.])
>>> np.unique(dAssignedFR[1409]['EV1DS'])
array([  0., 150.])
>>> np.unique(dAssignedFR[1409]['EV1DSE'])
array([0.])

--- see the dact of tpnt 1410 for N, NW, S
--- comparing dact[1410] with dAssignedFR[1409]
..... For EV1DN, left racket was assigned 150 Hz 
..... but some pixels presenting left racket produced 150Hz (i.e. 3 spikes in 20 ms), where as others produced 100 Hz (i.e. 2 spikes in 20 ms). I guess 3rd spike will be produced in next time bin.

.... For EV1DNW, ball was assigned ~75 Hz.
.... but some pixels presenting ball produced 50 Hz, while the others (which were overlapping with previous ball location) produced 100 Hz, where as only a few pixels produced 150 Hz.

.... For EV1DS, right racket was assigned 150 Hz.
.... all pixels presenting right racket produced 50 Hz. so definitely remaining 2 spikes will show up in next bin.

-- I still see all 400 neurons generating 1 spike......
-- may be the potential solution is the following:
netParams.stimSourceParams['stimMod'] = {'type': 'NetStim', 'rate': 'variable', 'noise': 0,'interval':1e24}
.. added 'interval':1e24 for initializing 

-- run sim in "20aug21_A4_local_" to test if "interval":1e24 works or not...
.... No this didnt work.
... May be write a function to initialize 



def InitializeInputRates ():
  # update the source firing rates for the ER neuron population, based on image contents
  # also update the firing rates for the direction sensitive neurons based on image contents
  if dnumc['ER']>0:
    lratepop = ['ER', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE']
  else:
    lratepop = ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE']  
  for pop in lratepop:
    lCell = [c for c in sim.net.cells if c.gid in sim.net.pops[pop].cellGids] # this is the set of cells
    for cell in lCell:  
      for stim in cell.stims:
        if stim['source'] == 'stimMod':
          stim['hObj'].interval = 1e12

--- May be try this--->
InitializeInputRates ()
sim.runSimWithIntervalFunc(tPerPlay,trainAgent) # has periodic callback to adjust STDP weights based on RL signal

-- This worked.

-- 150Hz stimulation didnt cause the neurons to fire with the same frequency. I noticed a delayed response in neurons. I think this could be due to weaker connection weights.
-- Therefore, to make it as a parameter, I included in sim.json.... "net"...
        "stimModDirW": 0.05,
        "stimModInputW": 0.05,
-- check how temporally locked the rates are....


import gym
from skimage.transform import downscale_local_mean, resize
from skimage.color import rgb2gray
from skimage.filters import threshold_otsu
from matplotlib import pyplot as plt
import numpy as np

courtYRng = (34, 194)
env = gym.make('Pong-v0')
env.reset()
observation, reward, done, info = env.step(caction)
gray_Image = 255.0*rgb2gray(observation[courtYRng[0]:courtYRng[1],:,:]) # convert to grayscale; rgb2gray has 0-1 range so mul by 255
gray_ds = downscale_local_mean(gray_Image,(8,8)) # then downsample
dsum_Images = np.where(gray_ds>np.min(gray_ds)+1,255,gray_ds) # Different thresholding
dsum_Images = dsum_Images - np.amin(dsum_Images)
dsum_Images = (255.0/np.amax(dsum_Images))*dsum_Images
fr_Images = 50/(1+np.exp((np.multiply(-1,dsum_Images)+123)/10))
fr_Images2 = 150/(1+np.exp((np.multiply(-1,dsum_Images)+123)/10))

-- add in 'net' in sim.json.
"LocMaxRate": 150.0,
-- add in init in aigame.py
self.locationNeuronRate = dconf['net']['LocMaxRate']

-- use self.locationNeuronRate in both updateInputRates() and updateInputRatesWithPadding()

-- run sim with above changes in 20aug21_A5_local_
.... showing firing rates of M neurons 0.... and the racket is not moving....
.... so may be reduce 
        "stimModDirW": 0.05,
        "stimModInputW": 0.05,
to
        "stimModDirW": 0.02,
        "stimModInputW": 0.02,
and rerun.


python -i simdat.py backupcfg/20aug21_A5_local_sim.json 
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops) 
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']}

dAssignedFR = pickle.load(open('data/20aug21_A5_local_AssignedFiringRates.pkl','rb'))

FRs_V1 = []
FRs_E = []
FRs_NE = []
FRs_N = []
FRs_NW = []
FRs_W = []
FRs_SW = []
FRs_S = []
FRs_SE = []

for tpnts in range(len(dAssignedFR)):
  FRs_V1.append(dAssignedFR[tpnts]['EV1'])
  FRs_E.append(dAssignedFR[tpnts]['EV1DE'])
  FRs_NE.append(dAssignedFR[tpnts]['EV1DNE'])
  FRs_N.append(dAssignedFR[tpnts]['EV1DN'])
  FRs_NW.append(dAssignedFR[tpnts]['EV1DNW'])
  FRs_W.append(dAssignedFR[tpnts]['EV1DW'])
  FRs_SW.append(dAssignedFR[tpnts]['EV1DSW'])
  FRs_S.append(dAssignedFR[tpnts]['EV1DS'])
  FRs_SE.append(dAssignedFR[tpnts]['EV1DSE'])

>>> np.unique(np.ceil(np.reshape(FRs_V1,(np.shape(FRs_V1)[0]*np.shape(FRs_V1)[1]))))
array([  0., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_E,(np.shape(FRs_E)[0]*np.shape(FRs_E)[1]))))
array([0.])
>>> np.unique(np.ceil(np.reshape(FRs_NE,(np.shape(FRs_NE)[0]*np.shape(FRs_NE)[1]))))
array([  0.,  55.,  67.,  69.,  71.,  75.,  76.,  77., 101., 108.])
>>> np.unique(np.ceil(np.reshape(FRs_N,(np.shape(FRs_N)[0]*np.shape(FRs_N)[1]))))
array([  0.,  56.,  79.,  82., 100., 104., 126., 142., 143., 148., 149.,
       150.])
>>> np.unique(np.ceil(np.reshape(FRs_NW,(np.shape(FRs_NW)[0]*np.shape(FRs_NW)[1]))))
array([0.])
>>> np.unique(np.ceil(np.reshape(FRs_W,(np.shape(FRs_W)[0]*np.shape(FRs_W)[1]))))
array([0.])
>>> np.unique(np.ceil(np.reshape(FRs_SW,(np.shape(FRs_SW)[0]*np.shape(FRs_SW)[1]))))
array([  0.,  95., 112., 113., 114., 138., 142., 147., 148., 149., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_S,(np.shape(FRs_S)[0]*np.shape(FRs_S)[1]))))
array([  0.,  61.,  80., 102., 103., 110., 116., 136., 140., 143., 144.,
       146., 147., 150.])
>>> np.unique(np.ceil(np.reshape(FRs_SE,(np.shape(FRs_SE)[0]*np.shape(FRs_SE)[1]))))
array([  0.,  51.,  76.,  77.,  80.,  82., 117., 126., 128., 132., 133.,
       149., 150.])

>>> plt.imshow(np.multiply(50,dact['EV1DN'][530]))
<matplotlib.image.AxesImage object at 0x12d7be588>
>>> plt.colorbar()
<matplotlib.colorbar.Colorbar object at 0x12d645cc0>
>>> plt.title('dact[EV1DN][530]')
Text(0.5, 1, 'dact[EV1DN][530]')

-- saved as dactFR_EV1DN_tpnt530_20aug21_A5_local.png

-- Need to play with 
        "stimModDirW": 0.02,
        "stimModInputW": 0.02,
on cycle.

-- 1. "stimModDirW": 0.02, "stimModInputW": 0.02 -- "20aug24_A0_cycle_" for 300 sec
-- 2. "stimModDirW": 0.03, "stimModInputW": 0.03 -- "20aug24_A1_cycle_" for 300 sec
-- 3. "stimModDirW": 0.01, "stimModInputW": 0.01 -- "20aug24_A2_cycle_" for 300 sec

* 20aug25

-- submitted all 3 jobs (listed above) on cycle today.
-- told sam that i ran a sim using "stimModDirW": 0.05, "stimModInputW": 0.05 but terminated it because i observed that racket was not moving for a while and also the firing rates printed were 0.
-- sam suggested i should look at the membrane potential to see if there was a depolarization block
-- or if needed connections between preM and M to be adjusted.
-- So i ran sim on my local machine "20aug25_A0_local_" for 30 sec

python -i simdat.py backupcfg/20aug25_A0_local_sim.json

-- analyzing and saving plots for sims on cycle.
....
python -i simdat.py backupcfg/20aug24_A0_cycle_sim.json
plotPerf(actreward)..... and save the plot as 20aug24_A0_cycle_Perf.png

....
clf(); dobjpos = loadObjPos() ## 
subplot(2,1,1); xlabel('Racket Y position'); hist(dobjpos['racket'][:,1])
subplot(2,1,2); xlabel('Ball Y position'); hist(dobjpos['ball'][:,1])
and save the plot as 20aug24_A0_cycle_RacketBallYposHist.png

....
plot(dobjpos['ball'][:,1],'b')
plot(dobjpos['racket'][:,1],'r')
legend(['ball','racket'])
xlabel('tpnts')
ylabel('Y-Pixel loc')
and save the plot as 20aug24_A0_cycle_RacketBallYposFull.png and 20aug24_A0_cycle_RacketBallYposZoomed.png

....
ballX,ballY = dobjpos['ball'][:,0],dobjpos['ball'][:,1]
racketX,racketY = dobjpos['racket'][:,0],dobjpos['racket'][:,1]
tt = np.linspace(0,totalDur,len(dobjpos['ball']))
pdpos = pd.DataFrame(np.array([tt, ballX, ballY, racketX, racketY]).T,columns=['time','ballX','ballY','racketX','racketY'])
dout = getdistvstimecorr(pdpos,minN=2)
didnt save... not sure what to make out of it.....
....
python -i simdat.py backupcfg/20aug24_A1_cycle_sim.json
plotPerf(actreward)..... and save the plot as 20aug24_A1_cycle_Perf.png.... looks worst than ever.
saved the position histogram-plots as 20aug24_A1_cycle_RacketBallYposFull.png and 20aug24_A1_cycle_RacketBallYposZoomed.png

-- resuming "stimModDirW": 0.02, "stimModInputW": 0.02 -- "20aug24_A0r1_cycle_" for 3000 sec
-- resuming "stimModDirW": 0.01, "stimModInputW": 0.01 -- "20aug24_A2r1_cycle_" for 3000 sec 

-- start running sim for 3000 sec in "20aug25_A0_cycle_" with
stimModDirW = 0.01
stimModInputW = 0.05 
DirMaxRate = 150
LocMaxRate = 50
... i am choosing these parameters because while running locally i saw good performance for these params..... lets see....


* 20aug26
Copied from Line around 4789
-- revisting topological connectivity between preM and M neurons.

1. Using topological connections between preM and M, only topologically relevant neurons will be involved in action generation.
2. Lets say, the ball is at (10,10) and moving towards SE, the racket is at (10,19) moving North (i.e. UP):
    -- The ball will activate neurons at location (10,10) in EV1 and EV1DSE.
    -- The racket will activate neurons at location (10,19) in EV1 and EV1DN.
    -- Goal is that when next time, these neurons are activated, Racket should move DOWN.
    -- This could be acheieved 2 ways: 1. Strengthening connections between the activated neurons and EMDOWN or 2. Weakening connections between the activated neurons and EMUP.


Lets say that we connect 3x3 neurons from EV1 and EV1DX to both EMUP and EMDOWN.
so ....
.... when (10,10) EV1 neuron gets activated (by ball), it will activate (10,10) neuron in both EMUP and EMDOWN.
.... when (10,10) EV1DSE neuron gets activated (by ball), it will activate (10,10) neuron in both EMUP and EMDOWN.
.... when (10,19) EV1 neuron gets activated (by racket), it will activate (10,19) neuron in both EMUP and EMDOWN.
.... when (10,19) EV1DN neuron gets activated (by racket), it will activate (10,19) neuron in both EMUP and EMDOWN.

if the weights are same for all connections, FR_EMUP should be equal to FR_EMDOWN and therefore the target will not move.
since the target didnt move when it was supposed to move DOWN, a punishment will be produced, which will be delivered to connections between PreM and EMDOWN and PreM and EMUP.
this will reduce the connection strength so that when next time, same neurons fire in preM, it will produce less firing rates but same in both.

so the big questions are:
1. Didnt we do something wrong here? By decreasing the synaptic strength of DOWN and UP inputs, we made sure that next time, the same sequence of inputs generate NO movement (STAY).
.... what would have happened if the correct decision was made. e.g. if DOWN action was generated and we had reinfoced the synapses, that would have been a correct thing to do.
.... what would have happened if the correct decision was to STAY? Could strengthen both synapses (to EMUP and EMDOWN). Again correct decision.
.... what if we had 3 pops of EM, then we would have decreased the strength of EMSTAY and next time we would see EMUP==EMSTAY and both EMUP > EMSTAY and EMDOWN>EMSTAY 
2. Is decrease in synaptic strength sufficient so that next time it could influence the firing rate of EM poulations? 


NOTE: need to rerun sims "20aug24...." because those were run without padding neurons.

running sim on falcor "20aug26_A0_falcor_" with neuron padding and
        "stimModDirW": 0.02,
        "stimModInputW": 0.02,


running sim on falcor "20aug26_A1_falcor_" with neuron padding and
        stimModDirW = 0.01
        stimModInputW = 0.05 
        DirMaxRate = 150
        LocMaxRate = 50

* 20aug27

-- try running with topol connectivity between preM and pre instead of probabilistic.
    "useNeuronPad": 0,
    "architecturePreMtoM": {
        "useProbabilistic": 0,
        "useTopological": 1
    },
    "name": "20aug27_A0_local_",
    "duration": 10000,

updated in sim.py
blist = connectLayerswithOverlapDiv(NBpreN=dnumc[prety],NBpostN=dnumc[poty],overlap_xdir = dtopoldivcons[prety][poty], padded_preneurons_xdir = dnumc_padx[prety], padded_postneurons_xdir = dnumc_padx[poty])


-- doesnt work when have same pop size...... so write a new function for that

adapted sim.json based on pop size.....

if preM size is smaller that M size, list in "alltopoldivcons"
 
        "alltopoldivcons":{
            "IR":{"ER":5},
            "EV1":{"ER":3},
            "IV1":{"EV1":5,"ER":5},
            "EV4":{"EV1":3,"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "IV4":{"EV4":5,"EV1":5},
            "EMT":{"EV4":3,"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "IMT":{"EMT":5,"EV4":5}
        },

if preM size is larger or equal to M size, list in "alltopolconvcons"

        "alltopolconvcons":{
            "ER":{"IR":3,"EV1":3,"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1":{"IV1":3,"EV4":3,"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1DE":{"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1DNE":{"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1DN":{"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1DNW":{"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1DW":{"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1DSW":{"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1DS":{"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "EV1DSE":{"EMDOWN":3,"EMUP":3,"EMSTAY":0},
            "IV1":{"IV4":5},
            "EV4":{"IV4":3,"EMT":3},
            "IV4":{"IMT":5},
            "EMT":{"IMT":3}
        },

-- tried without padding -- works fine.
-- tryign with padding and there is a problem...
Running with interval func  ...
t= 20.0  U,D spikes: [0.0] [0.0]
t= 20.0 proposed actions: [-1] , model actions: [1]
t= 20.0  game rewards: [0]
Traceback (most recent call last):
  File "sim.py", line 1245, in <module>
    sim.runSimWithIntervalFunc(tPerPlay,trainAgent) # has periodic callback to adjust STDP weights based on RL signal
  File "/Users/anwarharoon/Documents/NKI-modeling/NetPyNe_projects/virtual_arm/netpyne/sim/run.py", line 142, in runSimWithIntervalFunc
    func(h.t) # function to be called at intervals
  File "sim.py", line 1150, in trainAgent
    updateInputRates() # update firing rate of inputs to R population (based on image content)                
  File "sim.py", line 931, in updateInputRates
    if dFiringRates[pop][int(cell.gid-offset)]==0:
IndexError: index 400 is out of bounds for axis 0 with size 400
  
try debugging.....
print(pop,offset) in updateInputRates()

* 20aug28

check if setdminID works properly....
because offset computed above is based on it.
setdminID works fine.


I figured out the problem is with dFiringRates initialized in AIGame....
>>> sim.AIGame.dFiringRates['EV1'].shape
(484,)
>>> sim.AIGame.dFiringRates['EV1DE'].shape
(400,)
>>> sim.AIGame.dFiringRates['EV1DNE'].shape
(400,)


--Debugged initialization of dFiringRates in aigame.

    if dconf['net']['useNeuronPad']:
      for pop in self.dInputs.keys():
        self.dFiringRates[pop] = np.zeros(self.dInputs[pop])

-- Check rate assignments.

-- Right now all padded neurons are assigned 1e12 firing rate Interval. This could be adapted based on neighboring pixels.

  def updateDirSensitiveRatesWithPadding (self):
    # update firing rate of dir sensitive neurons using dirs (2D array with motion direction at each coordinate)
    if len(self.ldflow) < 1: return
    dflow = self.ldflow[-1]
    motiondir = dflow['ang'] # angles in degrees, but thresholded for significant motion; negative value means not used
    dAngPeak = self.dAngPeak
    dirSensitiveNeuronDim = self.dirSensitiveNeuronDim + self.dReceptiveField['EV1DE']-1
    offset = int((self.dReceptiveField['EV1DE']-1)/2)
    padded_motiondir = np.zeros(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim))
    padded_motiondir[offset:offset+motiondir.shape[0],offset:offset+motiondir.shape[1]]=motiondir
    AngRFSigma2 = self.AngRFSigma2
    MaxRate = self.dirSensitiveNeuronRate[1]
    for pop in self.ldirpop: self.dFiringRates[pop] = self.dirSensitiveNeuronRate[0] * np.ones(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim))
    if self.EXPDir:
      for y in range(padded_motiondir.shape[0]):
        for x in range(padded_motiondir.shape[1]):
          if padded_motiondir[y,x] >= 0.0: # make sure it's a valid angle
            for pop in self.ldirpop:
              fctr = np.exp(-1.0*(getangdiff(padded_motiondir[y][x],dAngPeak[pop])**2)/AngRFSigma2)
              #print('updateDirRates',pop,x,y,fctr,dAngPeak[pop],padded_motiondir[y][x])
              if MaxRate * fctr < self.FiringRateCutoff: fctr = 0
              self.dFiringRates[pop][y,x] += MaxRate * fctr
    else:
      for y in range(padded_motiondir.shape[0]):
        for x in range(padded_motiondir.shape[1]):
          if padded_motiondir[y,x] >= 0.0: # make sure it's a valid angle
            for pop in self.ldirpop:
              if abs(getangdiff(padded_motiondir[y][x],dAngPeak[pop])) <= self.AngRFSigma:
                self.dFiringRates[pop][y,x] = MaxRate
              #print('updateDirRates',pop,x,y,fctr,dAngPeak[pop],padded_motiondir[y][x])
    #print('padded_motiondir',padded_motiondir)
    for pop in self.ldirpop:
      self.dFiringRates[pop]=np.reshape(self.dFiringRates[pop],dirSensitiveNeuronDim**2)
      #print(pop,np.amin(self.dFiringRates[pop]),np.amax(self.dFiringRates[pop]),np.mean(self.dFiringRates[pop]))
      #print(pop,self.dFiringRates[pop])
    if dconf['sim']['saveAssignedFiringRates']:
      frcopy = deepcopy(self.dFiringRates)
      self.dAllFiringRates.append(frcopy)

-- in playGame.....

    if dconf['net']['useNeuronPad']==1:
      self.updateDirSensitiveRatesWithPadding()
    else:
      self.updateDirSensitiveRates() # update motion sensitive neuron input rates

-- ran sim "20aug27_A0_local_simConfig.pkl" with "useNeuronPad": 1, and "useTopological": 1
-- run sim "20aug28_A0_local_simConfig.pkl" with "useNeuronPad": 0, and "useTopological": 1
-- run sim "20aug28_A1_local_simConfig.pkl" with "useNeuronPad": 0, and     
"architecturePreMtoM": {
        "useProbabilistic": 1,
        "useTopological": 0
    },
-- run sim "20aug28_A2_local_simConfig.pkl" with "useNeuronPad": 1, and     
"architecturePreMtoM": {
        "useProbabilistic": 1,
        "useTopological": 0
    },
-- all above sims work. So i think "useNeuronPad" and "useTopological" both are working without any problem.
-- still need to use random weights between preM and M while using topological.

-- analyze "20aug25_A0_cycle_"
... saved _Perf.png
... saved _RacketBallYPosHist.png

-- run "20aug28_A0_cycle_" - 8 nodes.
.... useProbabilistic:1
.... useNeuronPad: 0
.... LocMaxRate:150
.... DirMaxRate:150
.... stimModDirW: 0.02
.... stimModInputW: 0.02
.... tstepPerAction: 50
.... 3000 sec.

-- run "20aug28_A1_cycle_" - 8 nodes.
.... useProbabilistic:1
.... useNeuronPad: 0
.... LocMaxRate:150
.... DirMaxRate:150
.... stimModDirW: 0.03
.... stimModInputW: 0.03
.... tstepPerAction: 50
.... 3000 sec.


-- run "20aug28_A0_cycle_" - 8 nodes.
.... useProbabilistic:1
.... useNeuronPad: 0
.... LocMaxRate:150
.... DirMaxRate:150
.... stimModDirW: 0.04
.... stimModInputW: 0.04
.... tstepPerAction: 50
.... 3000 sec.


-- running multistep sims on falcor.....

python multistepSim.py sn.json 30 10 20aug7_B2_cycle_Multi

  basefn = sys.argv[1]
  ncore = int(sys.argv[2])
  nstep = int(sys.argv[3])
  outf = sys.argv[4]

.... didnt work.....


-- run "20aug28_A0_falcor_" - 8 nodes.
.... useTopological:1
.... useNeuronPad: 0
.... LocMaxRate:150
.... DirMaxRate:150
.... stimModDirW: 0.02
.... stimModInputW: 0.02
.... tstepPerAction: 50
.... 3000 sec.

* 20sept08
-- run "20sept08_A1_falcor" - 16 nodes
.... useTopological:1
.... useNeuronPad: 0
.... LocMaxRate:150
.... DirMaxRate:150
.... stimModDirW: 0.03
.... stimModInputW: 0.03
.... tstepPerAction: 50
.... 300 sec.

I didnt wait for the simulation to end. I noticed that the ball was stuck on top corner so i decided to end the sim.


-- rerun "20sept08_A1_falcor" - 16 nodes
.... useTopological:1
.... useNeuronPad: 0
.... LocMaxRate:150
.... DirMaxRate:150
.... stimModDirW: 0.02
.... stimModInputW: 0.02
.... tstepPerAction: 50
.... 300 sec.

sam complained that direction selective neurons were not firing properly when using padding with topological architecture
-- test on local machine - 20sept08_A0_local_
.... useTopological:1
.... useNeuronPad: 1
.... LocMaxRate:150
.... DirMaxRate:150
.... stimModDirW: 0.02
.... stimModInputW: 0.02
.... tstepPerAction: 50
.... 100 sec.
.... "saveAssignedFiringRates": 1

python -i simdat.py backupcfg/20sept08_A0_local_sim.json
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']}
dAssignedFR = pickle.load(open('data/20sept08_A0_local_AssignedFiringRates.pkl','rb'))

Look at the angles computed for each game-step...
>>> len(ldflow)
500
>>> ldflow[0].keys()
dict_keys(['flow', 'mag', 'ang', 'goodInds'])

plt.imshow(ldflow[0]['ang']) --- all values -100.
plt.imshow(ldflow[1]['ang']) --- all values -100.
.
.
.
plt.imshow(ldflow[7]['ang']) -- all values -100.
plt.imshow(ldflow[8]['ang']) -- all values -100 except right racket which shows N (90 degrees) direction.

np.unique(ldflow[8]['ang'])
array([-100.,   90.])

plt.plot(dAssignedFR[8]['EV1DE'],'b')
plt.plot(dAssignedFR[8]['EV1DN'],'r')

>>> np.where(dAssignedFR[8]['EV1DN']>0)
(array([149, 150, 151, 152, 171, 172, 173, 174, 193, 194, 195, 196, 215,
       216, 217, 218, 237, 238, 239, 240, 259, 260, 261, 262]),)

>>> np.where(dAssignedFR[8]['EV1DE']>0) ----> This is supposed to be empty.
(array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  43,  44,  65,
        66,  87,  88, 109, 110, 131, 132, 153, 154, 175, 176, 197, 198,
       219, 220, 241, 242, 263, 264, 285, 286, 307, 308, 329, 330, 351,
       352, 373, 374, 395, 396, 417, 418, 439, 440, 461, 462, 463, 464,
       465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
       478, 479, 480, 481, 482, 483]),)

-- FOUND THE BUG
  padded_motiondir = np.zeros(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim))
  padded_motiondir[offset:offset+motiondir.shape[0],offset:offset+motiondir.shape[1]]=motiondir

This assigned 0 degrees to the border pixels which later drove 'E' direction neurons.

-- Fix this using
  padded_motiondir = np.multiply(-100,np.ones(shape=(dirSensitiveNeuronDim,dirSensitiveNeuronDim)))

-- After fixing the bug in direction selective neurons, rerun and check output again....
-- test on local machine - 20sept08_A1_local_
.... useTopological:1
.... useNeuronPad: 1
.... LocMaxRate:150
.... DirMaxRate:150
.... stimModDirW: 0.02
.... stimModInputW: 0.02
.... tstepPerAction: 50
.... 100 sec.
.... "saveAssignedFiringRates": 1

python -i simdat.py backupcfg/20sept08_A1_local_sim.json
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
binsz=20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']}
dAssignedFR = pickle.load(open('data/20sept08_A1_local_AssignedFiringRates.pkl','rb'))

plt.imshow(ldflow[0]['ang']) --- all values -100.
plt.imshow(ldflow[1]['ang']) --- all values -100.
.
.
.
plt.imshow(ldflow[29]['ang']) -- all values -100.
plt.imshow(ldflow[30]['ang']) -- motion detected now.




>>> np.where(dAssignedFR[29]['EV1DE']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[29]['EV1DNE']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[29]['EV1DN']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[29]['EV1DNW']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[29]['EV1DW']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[29]['EV1DSW']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[29]['EV1DS']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[29]['EV1DSE']>0)
(array([], dtype=int64),)


>>> np.unique(ldflow[30]['ang'])
array([-100.        ,  225. ,  270.        ])

>>> np.where(dAssignedFR[30]['EV1DE']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[30]['EV1DNE']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[30]['EV1DN']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[30]['EV1DNW']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[30]['EV1DW']>0)
(array([], dtype=int64),)
>>> np.where(dAssignedFR[30]['EV1DSW']>0)
(array([228, 229, 230, 231, 250, 251, 252, 253, 272, 273, 274, 275, 294,
       295, 296, 297]),)
>>> np.where(dAssignedFR[30]['EV1DS']>0)
(array([199, 200, 201, 202, 221, 222, 223, 224, 243, 244, 245, 246, 265,
       266, 267, 268, 287, 288, 289, 290, 309, 310, 311, 312]),)
>>> np.where(dAssignedFR[30]['EV1DSE']>0)
(array([], dtype=int64),)


-- Some ideas based on discussion with Sam
1. main idea from when i looked at it was that the weights that contribute to one behavior should get stabilized so that new learning of other behaviors does not interfere
they tested that rule with training several games in sequence
the exact details of the rule may or may not apply
based on --> this looks relevant for improving performance: https://www.pnas.org/content/114/13/3521.short
Overcoming catastrophic forgetting in neural networks
Deep neural networks are currently the most successful machine-learning technique for solving a variety of tasks, including language translation, image classification, and image generation. One weakness of such models is that, unlike humans, they are unable to learn multiple tasks sequentially. In this work we propose a practical solution to train such models sequentially by protecting the weights important for previous tasks. This approach, inspired by synaptic consolidation in neuroscience, enables state of the art results on multiple reinforcement learning problems experienced sequentially.

Haroon Anwar  10:13 AM
stabilizing- how?

samn  10:13 AM
yeah, those are the details that should look into
the concept seems useful

because we keep on changing weights without having any control over when something useful was learned
and overlearning could mean forgetting

2. the other potentially useful concept i saw was that in the DNQ networks they have two sub-networks,
one that gets its weights updated ~continuously, and one that makes the decisions
the weights for the decision-making network are only updated periodically to produce some stability

3. the other possible direction for later was that they sample from memory buffer (frames, actions, rewards) randomly

4. another area (like PFC) to direct planned actions

--- Below code is for testing the algorithm on fake image.

-- create a list of indices of padded neurons.

paddingInds2 = []
offset = 2
for j in range(24):
  for i in range(offset):
    paddingInds2.append([i,j])
    paddingInds2.append([j,i])
  for i in range(offset+20,24):
    paddingInds2.append([i,j])
    paddingInds2.append([j,i])

test = np.zeros((24,24))
for i in range(np.shape(paddingInds2)[0]):
  test[paddingInds2[i][0],paddingInds2[i][1]]=100


-- if want to extend the object pixels in the original image in horizontal dimension.

test2 = np.zeros((24,24))
count = 0
for i in range(np.shape(paddingInds2)[0]):
  if paddingInds2[i][1]<offset:
    test2[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0],paddingInds2[i][1]:paddingInds2[i][1]+offset+1])
  elif paddingInds2[i][1]>offset+19:
    test2[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0],paddingInds2[i][1]-offset:paddingInds2[i][1]])
  else:
    test2[paddingInds2[i][0],paddingInds2[i][1]] = test[paddingInds2[i][0],paddingInds2[i][1]]

-- if want to extend the object pixels in the original image in vertical dimension.

test3 = np.zeros((24,24))
for i in range(np.shape(paddingInds2)[0]):
  if paddingInds2[i][0]<offset:
    test3[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0]:paddingInds2[i][0]+offset+1,paddingInds2[i][1]])
  elif paddingInds2[i][0]>offset+19:
    test3[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0]-offset:paddingInds2[i][0],paddingInds2[i][1]])
  else:
    test3[paddingInds2[i][0],paddingInds2[i][1]] = test[paddingInds2[i][0],paddingInds2[i][1]]

-- if want to extend the object pixels in the original image in both vertical and horizontal dimensions.

test4 = np.zeros((24,24))
for i in range(np.shape(paddingInds2)[0]):
  if (paddingInds2[i][0]<offset+1) and (paddingInds2[i][1]<offset+1):
    test4[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0]:paddingInds2[i][0]+offset+1,paddingInds2[i][1]:paddingInds2[i][1]+offset+1])
  elif (paddingInds2[i][0]>offset+19) and (paddingInds2[i][1]>offset+19):
    test4[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0]-offset:paddingInds2[i][0],paddingInds2[i][0]-offset:paddingInds2[i][1]])
  elif (paddingInds2[i][0]<offset) and (paddingInds2[i][1]>=offset):
    test4[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0]:paddingInds2[i][0]+offset+1,paddingInds2[i][1]-offset:paddingInds2[i][1]])
  elif (paddingInds2[i][0]>offset+19) and (paddingInds2[i][1]<=offset+19):
    test4[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0]-offset:paddingInds2[i][0],paddingInds2[i][1]:paddingInds2[i][0]+offset+1])
  elif (paddingInds2[i][0]>offset) and (paddingInds2[i][1]<offset):
    test4[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0],paddingInds2[i][1]:paddingInds2[i][1]+offset+1])
  elif (paddingInds2[i][0]<=offset+19) and (paddingInds2[i][1]>offset+19):
    test4[paddingInds2[i][0],paddingInds2[i][1]]=np.amin(test[paddingInds2[i][0],paddingInds2[i][0]-offset:paddingInds2[i][1]])
  else:
    test4[paddingInds2[i][0],paddingInds2[i][1]] = test[paddingInds2[i][0],paddingInds2[i][1]]

-- Note that the algorithm uses np.amax instead of np.amin in 
def updateInputRatesWithPadding (self, dsum_Images):
in aigame.py ----> see below


  def updateInputRatesWithPadding (self, dsum_Images):
    # update input rates to retinal neurons
    tmp_padded_Image = np.amin(dsum_Images)*np.ones(shape=(self.input_dim,self.input_dim))
    padded_Image = np.amin(dsum_Images)*np.ones(shape=(self.input_dim,self.input_dim))
    offset = int((self.dReceptiveField[self.InputPop]-1)/2)
    tmp_padded_Image[offset:offset+dsum_Images.shape[0],offset:offset+dsum_Images.shape[1]]=dsum_Images
    # find the indices of padded pixels
    paddingInds = []
    for j in range(self.input_dim):
      for i in range(offset):
        paddingInds.append([i,j])
        paddingInds.append([j,i])
      for i in range(offset+dsum_Images.shape[0],self.input_dim):
        paddingInds.append([i,j])
        paddingInds.append([j,i])
    if self.objExtension=='Horizontal':
      for i in range(np.shape(paddingInds)[0]):
        if paddingInds[i][1]<offset:
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0],paddingInds[i][1]:paddingInds[i][1]+offset+1])
        elif paddingInds[i][1]>offset+19:
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0],paddingInds[i][1]-offset:paddingInds[i][1]])
        else:
          padded_Image[paddingInds[i][0],paddingInds[i][1]] = tmp_padded_Image[paddingInds[i][0],paddingInds[i][1]]
    elif self.objExtension=='Vertical':
      for i in range(np.shape(paddingInds)[0]):
        if paddingInds[i][0]<offset:
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0]:paddingInds[i][0]+offset+1,paddingInds[i][1]])
        elif paddingInds[i][0]>offset+19:
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0]-offset:paddingInds[i][0],paddingInds[i][1]])
        else:
          padded_Image[paddingInds[i][0],paddingInds[i][1]] = tmp_padded_Image[paddingInds[i][0],paddingInds[i][1]]
    else:
      for i in range(np.shape(paddingInds)[0]):
        if (paddingInds[i][0]<offset+1) and (paddingInds[i][1]<offset+1):
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0]:paddingInds[i][0]+offset+1,paddingInds[i][1]:paddingInds[i][1]+offset+1])
        elif (paddingInds[i][0]>offset+19) and (paddingInds[i][1]>offset+19):
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0]-offset:paddingInds[i][0],paddingInds[i][0]-offset:paddingInds[i][1]])
        elif (paddingInds[i][0]<offset) and (paddingInds[i][1]>=offset):
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0]:paddingInds[i][0]+offset+1,paddingInds[i][1]-offset:paddingInds[i][1]])
        elif (paddingInds[i][0]>offset+19) and (paddingInds[i][1]<=offset+19):
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0]-offset:paddingInds[i][0],paddingInds[i][1]:paddingInds[i][0]+offset+1])
        elif (paddingInds[i][0]>offset) and (paddingInds[i][1]<offset):
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0],paddingInds[i][1]:paddingInds[i][1]+offset+1])
        elif (paddingInds[i][0]<=offset+19) and (paddingInds[i][1]>offset+19):
          padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0],paddingInds[i][0]-offset:paddingInds[i][1]])
        else:
          padded_Image[paddingInds[i][0],paddingInds[i][1]] = tmp_padded_Image[paddingInds[i][0],paddingInds[i][1]]
    if dconf['net']['useBinaryImage']:
      thresh = threshold_otsu(padded_Image)
      binary_Image = padded_Image > thresh
      fr_Images = self.locationNeuronRate*binary_Image
    else:
      padded_Image = padded_Image - np.amin(padded_Image)
      padded_Image = (255.0/np.amax(padded_Image))*padded_Image # this will make sure that padded_Image spans 0-255
      fr_Images = self.locationNeuronRate/(1+np.exp((np.multiply(-1,padded_Image)+123)/10))
      #fr_Images = np.subtract(fr_Images,np.min(fr_Images)) #baseline firing rate subtraction. Instead all excitatory neurons are firing at 5Hz.
      #print(np.amin(fr_Images),np.amax(fr_Images))
    self.dFiringRates[self.InputPop] = np.reshape(fr_Images,self.dInputs[self.InputPop]) #400 for 20*20, 900 for 30*30, etc.

* 20sept09

import gym
import numpy as np  
from skimage.transform import downscale_local_mean, resize
from skimage.color import rgb2gray
from matplotlib import pyplot as plt

env = gym.make('Pong-v0')
env.reset()
caction = 3
observation, reward, done, info = env.step(caction)
courtYRng = (34, 194)
gray_Image = 255.0*rgb2gray(observation[courtYRng[0]:courtYRng[1],:,:]) # convert to grayscale; rgb2gray has 0-1 range so mul by 255
gray_ds = downscale_local_mean(gray_Image,(8,8)) # then downsample
gray_ds = np.where(gray_ds>np.min(gray_ds)+1,255,gray_ds) # Different thresholding
dsum_Images = gray_ds

tmp_padded_Image = np.amin(dsum_Images)*np.ones(shape=(22,22))
padded_Image = np.amin(dsum_Images)*np.ones(shape=(22,22))
offset = 1
tmp_padded_Image[offset:offset+dsum_Images.shape[0],offset:offset+dsum_Images.shape[1]]=dsum_Images
padded_Image[offset:offset+dsum_Images.shape[0],offset:offset+dsum_Images.shape[1]]=dsum_Images
paddingInds = []
for j in range(22):
  for i in range(offset):
    paddingInds.append([i,j])
    paddingInds.append([j,i])
  for i in range(offset+dsum_Images.shape[0],22):
    paddingInds.append([i,j])
    paddingInds.append([j,i])
for i in range(np.shape(paddingInds)[0]):
  if paddingInds[i][0]<offset:
    padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0]:paddingInds[i][0]+offset+1,paddingInds[i][1]])
  elif paddingInds[i][0]>offset+19:
    padded_Image[paddingInds[i][0],paddingInds[i][1]]=np.amax(tmp_padded_Image[paddingInds[i][0]-offset:paddingInds[i][0],paddingInds[i][1]])
  else:
    padded_Image[paddingInds[i][0],paddingInds[i][1]] = tmp_padded_Image[paddingInds[i][0],paddingInds[i][1]]

-- padding with extension works well...

-- run 5000 sec "20sept09_A1_cycle_"
... with padding
... with vertical object extension.
... with tstepPerAction: 20ms 
... normalizeWeightStepSize: 1000 seconds
... stimModDirW: 0.02
... stimModInputW: 0.02

-- run 5000 sec "20sept09_A2_cycle_"
... with padding
... with vertical object extension.
... with tstepPerAction: 50ms
... normalizeWeightStepSize: 1000 seconds
... stimModDirW: 0.02
... stimModInputW: 0.02
.... memory error while gathering the data before saving. restarted sim for  3000 sec instead of 5000 sec named "20sept10_A2_cycle"

-- run 5000 sec "20sept09_A1_falcor_"
... with padding
... with vertical object extension.
... with tstepPerAction: 20ms 
... normalizeWeightStepSize: 1000 seconds
... stimModDirW: 0.025
... stimModInputW: 0.025
---> no movement in rackets, use 0.015 instead of 0.025 and restart

-- run 5000 sec "20sept09_A2_falcor_"
... with padding
... with vertical object extension.
... with tstepPerAction: 50ms
... normalizeWeightStepSize: 1000 seconds
... stimModDirW: 0.025
... stimModInputW: 0.025
---> no movement in rackets, use 0.015 instead of 0.025 and restart

* 20sept11

-- analyzing "20sept10_A2_cycle"

python -i simdat.py backupcfg/20sept10_A2_cycle_sim.json
#dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
binsz=50
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in lpop}


plotPerf(actreward)..... and save the plot as 20sept10_A2_cycle_Perf.png

....
clf(); dobjpos = loadObjPos() ## 
subplot(2,1,1); xlabel('Racket Y position'); hist(dobjpos['racket'][:,1])
subplot(2,1,2); xlabel('Ball Y position'); hist(dobjpos['ball'][:,1])
and save the plot as 20sept10_A2_cycle_RacketBallYposHist.png

....
plot(dobjpos['ball'][:,1],'b')
plot(dobjpos['racket'][:,1],'r')
legend(['ball','racket'])
xlabel('tpnts')
ylabel('Y-Pixel loc')
didnt save this.. not very informative when saved in full.

....
ballX,ballY = dobjpos['ball'][:,0],dobjpos['ball'][:,1]
racketX,racketY = dobjpos['racket'][:,0],dobjpos['racket'][:,1]
tt = np.linspace(0,totalDur,len(dobjpos['ball']))
pdpos = pd.DataFrame(np.array([tt, ballX, ballY, racketX, racketY]).T,columns=['time','ballX','ballY','racketX','racketY'])
dout = getdistvstimecorr(pdpos)
plot(dout['lN'],dout['lr'],'ko',markersize=15)
xlabel('Number examples'); ylabel('Correlation between paddle/ball distance and time')
and save the plot as 20sept10_A2_cycle_RacketBalldistcorr.png

** based on discussion with Sam, i will keep connections between V1 and M neurons fixed (i.e. no RL)

-- added in sim.json
in "net"....
        "RLconns":{
            "VisualRL":0,
            "RecurrentDirNeurons":0,
            "RecurrentLocNeurons":0,
            "FeedForwardDirNtoM":1,
            "FeedForwardLocNtoM":0,
            "FeedbackLocNeurons":0,
            "RecurrentMNeurons":0,
            "FeedbackMtoDirN":0,
            "FeedbackMtoLocN":0
        },

and

        "EPreMDirPops": ["EV1DE","EV1DNE","EV1DN","EV1DNW","EV1DW","EV1DSW","EV1DS","EV1DSE"],
        "EPreMLocPops": ["EV1","EV4","EMT"],

so that can allow RL only between Dir neurons and Motor neurons.
excluding RL from V1 to Motor neurons' connections.

-- for recurrent excitation in premotor neurons.

      useRL = 0
      if prety in dconf['net']['EPreMDirPops']:
        if dconf['net']['RLconns']['RecurrentDirNeurons']: 
          useRL = 1
      if prety in dconf['net']['EPreMLocPops']:
        if dconf['net']['RLconns']['RecurrentLocNeurons']: 
          useRL = 1 
      if useRL and dSTDPparamsRL[synmech]['RLon']: # only turn on plasticity when specified to do so
        netParams.connParams[k]['plast'] = {'mech': 'STDP', 'params': dSTDPparamsRL[synmech]}

--  change in EIPlast for motor cortex

  if 'EIPlast' in dconf['net']['RLconns']:
    if dconf['net']['RLconns']['EIPlast']:

-- change dconf['net']['VisualRL'] to dconf['net']['RLconns']['VisualRL'] 

-- for visual feedback

        if dconf['net']['RLconns']['FeedbackLocNeurons'] and dSTDPparamsRL[synmech]['RLon']: # only turn on plasticity when specified to do so
          netParams.connParams[k]['plast'] = {'mech': 'STDP', 'params': dSTDPparamsRL[synmech]}

-- for feedforward EpreM to EM

        useRL = 0
        if prety in dconf['net']['EPreMDirPops']:
          if dconf['net']['RLconns']['FeedForwardDirNtoM']: 
            useRL = 1
        if prety in dconf['net']['EPreMLocPops']:
          if dconf['net']['RLconns']['FeedForwardLocNtoM']: 
            useRL = 1
        if useRL and dSTDPparamsRL[synmech]['RLon']: # only turn on plasticity when specified to do so
          netParams.connParams[k]['plast'] = {'mech': 'STDP', 'params': dSTDPparamsRL[synmech]}

-- for recurrent EM

          if dconf['net']['RLconns']['RecurrentMNeurons'] and dSTDPparamsRL[synmech]['RLon']: # only turn on plasticity when specified to do so
            netParams.connParams[k]['plast'] = {'mech': 'STDP', 'params': dSTDPparamsRL[synmech]}

--- for feedback EM to EpreM

          if poty in dconf['net']['EPreMDirPops']:
            if dconf['net']['RLconns']['FeedbackMtoDirN']: 
              useRL = 1
          if poty in dconf['net']['EPreMLocPops']:
            if dconf['net']['RLconns']['FeedbackMtoLocN']: 
              useRL = 1
          if useRL and dSTDPparamsRL[synmech]['RLon']: # only turn on plasticity when specified to do so
            netParams.connParams[k]['plast'] = {'mech': 'STDP', 'params': dSTDPparamsRL[synmech]}

-- test locally, if runs without any error... then submit on falcor.

* 20sept14

-- run 3000 sec sim "20sept14_A0_falcor_" using "tstepPerAction": 20

-- run 3000 sec sim "20sept14_A1_falcor_" using "tstepPerAction": 50

-- run 3000 sec sim "20sept14_A0_cycle_" using "tstepPerAction": 20 and "EEMWghtAM": 5e-4 and "EEPreMWghtAM":8e-6

-- run 3000 sec sim "20sept14_A1_cycle_" using "tstepPerAction": 50 and "EEMWghtAM": 5e-4 and "EEPreMWghtAM":8e-6

-- run 100 sec sim "20sept14_B0_local_" using "tstepPerAction": 20 and "EEMWghtAM": 5e-4 and "EEPreMWghtAM":8e-6
and     "useSimulatedEnv": 1,

-- run 100 sec sim "20sept14_B1_local_" using "tstepPerAction": 50 and "EEMWghtAM": 5e-4 and "EEPreMWghtAM":8e-6
and     "useSimulatedEnv": 1,

-- analyzing sim with simulatedPong...

python -i simdat.py backupcfg/20sept14_B0_local_sim.json
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
plt.imshow(np.sum(dact['EV1'],0))
binsz = 20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in lpop}
plt.hist(dhist['EV1'][1][1:],100) 

plotPerf(actreward)

....
clf(); dobjpos = loadObjPos() ## 
subplot(2,1,1); xlabel('Racket Y position'); hist(dobjpos['racket'][:,1])
subplot(2,1,2); xlabel('Ball Y position'); hist(dobjpos['ball'][:,1])
and save the plot as 20aug24_A0_cycle_RacketBallYposHist.png

....
plot(dobjpos['ball'][:,1],'b')
plot(dobjpos['racket'][:,1],'r')
legend(['ball','racket'])
xlabel('tpnts')
ylabel('Y-Pixel loc')
and save the plot as 20aug24_A0_cycle_RacketBallYposFull.png and 20aug24_A0_cycle_RacketBallYposZoomed.png

....
ballX,ballY = dobjpos['ball'][:,0],dobjpos['ball'][:,1]
racketX,racketY = dobjpos['racket'][:,0],dobjpos['racket'][:,1]
tt = np.linspace(0,totalDur,len(dobjpos['ball']))
pdpos = pd.DataFrame(np.array([tt, ballX, ballY, racketX, racketY]).T,columns=['time','ballX','ballY','racketX','racketY'])
dout = getdistvstimecorr(pdpos)
plot(dout['lN'],dout['lr'],'ko',markersize=15)
xlabel('Number examples'); ylabel('Correlation between paddle/ball distance and time')
didnt save... not sure what to make out of it.....

-- more analysis
.... for a pixel representing ball, and Model racket, find firing rates of poulation.

e.g. 
Ball_pixel = (10,10)
Racket_pixel = (5,17)
find all instrances, when Ball and racket were at these pixels.
find possible Ball sequences, including the Ball_pixel as the first image in the sequence.
then for the ball moving in a single direction, find whether model is learning in which direction to move or not.


def analyzeActionLearningForRepeatedInputSequences(dact, InputImages, BallPixel=(10,10), RacketPixel=(5,17)):
  nbseq=2
  targetCorr=0.99
  ballInds = np.where(InputImages[:,BallPixel[0],BallPixel[1]]>250)
  racketInds = np.where(InputImages[:,RacketPixel[0],RacketPixel[1]]>250)
  targetInds = []
  for inds in racketInds[0]:
    if inds in ballInds[0]:
      targetInds.append(inds)
  seqImages = []
  for inds in targetInds:
    seqImages.append(np.sum(InputImages[inds:inds+1,:,3:17],0))
  x = seqImages[0]
  goodInds = []
  for j in range(np.shape(seqImages)[0]):
    y = seqImages[j]
    corr, p_value = pearsonr(x.flat, y.flat)
    if corr>targetCorr:
      goodInds.append(j)
  lmotorpop = [pop for pop in dconf['net']['EMotorPops'] if dconf['net']['allpops'][pop]>0] 
  goodSeqImages = []
  repActions = []
  repPropActions = []
  repRewards = []
  dseqOutputs = {pop:np.zeros((len(goodInds),dact[pop].shape[1],dact[pop].shape[2]),dtype=float) for pop in lmotorpop}
  for inds in goodInds:
    goodSeqImages.append(np.sum(InputImages[targetInds[inds]:targetInds[inds]+1,:,:],0))
    repActions.append(actreward['action'][targetInds[inds]+1])
    repRewards.append(actreward['reward'][targetInds[inds]+1])
    repPropActions.append(actreward['proposed'][targetInds[inds]+1])
    for pop in dseqOutputs.keys():
      dseqOutputs[pop][inds,:,:]=dact[pop][targetInds[inds]+1,:,:]
  dsummedOutputs = {pop:np.zeros((len(goodInds),1),dtype=float) for pop in lmotorpop}
  for pop in lmotorpop:
    dsummedOutputs[pop] = np.sum(np.sum(dseqOutputs[pop],axis=2),axis=1)
  fig, axs = plt.subplots(3, 1, figsize=(10,8));
  lax = axs.ravel()
  lax[0].imshow(np.sum(goodSeqImages,0))
  lax[0].axis('off')
  for pop,clr in zip(lmotorpop,['b','r','g']):
    lax[1].plot(dsummedOutputs[pop],clr+'-o',markersize=3)
    lax[1].set_ylabel('# of pop spikes')
  lax[1].legend(lmotorpop,loc='best')
  lax[2].plot(repActions,'-o',color=(0,0,0,1),markersize=3)
  lax[2].plot(repPropActions,'-o',color=(0.5,0.5,0.5,1),markersize=3)
  lax[2].set_yticks([1,3,4])
  lax[2].set_yticklabels(['STAY','DOWN','UP'])
  lax[2].legend(['Actions','Proposed'],loc='best')

-- added analyzeActionLearningForRepeatedInputSequences(dact, InputImages, BallPixel=(10,10), RacketPixel=(5,17)) in simdat.py

-- -- run 1000 sec sim "20sept14_B2_local_" using "tstepPerAction": 50 and "EEMWghtAM": 5e-4 and "EEPreMWghtAM":8e-6
and     "useSimulatedEnv": 1,


* 20sept15

-- resume 3000 sec sim "20sept14_A1R1_cycle_" using "tstepPerAction": 50 and "EEMWghtAM": 5e-4 and "EEPreMWghtAM":8e-6
from data/20sept14_A1_cycle_synWeights_final.pkl

-- resume 3000 sec sim "20sept14_A0R1_cycle_" using "tstepPerAction": 50 and "EEMWghtAM": 5e-4 and "EEPreMWghtAM":8e-6
from data/20sept14_A0_cycle_synWeights_final.pkl

-- disucssion with sam

samn:speech_balloon:  12:09 PM
see what's most useful and decide...i still feel we need to allow learning at longer timescales with sparser reward, etc.
12:09
ok - so what's on the list of choices?
12:09
thx for edits - sounds better now

Haroon Anwar  12:10 PM
targeted on smaller time scale + non-targeted at longer time scale
12:10
2. way to decide , how to use targeted for longer times
12:11
not sure how will we do that
12:11
or just see if we can train to follow the ball with targeted on small time scale
12:11
without worrying about complex patterns

samn:speech_balloon:  12:11 PM
i'm fine with that ... seems like we should be able to at least get that
12:12
even if it's not as good as winning the game

Haroon Anwar  12:12 PM
ok
12:12
so i will try these two then

samn:speech_balloon:  12:12 PM
3. motor command encoding - is it sufficient
12:12
since you had mentioned that before
12:12
but you pick which one seems most promising

-- run simulatedPong on cycle.

-- List of things to do...
1. run simulatedPong on cycle to test
.... how does the model behave in previous settings.... "RLlenhebb": 200, "RLwindhebb": 50 --- 3000 sec "20sept15_C0_simulated_cycle_"
.... reduce the length of eligibility to 100 ms for ... "RLlenhebb": 100, "RLwindhebb": 50 (only if tSetpPerPlay is 50 ms)

RLwindhebb, RLwindanti : Maximum interval between pre- and post-synaptic events for an starting an eligibility trace.  There are separate ones for the Hebbian and anti-Hebbian events.
RLlenhebb, RLlenanti : Length of the eligibility Hebbian and anti-Hebbian eligibility traces, or the decay time constants if the traces are decaying exponentials.

* 20sept16

-- 3000 sec resumed sim "20sept14_A1R1_cycle_" finished. took 43492.43 sec to run using 24 cores on cycle.
save concantenated performance using

lfn = ['20sept14_A1_cycle_', '20jun30_A1R1_cycle_']
lfn = ['data/'+x+'ActionsRewards.txt' for x in lfn]
pdac = getconcatactionreward(lfn)


saved as 'SMARTAgent/20sept14_A1andA1R1_cycle_Perf.png'

-- resume further for 3000 sec in "20sept14_A1R2_cycle" using 16 cores instead of 24.

-- 3000 sec sim "20sept15_C0_simulated_cycle_" finished. Performance very similar to what we see for full game.
...means no learning or not stable learning.

-- reduce for AMPA "RLlenhebb": 200 to "RLlenhebb": 100 and run 1000 sec sim in "20sept16_C0_simulated_cycle_"

-- reduce for AMPA "RLlenhebb": 200 to "RLlenhebb": 50 and run 1000 sec sim in "20sept16_D0_simulated_cycle_"

-- analyzing "20sept14_B2_local_"
python -i simdat.py backupcfg/20sept14_B2_local_sim.json
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)
binsz = 20
dhist = {pop:getspikehist(dspkT[pop],dnumc,binsz,totalDur) for pop in lpop}
plt.hist(dhist['EV1'][1][1:],100) 

plotPerf(actreward)

analyzeActionLearningForRepeatedInputSequences(dact, InputImages, BallPixel=(10,10), RacketPixel=(5,17))
... looking at this plot, it clearly shows that the model has not learned that the racket has to move down.
... need to look at the weights too.

# look at the weights with preid between 484 and 967
E_wghts = pdf[pdf.preid<968] 
# pixel 10,10 would be neuronID 726 for EV1DE

-- 1000 sec sim in "20sept16_C0_simulated_cycle_" completed.
python -i simdat.py backupcfg/20sept16_C0_simulated_cycle_sim.json
dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = allpossible_pops)

-- 1000 sec sim in "20sept16_D0_simulated_cycle_" completed.

-- reduce for AMPA "RLlenhebb": 200 to "RLlenhebb": 50 and run 1000 sec sim in "20sept16_E0_simulated_cycle_"
also with follow the ball rewards.

standard rewards are
    "rewardcodes": {
        "scorePoint": 1.0,
        "losePoint": -0.1,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.5
    },

modified rewards for this sim are
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint": 0.0,
        "followTarget": 0.5,
        "avoidTarget": -0.05,
        "hitBall": 0
    },


-- reduce for AMPA "RLlenhebb": 200 to "RLlenhebb": 100 and run 1000 sec sim in "20sept16_F0_simulated_cycle_"
also with follow the ball rewards.

standard rewards are
    "rewardcodes": {
        "scorePoint": 1.0,
        "losePoint": -0.1,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.5
    },

modified rewards for this sim are
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint": 0.0,
        "followTarget": 0.5,
        "avoidTarget": -0.05,
        "hitBall": 0
    },

* 20sept17

-- 3000 sec in "20sept14_A0R1_cycle" finished.
-- 3000 sec in "20sept14_A1R2_cycle" finished.
-- 1000 sec sim in "20sept16_E0_simulated_cycle_" finished.
... p(follow) ~ 0.4
-- 1000 sec sim in "20sept16_F0_simulated_cycle_" finished.
... p(follow) ~ 0.4

so just using follow/not follow the ball rewards do not add any value to the performance.

Why is the performance converging to around 0.4 for p(follow)? irrespective of different rewarding strategies we use and irrelevant of RL parameters we use.

-- the analysis to establish causality
1. For a chosen ball and right racket locations in a frame, find all timepoints when the same input (left racket could be at any location)
2. look at the activity map of neurons for those time points.
3. for all active neurons in (input layers) any of those time points, note down the IDs and only use those selected neurons to find the downstream neurons i.e. postsynaptic neurons and the associated weights.
4. see how much influence the left racket driven neurons have on firing rates of M neurons.  
--

Since the pixel intensity level is translated into firing rate for next time interval, i should look at targetInds[goodInds[i]]+1

FRV1_ball_pixel10_10 = dact['EV1'][targetInds[goodInds],11,11] ---> gives me error

FRV1_ball_pixel10_10 = np.zeros((len(goodInds)))
for i in range(len(goodInds)):
  FRV1_ball_pixel10_10[i] = dact['EV1'][targetInds[goodInds[i]]+1,11,11]


... ignoring corr
FRV1_ball_pixel10_10 = np.zeros((len(targetInds)))
for i in range(len(targetInds)):
  FRV1_ball_pixel10_10[i] = dact['EV1'][targetInds[i]+1,11,11]
... firing rate doesnt look as i expected. CHECK HERE.


FRV1DE_ball_pixel10_10 = np.zeros((len(targetInds)))
for i in range(len(targetInds)):
  FRV1DE_ball_pixel10_10[i] = dact['EV1DE'][targetInds[i]+1,11,11]
... checked all 8 directions... only 'E' is active and it has either 7 spikes or 8 spikes. (supposed to be 7.5 spikes in 50 ms to have 150 Hz)

FRV1_racket_pixel6_18 = np.zeros((len(targetInds)))
for i in range(len(targetInds)):
  FRV1_racket_pixel6_18[i] = dact['EV1'][targetInds[i]+1,6,18]

FRV1DN_racket_pixel6_18 = np.zeros((len(targetInds)))
for i in range(len(targetInds)):
  FRV1DN_racket_pixel6_18[i] = dact['EV1DN'][targetInds[i]+1,6,18]

FRV1DS_racket_pixel6_18 = np.zeros((len(targetInds)))
for i in range(len(targetInds)):
  FRV1DS_racket_pixel6_18[i] = dact['EV1DS'][targetInds[i]+1,6,18]


a. plot InputImage at time t-1 and t. (need 2 panels)
plt.imshow(InputImages[targetInds[i]-1])
plt.imshow(InputImages[targetInds[i]])
OR
plt.imshow(np.subtract(InputImages[targetInds[0]],InputImages[targetInds[0]-1]))

b. plot direction angles at time t. (need 1 panel)
plt.imshow(ldflow[targetInds[i]]['ang'])
plt.colorbar()

c. plot actmap for V1 at time t+1 (need 13 panels for c,d and e)
and 
d. plot actmap for direction selective neurons at time t+1
and
e. plot actmap for motor neurons at time t+1.
for pop in lpop:
  plt.imshow(dact[pop][targetInds[i]+1])

f. plot raster 100 ms before and 100 ms after. (1 panel)

repeat everything for next targetInds[i+1]

-- leave other possible plots for now.

g. plot weights (2 panels 1 for EMUP and 1 for EMDOWN).
action vs proposed action at time t+1.

h. Reward signal for time t+1.

make 36 panels in 4 rows.

fig, axs = plt.subplots(4, 9, figsize=(14,8));
i = 0
lax = axs.ravel()
lax[0].imshow(InputImages[targetInds[i]])
lax[0].set_title('InputImage[t]',fontsize=6)
lax[0].axis('off')
lax[1].imshow(np.subtract(InputImages[targetInds[i]],InputImages[targetInds[i]-1]))
lax[1].set_title('InputImage[t]-InputImage[t-1]',fontsize=6)
lax[1].axis('off')
lax[2].imshow(ldflow[targetInds[i]]['ang'])
lax[2].set_title('Angles',fontsize=6)
lax[2].axis('off')
count = 3
lax[16].axis('off')
lax[17].axis('off')
for pop in lpop:
  if pop=='IM':
    pcm = lax[count].imshow(dact[pop][targetInds[i]+1],vmin=0,vmax=8)
    fig.colorbar(pcm, ax = lax[count])
  lax[count].imshow(dact[pop][targetInds[i]+1],vmin=0,vmax=8)
  lax[count].set_title(pop+'[t+1]',fontsize=6)
  lax[count].axis('off')
  count = count + 1
offset = 18
i = 215
lax[offset+0].imshow(InputImages[targetInds[i]])
lax[offset+0].set_title('InputImage[t]',fontsize=6)
lax[offset+0].axis('off')
lax[offset+1].imshow(np.subtract(InputImages[targetInds[i]],InputImages[targetInds[i]-1]))
lax[offset+1].set_title('InputImage[t]-InputImage[t-1]',fontsize=6)
lax[offset+1].axis('off')
lax[offset+2].imshow(ldflow[targetInds[i]]['ang'])
lax[offset+2].set_title('Angles',fontsize=6)
lax[offset+2].axis('off')
count = 3
lax[34].axis('off')
lax[35].axis('off')
for pop in lpop:
  if pop=='IM':
    pcm2 = lax[offset+count].imshow(dact[pop][targetInds[i]+1],vmin=0,vmax=8)
    fig.colorbar(pcm2, ax = lax[offset+count])
  lax[offset+count].imshow(dact[pop][targetInds[i]+1],vmin=0,vmax=8)
  lax[offset+count].set_title(pop+'[t+1]',fontsize=6)
  lax[offset+count].axis('off')
  count = count + 1

popwts = plotMeanWeights (pdf,ax=None,msz=1,xl=None,lpop=['EMDOWN','EMUP','EMSTAY'],lclr=['r','b','g'],plotindiv=True)
>>> popwts.keys()
dict_keys(['EMDOWN', 'EMUP'])


--- draw average M activity 
pop = 'EMUP'
utimes = np.unique(pdf.time)
nbNeurons = dendidx[pop]+1-dstartidx[pop]
tpnts = len(utimes)
wts_top = np.zeros((tpnts,nbNeurons))
count = 0
for idx in range(dstartidx[pop],dendidx[pop]+1,1): # first plot average weight onto each individual neuron
  pdfs = pdf[(pdf.postid==idx)]  
  wts = [np.mean(pdfs[(pdfs.time==t)].weight) for t in utimes]
  wts_top[:,count] = wts
  count = count+1

tpnt1 = np.reshape(wts_top[0,:],(10,10))
tpnt2 = np.reshape(wts_top[-1,:],(10,10))

plt.imshow(np.subtract(tpnt2,tpnt1))
plt.title('Change in weights-->EMUP')


pop = 'EMDOWN'
utimes = np.unique(pdf.time)
nbNeurons = dendidx[pop]+1-dstartidx[pop]
tpnts = len(utimes)
wts_top = np.zeros((tpnts,nbNeurons))
count = 0
for idx in range(dstartidx[pop],dendidx[pop]+1,1): # first plot average weight onto each individual neuron
  pdfs = pdf[(pdf.postid==idx)]  
  wts = [np.mean(pdfs[(pdfs.time==t)].weight) for t in utimes]
  wts_top[:,count] = wts
  count = count+1

tpnt3 = np.reshape(wts_top[0,:],(10,10))
tpnt4 = np.reshape(wts_top[-1,:],(10,10))

plt.imshow(np.subtract(tpnt4,tpnt3))
plt.title('Change in weights-->EMDOWN')

* 20sept21

-- ran 1000 sec sim "20sept20_A0_simulated_cycle_"
with
    "rewardcodes": {
        "scorePoint": 0,
        "losePoint": 0,
        "followTarget": 0.5,
        "avoidTarget": -0.25,
        "hitBall": 0
see 20sept20_A0_simulated_cycle_perf.jpg---- p(follow) started dropping. ~0.32 @ 1000 sec.
see 20sept20_A0_simulated_cycle_EMUPweightschange.jpg 
and see 20sept20_A0_simulated_cycle_EMDOWNweightschange.jpg ... I guess the punishments and rewards didnt balance out the weights of ball and other rackets. Because there were much more punshiments than rewards.
POTENTIAL IDEA: could have decaying values of rewards and punishments (representing desensitization). NOT SURE HOW TO IMPLEMENT THIS....

-- ran 1000 sec sim "20sept20_B0_simulated_cycle_"
    "rewardcodes": {
        "scorePoint": 0,
        "losePoint": 0,
        "followTarget": 0.5,
        "avoidTarget": -0.5,
        "hitBall": 0
see 20sept20_B0_simulated_cycle_perf.jpg---- p(follow) started dropping. ~0.29 @ 1000 sec.
see 20sept20_A0_simulated_cycle_EMUPweightschange.jpg 
and see 20sept20_A0_simulated_cycle_EMDOWNweightschange.jpg - larger decrease in weights for ball and other racket.

-- ran 1000 sec sim "20sept20_C0_simulated_cycle_"
    "rewardcodes": {
        "scorePoint": 0,
        "losePoint": 0,
        "followTarget": 0.5,
        "avoidTarget": -0.25,
        "hitBall": 0
    "architecturePreMtoM": {
        "useProbabilistic": 1,
see 20sept20_C0_simulated_cycle_perf.jpg---- p(follow) started dropping. ~0.24 @ 1000 sec.
see 20sept20_C0_simulated_cycle_EMUPweightschange.jpg 
and see 20sept20_C0_simulated_cycle_EMDOWNweightschange.jpg
... the weights changed but no clue how to interpret the effect of learning on actions.

-- modify simulatePong to have 3 input patterns. when using "random":1 in sim.json

    "simulatedEnvParams": {
        "random":1,
        "yball":80,
        "yracket":40
    }

in simulatePong:

self.randomizeYpos = dconf['simulatedEnvParams']['random']

      if self.randomizeYpos: 
        shiftdir = random.choice([1,3,4])
        if shiftdir==3:
          self.ypos_ball = dconf['simulatedEnvParams']['yball'] + 40
        elif shiftdir==4:
          self.ypos_ball = dconf['simulatedEnvParams']['yball'] - 40
        else:
          self.ypos_ball = dconf['simulatedEnvParams']['yball'] 

* 20sept22

-- ran 1000 sec sim "20sept21_A0_simulated_cycle_" with "random" simulatedPong.

What is happening with weights?

-- ball and rackets activate neurons in preMotor area as well as neurons in M areas.
-- Since the ball is following the same trajectory, it always activates same neurons.
-- For timestep t, the right racket is above the ball, the proposed action is MOVE DOWN. If the racket moves up, a punishment will be passed.
.... this punishment will decrease the weights for neurons representing ball and neurons representing rackets onto EMUP neurons.
--For timestep t+1, the right racket is still above the ball, the proposed action is MOVE DOWN. If the racket moves down, a reward will be passed.
... this reward will increase the weights for neurons representing ball and neurons representing rackets onto EMDOWN neurons.
-- For timesetp t+2, the right racket is below the ball, the proposed action is MOVE UP. if the racket moves up, a reward will be passed.
... this reward will increase the weights for neurons representing ball and neurons representing rackets onto EMUP neurons.
-- comparing timestep t and t+2.... 
... because same neurons represented ball (because of fixed ball trajectory), at time t the weights decreased but at time t+2 weights increased. (net result increase because reward was +0.1 and punishment was -0.01)
... but different neurons represented racket at time t and t+2. at time t, racket was above the ball and at time t+2, racket was below the ball. at time t the weights of neurons on top right corner decreased...and at time t+2 the weights of neurons on bottom right corner increased. 

SO THE PROBLEM IS.... NO ASSOCIATION BETWEEN BALL TRAJECTORY AND RACKET POSITION HAS BEEN ESTABLISHED.

Can recurrent connectivity fix this problem???????

-- Similar potential problem or not??:
-- at time t ball moves horizontally (E) and the racket is above the ball, the proposed action is MOVE DOWN. If the racket moves up, a punishment will be passed.
... this punishment will decrease weights of ball and rackets in EMUP.
-- at time t+1 ball moves SE and the racket is above the ball, the proposed action is MOVE DOWN. If the racket moves down, a reward will be passed.
... this reward will increase weights lf ball and rackets in EMDOWN.


IDEA... good or bad???

-- what if another network of neurons that we may call DECISION MAKING NEURONS (10x10) drives EM neurons....
-- when learning is ON, the DECISION MAKING NEURONS get activated by topological inputs (fixed weights) from preM neurons, in turn activating M neurons (fixed weights).
-- start with low weights (could be 0) between preM and M.

.... not sure how to do this kind of thing.... 

-- what happens when we have V4(100 neurons) and MT(100 neurons)
-- ran 20sept22_B0_simulated_cycle_ with 
EV4:100, IV4:25, EMT:25, IMT:9
* 20sept23

-- seems that the connections were not made propoerly from V4 and MT to EM.
-- must check the connectivity after looking at the results of simulations:

-- the connections should be either in divergent list or convergent list. cant be in both.
... with 100 V4 neurons and 100 EM neurons, i choose to apply convergence of network connectivity.
In "alltopoldivcons":
changed "EV4":{"EV1":3,"EMDOWN":3,"EMUP":3,"EMSTAY":0}, to "EV4":{"EV1":3},
and In "alltopolconvcons":
change "EV4":{"IV4":3,"EMT":3},
to "EV4":{"IV4":3,"EMT":3,"EMDOWN":3,"EMUP":3,"EMSTAY":0},
... with 25 MT neurons and 100 EM neurons, i choose to apply divergence of network connectivity.

-- check if all connections look good...

-- Identified first problem:

>>> dnumc
OrderedDict([('ER', 0), ('IR', 0), ('EV1', 484), ('EV1DE', 484), ('EV1DNE', 484), ('EV1DN', 484), ('EV1DNW', 484), ('EV1DW', 484), ('EV1DSW', 484), ('EV1DS', 484), ('EV1DSE', 484), ('IV1', 324), ('EV4', 196), ('IV4', 169), ('EMT', 81), ('IMT', 49), ('EMDOWN', 100), ('EMUP', 100), ('EMSTAY', 0), ('IM', 50)])
>>> receptive_fields
[5, 5]
>>> dnumc_padx
OrderedDict([('ER', 0), ('IR', 0), ('EV1', 2), ('EV1DE', 2), ('EV1DNE', 2), ('EV1DN', 2), ('EV1DNW', 2), ('EV1DW', 2), ('EV1DSW', 2), ('EV1DS', 2), ('EV1DSE', 2), ('IV1', 4), ('EV4', 2), ('IV4', 4), ('EMT', 2), ('IMT', 4), ('EMDOWN', 0), ('EMUP', 0), ('EMSTAY', 0), ('IM', 0)])


  for pop in allpops_withconvtopology:
    receptive_fields = []
    for postpop in list(dtopolconvcons[pop].keys()):
      if dnumc[postpop]>0:
        receptive_fields.append(dtopolconvcons[pop][postpop])
    if len(receptive_fields)>0:
      max_receptive_field = np.amax(receptive_fields)
    else:
      max_receptive_field = 0
    if dnumc[pop]>0 and max_receptive_field>0:
      # dnumc[pop] = int((np.sqrt(dnumc[pop])+max_receptive_field-1)**2)
      dnumc_padx[pop] = max_receptive_field-1
  for pop in allpops_withdivtopology:
    receptive_fields = []
    for postpop in list(dtopoldivcons[pop].keys()):
      if dnumc[postpop]>0:
        receptive_fields.append(dtopoldivcons[pop][postpop])
    if len(receptive_fields)>0:
      max_receptive_field = np.amax(receptive_fields)
    else:
      max_receptive_field = 0
    if dnumc[pop]>0 and max_receptive_field>0:
      # dnumc[pop] = int((np.sqrt(dnumc[pop])+max_receptive_field-1)**2)
      dnumc_padx[pop] = max_receptive_field-1

update dnumc separately as below....

  for pop in allpops:
    if dnumc[pop]>0 and dnumc_padx[pop]>0:
      dnumc[pop] = int((np.sqrt(dnumc[pop])+dnumc_padx[pop])**2)


JUST TO CONFIRM IT WORKS:


>>> blistIMTtoEMT
[[16, 0], [16, 1], [16, 2], [16, 3], 
[16, 7], [16, 8], [16, 9], [16, 10], 
[16, 14], [16, 15], [16, 16], [16, 17], 
[16, 21], [16, 22], [16, 23], [16, 24], 

[17, 0], [17, 1], [17, 2], [17, 3], [17, 4], 
[17, 7], [17, 8], [17, 9], [17, 10], [17, 11], 
[17, 14], [17, 15], [17, 16], [17, 17], [17, 18], 
[17, 21], [17, 22], [17, 23], [17, 24], [17, 25], 

[18, 1], [18, 2], [18, 3], [18, 4], [18, 5], 
[18, 8], [18, 9], [18, 10], [18, 11], [18, 12], 
[18, 15], [18, 16], [18, 17], [18, 18], [18, 19], 
[18, 22], [18, 23], [18, 24], [18, 25], [18, 26],

[23, 0], [23, 1], [23, 2], [23, 3], 
[23, 7], [23, 8], [23, 9], [23, 10], 
[23, 14], [23, 15], [23, 16], [23, 17], 
[23, 21], [23, 22], [23, 23], [23, 24], 
[23, 28], [23, 29], [23, 30], [23, 31], 

[24, 0], [24, 1], [24, 2], [24, 3], [24, 4], 
[24, 7], [24, 8], [24, 9], [24, 10], [24, 11], 
[24, 14], [24, 15], [24, 16], [24, 17], [24, 18], 
[24, 21], [24, 22], [24, 23], [24, 24], [24, 25], 
[24, 28], [24, 29], [24, 30], [24, 31], [24, 32], 

[25, 1], [25, 2], [25, 3], [25, 4], [25, 5], 
[25, 8], [25, 9], [25, 10], [25, 11], [25, 12], 
[25, 15], [25, 16], [25, 17], [25, 18], [25, 19], 
[25, 22], [25, 23], [25, 24], [25, 25], [25, 26], 
[25, 29], [25, 30], [25, 31], [25, 32], [25, 33], 

[30, 7], [30, 8], [30, 9], [30, 10], 
[30, 14], [30, 15], [30, 16], [30, 17], 
[30, 21], [30, 22], [30, 23], [30, 24], 
[30, 28], [30, 29], [30, 30], [30, 31], 
[30, 35], [30, 36], [30, 37], [30, 38], 

[31, 7], [31, 8], [31, 9], [31, 10], [31, 11], 
[31, 14], [31, 15], [31, 16], [31, 17], [31, 18], 
[31, 21], [31, 22], [31, 23], [31, 24], [31, 25], 
[31, 28], [31, 29], [31, 30], [31, 31], [31, 32], 
[31, 35], [31, 36], [31, 37], [31, 38], [31, 39], 

[32, 8], [32, 9], [32, 10], [32, 11], [32, 12], 
[32, 15], [32, 16], [32, 17], [32, 18], [32, 19], 
[32, 22], [32, 23], [32, 24], [32, 25], [32, 26], 
[32, 29], [32, 30], [32, 31], [32, 32], [32, 33], 
[32, 36], [32, 37], [32, 38], [32, 39], [32, 40]]

IMT:

0   1     2   3   4     5   6
7   8     9   10  11    12  13

14  15    16  17  18    19  20
21  22    23  24  25    26  27
28  29    30  31  32    33  34

35  36    37  38  39    40  41
42  43    44  45  46    47  48


EMT:

0     1   2   3   4   5     6

7     8   9   10  11  12    13
14    15  16  17  18  19    20
21    22  23  24  25  26    27
28    29  30  31  32  33    34
35    36  37  38  39  40    41

42    43  44  45  46  47    48

blistEMTtoIMT: "EMT":{"IMT":3} ---- converging
[[0, 16], [1, 16], [2, 16], 
[7, 16], [8, 16], [9, 16], 
[14, 16], [15, 16], [16, 16], 

[1, 17], [2, 17], [3, 17], 
[8, 17], [9, 17], [10, 17], 
[15, 17], [16, 17], [17, 17], 

[2, 18], [3, 18], [4, 18], 
[9, 18], [10, 18], [11, 18], 
[16, 18], [17, 18], [18, 18], 

[7, 23], [8, 23], [9, 23], 
[14, 23], [15, 23], [16, 23], 
[21, 23], [22, 23], [23, 23], 

[8, 24], [9, 24], [10, 24], 
[15, 24], [16, 24], [17, 24], 
[22, 24], [23, 24], [24, 24], 

[9, 25], [10, 25], [11, 25], 
[16, 25], [17, 25], [18, 25], 
[23, 25], [24, 25], [25, 25], 

[14, 30], [15, 30], [16, 30], 
[21, 30], [22, 30], [23, 30], 
[28, 30], [29, 30], [30, 30], 

[15, 31], [16, 31], [17, 31], 
[22, 31], [23, 31], [24, 31], 
[29, 31], [30, 31], [31, 31], 

[16, 32], [17, 32], [18, 32], 
[23, 32], [24, 32], [25, 32], 
[30, 32], [31, 32], [32, 32]]


EV4 EMDOWN --->Looks OK
[[0, 0], [1, 0], [2, 0], [12, 0], [13, 0], [14, 0], [24, 0], [25, 0], [26, 0], 
[1, 1], [2, 1], [3, 1], [13, 1], [14, 1], [15, 1], [25, 1], [26, 1], [27, 1], 
[2, 2], [3, 2], [4, 2], [14, 2], [15, 2], [16, 2], [26, 2], [27, 2], [28, 2], 
[3, 3], [4, 3], [5, 3], [15, 3], [16, 3], [17, 3], [27, 3], [28, 3], [29, 3], 
[4, 4], [5, 4], [6, 4], [16, 4], [17, 4], [18, 4], [28, 4], [29, 4], [30, 4], 
[5, 5], [6, 5], [7, 5], [17, 5], [18, 5], [19, 5], [29, 5], [30, 5], [31, 5], 
[6, 6], [7, 6], [8, 6], [18, 6], [19, 6], [20, 6], [30, 6], [31, 6], [32, 6], 
[7, 7], [8, 7], [9, 7], [19, 7], [20, 7], [21, 7], [31, 7], [32, 7], [33, 7], 
[8, 8], [9, 8], [10, 8], [20, 8], [21, 8], [22, 8], [32, 8], [33, 8], [34, 8], 
[9, 9], [10, 9], [11, 9], [21, 9], [22, 9], [23, 9], [33, 9], [34, 9], [35, 9], 
[12, 10], [13, 10], [14, 10], [24, 10], [25, 10], [26, 10], [36, 10], [37, 10], [38, 10], 
[13, 11], [14, 11], [15, 11], [25, 11], [26, 11], [27, 11], [37, 11], [38, 11], [39, 11], 
[14, 12], [15, 12], [16, 12], [26, 12], [27, 12], [28, 12], [38, 12], [39, 12], [40, 12], 
[15, 13], [16, 13], [17, 13], [27, 13], [28, 13], [29, 13], [39, 13], [40, 13], [41, 13], 
[16, 14], [17, 14], [18, 14], [28, 14], [29, 14], [30, 14], [40, 14], [41, 14], [42, 14], 
[17, 15], [18, 15], [19, 15], [29, 15], [30, 15], [31, 15], [41, 15], [42, 15], [43, 15], 
[18, 16], [19, 16], [20, 16], [30, 16], [31, 16], [32, 16], [42, 16], [43, 16], [44, 16], 
[19, 17], [20, 17], [21, 17], [31, 17], [32, 17], [33, 17], [43, 17], [44, 17], [45, 17], 
[20, 18], [21, 18], [22, 18], [32, 18], [33, 18], [34, 18], [44, 18], [45, 18], [46, 18], 
[21, 19], [22, 19], [23, 19], [33, 19], [34, 19], [35, 19], [45, 19], [46, 19], [47, 19], 
[24, 20], [25, 20], [26, 20], [36, 20], [37, 20], [38, 20], [48, 20], [49, 20], [50, 20], 
[25, 21], [26, 21], [27, 21], [37, 21], [38, 21], [39, 21], [49, 21], [50, 21], [51, 21], 
[26, 22], [27, 22], [28, 22], [38, 22], [39, 22], [40, 22], [50, 22], [51, 22], [52, 22], 
[27, 23], [28, 23], [29, 23], [39, 23], [40, 23], [41, 23], [51, 23], [52, 23], [53, 23], 
[28, 24], [29, 24], [30, 24], [40, 24], [41, 24], [42, 24], [52, 24], [53, 24], [54, 24], 
[29, 25], [30, 25], [31, 25], [41, 25], [42, 25], [43, 25], [53, 25], [54, 25], [55, 25], 
[30, 26], [31, 26], [32, 26], [42, 26], [43, 26], [44, 26], [54, 26], [55, 26], [56, 26], 
[31, 27], [32, 27], [33, 27], [43, 27], [44, 27], [45, 27], [55, 27], [56, 27], [57, 27], 
[32, 28], [33, 28], [34, 28], [44, 28], [45, 28], [46, 28], [56, 28], [57, 28], [58, 28], 
[33, 29], [34, 29], [35, 29], [45, 29], [46, 29], [47, 29], [57, 29], [58, 29], [59, 29], 
[36, 30], [37, 30], [38, 30], [48, 30], [49, 30], [50, 30], [60, 30], [61, 30], [62, 30], 
[37, 31], [38, 31], [39, 31], [49, 31], [50, 31], [51, 31], [61, 31], [62, 31], [63, 31], 
[38, 32], [39, 32], [40, 32], [50, 32], [51, 32], [52, 32], [62, 32], [63, 32], [64, 32], 
[39, 33], [40, 33], [41, 33], [51, 33], [52, 33], [53, 33], [63, 33], [64, 33], [65, 33], 
[40, 34], [41, 34], [42, 34], [52, 34], [53, 34], [54, 34], [64, 34], [65, 34], [66, 34], 
[41, 35], [42, 35], [43, 35], [53, 35], [54, 35], [55, 35], [65, 35], [66, 35], [67, 35], 
[42, 36], [43, 36], [44, 36], [54, 36], [55, 36], [56, 36], [66, 36], [67, 36], [68, 36], 
[43, 37], [44, 37], [45, 37], [55, 37], [56, 37], [57, 37], [67, 37], [68, 37], [69, 37], 
[44, 38], [45, 38], [46, 38], [56, 38], [57, 38], [58, 38], [68, 38], [69, 38], [70, 38], 
[45, 39], [46, 39], [47, 39], [57, 39], [58, 39], [59, 39], [69, 39], [70, 39], [71, 39], 
[48, 40], [49, 40], [50, 40], [60, 40], [61, 40], [62, 40], [72, 40], [73, 40], [74, 40], 
[49, 41], [50, 41], [51, 41], [61, 41], [62, 41], [63, 41], [73, 41], [74, 41], [75, 41], 
[50, 42], [51, 42], [52, 42], [62, 42], [63, 42], [64, 42], [74, 42], [75, 42], [76, 42], 
[51, 43], [52, 43], [53, 43], [63, 43], [64, 43], [65, 43], [75, 43], [76, 43], [77, 43], 
[52, 44], [53, 44], [54, 44], [64, 44], [65, 44], [66, 44], [76, 44], [77, 44], [78, 44], 
[53, 45], [54, 45], [55, 45], [65, 45], [66, 45], [67, 45], [77, 45], [78, 45], [79, 45], 
[54, 46], [55, 46], [56, 46], [66, 46], [67, 46], [68, 46], [78, 46], [79, 46], [80, 46], 
[55, 47], [56, 47], [57, 47], [67, 47], [68, 47], [69, 47], [79, 47], [80, 47], [81, 47], 
[56, 48], [57, 48], [58, 48], [68, 48], [69, 48], [70, 48], [80, 48], [81, 48], [82, 48], 
[57, 49], [58, 49], [59, 49], [69, 49], [70, 49], [71, 49], [81, 49], [82, 49], [83, 49], 
[60, 50], [61, 50], [62, 50], [72, 50], [73, 50], [74, 50], [84, 50], [85, 50], [86, 50], 
[61, 51], [62, 51], [63, 51], [73, 51], [74, 51], [75, 51], [85, 51], [86, 51], [87, 51], 
[62, 52], [63, 52], [64, 52], [74, 52], [75, 52], [76, 52], [86, 52], [87, 52], [88, 52], 
[63, 53], [64, 53], [65, 53], [75, 53], [76, 53], [77, 53], [87, 53], [88, 53], [89, 53], 
[64, 54], [65, 54], [66, 54], [76, 54], [77, 54], [78, 54], [88, 54], [89, 54], [90, 54], 
[65, 55], [66, 55], [67, 55], [77, 55], [78, 55], [79, 55], [89, 55], [90, 55], [91, 55], 
[66, 56], [67, 56], [68, 56], [78, 56], [79, 56], [80, 56], [90, 56], [91, 56], [92, 56], 
[67, 57], [68, 57], [69, 57], [79, 57], [80, 57], [81, 57], [91, 57], [92, 57], [93, 57], 
[68, 58], [69, 58], [70, 58], [80, 58], [81, 58], [82, 58], [92, 58], [93, 58], [94, 58], 
[69, 59], [70, 59], [71, 59], [81, 59], [82, 59], [83, 59], [93, 59], [94, 59], [95, 59], 
[72, 60], [73, 60], [74, 60], [84, 60], [85, 60], [86, 60], [96, 60], [97, 60], [98, 60], 
[73, 61], [74, 61], [75, 61], [85, 61], [86, 61], [87, 61], [97, 61], [98, 61], [99, 61], 
[74, 62], [75, 62], [76, 62], [86, 62], [87, 62], [88, 62], [98, 62], [99, 62], [100, 62], 
[75, 63], [76, 63], [77, 63], [87, 63], [88, 63], [89, 63], [99, 63], [100, 63], [101, 63], 
[76, 64], [77, 64], [78, 64], [88, 64], [89, 64], [90, 64], [100, 64], [101, 64], [102, 64], 
[77, 65], [78, 65], [79, 65], [89, 65], [90, 65], [91, 65], [101, 65], [102, 65], [103, 65], 
[78, 66], [79, 66], [80, 66], [90, 66], [91, 66], [92, 66], [102, 66], [103, 66], [104, 66], 
[79, 67], [80, 67], [81, 67], [91, 67], [92, 67], [93, 67], [103, 67], [104, 67], [105, 67], 
[80, 68], [81, 68], [82, 68], [92, 68], [93, 68], [94, 68], [104, 68], [105, 68], [106, 68], 
[81, 69], [82, 69], [83, 69], [93, 69], [94, 69], [95, 69], [105, 69], [106, 69], [107, 69], 
[84, 70], [85, 70], [86, 70], [96, 70], [97, 70], [98, 70], [108, 70], [109, 70], [110, 70], 
[85, 71], [86, 71], [87, 71], [97, 71], [98, 71], [99, 71], [109, 71], [110, 71], [111, 71], 
[86, 72], [87, 72], [88, 72], [98, 72], [99, 72], [100, 72], [110, 72], [111, 72], [112, 72], 
[87, 73], [88, 73], [89, 73], [99, 73], [100, 73], [101, 73], [111, 73], [112, 73], [113, 73], 
[88, 74], [89, 74], [90, 74], [100, 74], [101, 74], [102, 74], [112, 74], [113, 74], [114, 74], 
[89, 75], [90, 75], [91, 75], [101, 75], [102, 75], [103, 75], [113, 75], [114, 75], [115, 75], 
[90, 76], [91, 76], [92, 76], [102, 76], [103, 76], [104, 76], [114, 76], [115, 76], [116, 76], 
[91, 77], [92, 77], [93, 77], [103, 77], [104, 77], [105, 77], [115, 77], [116, 77], [117, 77], 
[92, 78], [93, 78], [94, 78], [104, 78], [105, 78], [106, 78], [116, 78], [117, 78], [118, 78], 
[93, 79], [94, 79], [95, 79], [105, 79], [106, 79], [107, 79], [117, 79], [118, 79], [119, 79], 
[96, 80], [97, 80], [98, 80], [108, 80], [109, 80], [110, 80], [120, 80], [121, 80], [122, 80], 
[97, 81], [98, 81], [99, 81], [109, 81], [110, 81], [111, 81], [121, 81], [122, 81], [123, 81], 
[98, 82], [99, 82], [100, 82], [110, 82], [111, 82], [112, 82], [122, 82], [123, 82], [124, 82], 
[99, 83], [100, 83], [101, 83], [111, 83], [112, 83], [113, 83], [123, 83], [124, 83], [125, 83], 
[100, 84], [101, 84], [102, 84], [112, 84], [113, 84], [114, 84], [124, 84], [125, 84], [126, 84], 
[101, 85], [102, 85], [103, 85], [113, 85], [114, 85], [115, 85], [125, 85], [126, 85], [127, 85], 
[102, 86], [103, 86], [104, 86], [114, 86], [115, 86], [116, 86], [126, 86], [127, 86], [128, 86], 
[103, 87], [104, 87], [105, 87], [115, 87], [116, 87], [117, 87], [127, 87], [128, 87], [129, 87], 
[104, 88], [105, 88], [106, 88], [116, 88], [117, 88], [118, 88], [128, 88], [129, 88], [130, 88], 
[105, 89], [106, 89], [107, 89], [117, 89], [118, 89], [119, 89], [129, 89], [130, 89], [131, 89], 
[108, 90], [109, 90], [110, 90], [120, 90], [121, 90], [122, 90], [132, 90], [133, 90], [134, 90], 
[109, 91], [110, 91], [111, 91], [121, 91], [122, 91], [123, 91], [133, 91], [134, 91], [135, 91], 
[110, 92], [111, 92], [112, 92], [122, 92], [123, 92], [124, 92], [134, 92], [135, 92], [136, 92], 
[111, 93], [112, 93], [113, 93], [123, 93], [124, 93], [125, 93], [135, 93], [136, 93], [137, 93], 
[112, 94], [113, 94], [114, 94], [124, 94], [125, 94], [126, 94], [136, 94], [137, 94], [138, 94], 
[113, 95], [114, 95], [115, 95], [125, 95], [126, 95], [127, 95], [137, 95], [138, 95], [139, 95], 
[114, 96], [115, 96], [116, 96], [126, 96], [127, 96], [128, 96], [138, 96], [139, 96], [140, 96], 
[115, 97], [116, 97], [117, 97], [127, 97], [128, 97], [129, 97], [139, 97], [140, 97], [141, 97], 
[116, 98], [117, 98], [118, 98], [128, 98], [129, 98], [130, 98], [140, 98], [141, 98], [142, 98], 
[117, 99], [118, 99], [119, 99], [129, 99], [130, 99], [131, 99], [141, 99], [142, 99], [143, 99]]

EMT EMDOWN 
[ [8, 0],   [8, 1],                                           [8, 10],  [8, 11], 
  [9, 0],   [9, 1],   [9, 2],                                 [9, 10],  [9, 11],    [9, 12], 
            [10, 1],  [10, 2],  [10, 3],                                [10, 11],   [10, 12], [10, 13], 
                      [11, 2],  [11, 3],  [11, 4],                                  [11, 12], [11, 13], [11, 14], 
                                [12, 3],  [12, 4],  [12, 5],                                  [12, 13], [12, 14], [12, 15], 
  [15, 0],  [15, 1],                                          [15, 10], [15, 11], [15, 20], [15, 21], 
  [16, 0],  [16, 1],  [16, 2],                                [16, 10], [16, 11], [16, 12], [16, 20], [16, 21], [16, 22], 
            [17, 1],  [17, 2],  [17, 3],                                [17, 11], [17, 12], [17, 13], [17, 21], [17, 22], [17, 23], 
                      [18, 2],  [18, 3],  [18, 4],                                [18, 12], [18, 13], [18, 14], [18, 22], [18, 23], [18, 24], 
                                [19, 3],  [19, 4],  [19, 5],                                [19, 13], [19, 14], [19, 15], [19, 23], [19, 24], [19, 25], 
                                                              [22, 10], [22, 11],                                         [22, 20], [22, 21], [22, 30], [22, 31], 
                                                              [23, 10], [23, 11], [23, 12],                               [23, 20], [23, 21], [23, 22], [23, 30], [23, 31], [23, 32],
                                                                        [24, 11], [24, 12], [24, 13], [24, 21], [24, 22], [24, 23], [24, 31], [24, 32], [24, 33], 
                                                                        [25, 12], [25, 13], [25, 14], [25, 22], [25, 23], [25, 24], [25, 32], [25, 33], [25, 34], 
                                                                        [26, 13], [26, 14], [26, 15], [26, 23], [26, 24], [26, 25], [26, 33], [26, 34], [26, 35], 
                                                                        
                                                                        [29, 20], [29, 21], [29, 30], [29, 31], [29, 40], [29, 41], 
                                                                        [30, 20], [30, 21], [30, 22], [30, 30], [30, 31], [30, 32], [30, 40], [30, 41], [30, 42], 
                                                                        [31, 21], [31, 22], [31, 23], [31, 31], [31, 32], [31, 33], [31, 41], [31, 42], [31, 43], 
                                                                        [32, 22], [32, 23], [32, 24], [32, 32], [32, 33], [32, 34], [32, 42], [32, 43], [32, 44], 
                                                                        [33, 23], [33, 24], [33, 25], [33, 33], [33, 34], [33, 35], [33, 43], [33, 44], [33, 45], 
                                                                        [36, 30], [36, 31], [36, 40], [36, 41], [36, 50], [36, 51], 
                                                                        [37, 30], [37, 31], [37, 32], [37, 40], [37, 41], [37, 42], [37, 50], [37, 51], [37, 52], 
                                                                        [38, 31], [38, 32], [38, 33], [38, 41], [38, 42], [38, 43], [38, 51], [38, 52], [38, 53], 
                                                                        [39, 32], [39, 33], [39, 34], [39, 42], [39, 43], [39, 44], [39, 52], [39, 53], [39, 54], 
                                                                        [40, 33], [40, 34], [40, 35], [40, 43], [40, 44], [40, 45], [40, 53], [40, 54], [40, 55]]

dnumc['EMT'] = 49
dnumc['EMDOWN'] = 100
overlap_xdir = 3
padded_preneurons_xdir = 2
padded_postneurons_xdir = 0
blist = connectLayerswithOverlapDiv(NBpreN=49,NBpostN=100,overlap_xdir=3,padded_preneurons_xdir = 2, padded_postneurons_xdir = 0)



>>> blist = connectLayerswithOverlapDiv(NBpreN=25,NBpostN=100,overlap_xdir=3,padded_preneurons_xdir = 0, padded_postneurons_xdir = 0)
>>> blist
[[0, 0], [0, 1], [0, 10], [0, 11], 
[1, 1], [1, 2], [1, 3], [1, 11], [1, 12], [1, 13], 
[2, 3], [2, 4], [2, 5], [2, 13], [2, 14], [2, 15], 
[3, 5], [3, 6], [3, 7], [3, 15], [3, 16], [3, 17], 
[4, 7], [4, 8], [4, 9], [4, 17], [4, 18], [4, 19], 
[5, 10], [5, 11], [5, 20], [5, 21], [5, 30], [5, 31], 
[6, 11], [6, 12], [6, 13], [6, 21], [6, 22], [6, 23], [6, 31], [6, 32], [6, 33], 
[7, 13], [7, 14], [7, 15], [7, 23], [7, 24], [7, 25], [7, 33], [7, 34], [7, 35], 
[8, 15], [8, 16], [8, 17], [8, 25], [8, 26], [8, 27], [8, 35], [8, 36], [8, 37], 
[9, 17], [9, 18], [9, 19], [9, 27], [9, 28], [9, 29], [9, 37], [9, 38], [9, 39], 
[10, 30], [10, 31], [10, 40], [10, 41], [10, 50], [10, 51], 
[11, 31], [11, 32], [11, 33], [11, 41], [11, 42], [11, 43], [11, 51], [11, 52], [11, 53], 
[12, 33], [12, 34], [12, 35], [12, 43], [12, 44], [12, 45], [12, 53], [12, 54], [12, 55], 
[13, 35], [13, 36], [13, 37], [13, 45], [13, 46], [13, 47], [13, 55], [13, 56], [13, 57], 
[14, 37], [14, 38], [14, 39], [14, 47], [14, 48], [14, 49], [14, 57], [14, 58], [14, 59], 
[15, 50], [15, 51], [15, 60], [15, 61], [15, 70], [15, 71], 
[16, 51], [16, 52], [16, 53], [16, 61], [16, 62], [16, 63], [16, 71], [16, 72], [16, 73], 
[17, 53], [17, 54], [17, 55], [17, 63], [17, 64], [17, 65], [17, 73], [17, 74], [17, 75], 
[18, 55], [18, 56], [18, 57], [18, 65], [18, 66], [18, 67], [18, 75], [18, 76], [18, 77], 
[19, 57], [19, 58], [19, 59], [19, 67], [19, 68], [19, 69], [19, 77], [19, 78], [19, 79], 
[20, 70], [20, 71], [20, 80], [20, 81], [20, 90], [20, 91], 
[21, 71], [21, 72], [21, 73], [21, 81], [21, 82], [21, 83], [21, 91], [21, 92], [21, 93], 
[22, 73], [22, 74], [22, 75], [22, 83], [22, 84], [22, 85], [22, 93], [22, 94], [22, 95], 
[23, 75], [23, 76], [23, 77], [23, 85], [23, 86], [23, 87], [23, 95], [23, 96], [23, 97], 
[24, 77], [24, 78], [24, 79], [24, 87], [24, 88], [24, 89], [24, 97], [24, 98], [24, 99]]




>>> blist = connectLayerswithOverlapDiv(NBpreN=25,NBpostN=144,overlap_xdir=3,padded_preneurons_xdir = 0, padded_postneurons_xdir = 2)
>>> blist
[[0, 0], [0, 1], [0, 2], [0, 12], [0, 13], [0, 14], [0, 24], [0, 25], [0, 26], 
[1, 2], [1, 3], [1, 4], [1, 14], [1, 15], [1, 16], [1, 26], [1, 27], [1, 28], 
[2, 4], [2, 5], [2, 6], [2, 16], [2, 17], [2, 18], [2, 28], [2, 29], [2, 30], 
[3, 6], [3, 7], [3, 8], [3, 18], [3, 19], [3, 20], [3, 30], [3, 31], [3, 32], 
[4, 8], [4, 9], [4, 10], [4, 20], [4, 21], [4, 22], [4, 32], [4, 33], [4, 34], 
[5, 24], [5, 25], [5, 26], [5, 36], [5, 37], [5, 38], [5, 48], [5, 49], [5, 50], 
[6, 26], [6, 27], [6, 28], [6, 38], [6, 39], [6, 40], [6, 50], [6, 51], [6, 52], 
[7, 28], [7, 29], [7, 30], [7, 40], [7, 41], [7, 42], [7, 52], [7, 53], [7, 54], 
[8, 30], [8, 31], [8, 32], [8, 42], [8, 43], [8, 44], [8, 54], [8, 55], [8, 56], 
[9, 32], [9, 33], [9, 34], [9, 44], [9, 45], [9, 46], [9, 56], [9, 57], [9, 58], 
[10, 48], [10, 49], [10, 50], [10, 60], [10, 61], [10, 62], [10, 72], [10, 73], [10, 74], 
[11, 50], [11, 51], [11, 52], [11, 62], [11, 63], [11, 64], [11, 74], [11, 75], [11, 76], 
[12, 52], [12, 53], [12, 54], [12, 64], [12, 65], [12, 66], [12, 76], [12, 77], [12, 78], 
[13, 54], [13, 55], [13, 56], [13, 66], [13, 67], [13, 68], [13, 78], [13, 79], [13, 80], 
[14, 56], [14, 57], [14, 58], [14, 68], [14, 69], [14, 70], [14, 80], [14, 81], [14, 82], 
[15, 72], [15, 73], [15, 74], [15, 84], [15, 85], [15, 86], [15, 96], [15, 97], [15, 98], 
[16, 74], [16, 75], [16, 76], [16, 86], [16, 87], [16, 88], [16, 98], [16, 99], [16, 100], 
[17, 76], [17, 77], [17, 78], [17, 88], [17, 89], [17, 90], [17, 100], [17, 101], [17, 102], 
[18, 78], [18, 79], [18, 80], [18, 90], [18, 91], [18, 92], [18, 102], [18, 103], [18, 104], 
[19, 80], [19, 81], [19, 82], [19, 92], [19, 93], [19, 94], [19, 104], [19, 105], [19, 106], 
[20, 96], [20, 97], [20, 98], [20, 108], [20, 109], [20, 110], [20, 120], [20, 121], [20, 122], 
[21, 98], [21, 99], [21, 100], [21, 110], [21, 111], [21, 112], [21, 122], [21, 123], [21, 124], 
[22, 100], [22, 101], [22, 102], [22, 112], [22, 113], [22, 114], [22, 124], [22, 125], [22, 126], 
[23, 102], [23, 103], [23, 104], [23, 114], [23, 115], [23, 116], [23, 126], [23, 127], [23, 128], 
[24, 104], [24, 105], [24, 106], [24, 116], [24, 117], [24, 118], [24, 128], [24, 129], [24, 130]]



-- added padding in "EMUP" and "EMDOWN"

>>> dnumc
OrderedDict([('ER', 0), ('IR', 0), ('EV1', 484), ('EV1DE', 484), ('EV1DNE', 484), ('EV1DN', 484), ('EV1DNW', 484), ('EV1DW', 484), ('EV1DSW', 484), ('EV1DS', 484), ('EV1DSE', 484), ('IV1', 196), ('EV4', 144), ('IV4', 81), ('EMT', 49), ('IMT', 49), ('EMDOWN', 144), ('EMUP', 144), ('EMSTAY', 0), ('IM', 50)])
>>> dnumc_padx
OrderedDict([('ER', 0), ('IR', 0), ('EV1', 2), ('EV1DE', 2), ('EV1DNE', 2), ('EV1DN', 2), ('EV1DNW', 2), ('EV1DW', 2), ('EV1DSW', 2), ('EV1DS', 2), ('EV1DSE', 2), ('IV1', 4), ('EV4', 2), ('IV4', 4), ('EMT', 2), ('IMT', 4), ('EMDOWN', 2), ('EMUP', 2), ('EMSTAY', 0), ('IM', 0)])



EV1DSE EMUP 
[[0, 13], [1, 13], [2, 13], [22, 13], [23, 13], [24, 13], [44, 13], [45, 13], [46, 13], 
[1, 14], [2, 14], [3, 14], [23, 14], [24, 14], [25, 14], [45, 14], [46, 14], [47, 14], 
[2, 15], [3, 15], [4, 15], [24, 15], [25, 15], [26, 15], [46, 15], [47, 15], [48, 15], 
[3, 16], [4, 16], [5, 16], [25, 16], [26, 16], [27, 16], [47, 16], [48, 16], [49, 16], 
[4, 17], [5, 17], [6, 17], [26, 17], [27, 17], [28, 17], [48, 17], [49, 17], [50, 17], 
[5, 18], [6, 18], [7, 18], [27, 18], [28, 18], [29, 18], [49, 18], [50, 18], [51, 18], 
[6, 19], [7, 19], [8, 19], [28, 19], [29, 19], [30, 19], [50, 19], [51, 19], [52, 19], 
[7, 20], [8, 20], [9, 20], [29, 20], [30, 20], [31, 20], [51, 20], [52, 20], [53, 20], 
[8, 21], [9, 21], [10, 21], [30, 21], [31, 21], [32, 21], [52, 21], [53, 21], [54, 21], 
[9, 22], [10, 22], [11, 22], [31, 22], [32, 22], [33, 22], [53, 22], [54, 22], [55, 22], 
[22, 25], [23, 25], [24, 25], [44, 25], [45, 25], [46, 25], [66, 25], [67, 25], [68, 25], 
[23, 26], [24, 26], [25, 26], [45, 26], [46, 26], [47, 26], [67, 26], [68, 26], [69, 26], 
[24, 27], [25, 27], [26, 27], [46, 27], [47, 27], [48, 27], [68, 27], [69, 27], [70, 27], 
[25, 28], [26, 28], [27, 28], [47, 28], [48, 28], [49, 28], [69, 28], [70, 28], [71, 28], 
[26, 29], [27, 29], [28, 29], [48, 29], [49, 29], [50, 29], [70, 29], [71, 29], [72, 29], 
[27, 30], [28, 30], [29, 30], [49, 30], [50, 30], [51, 30], [71, 30], [72, 30], [73, 30], 
[28, 31], [29, 31], [30, 31], [50, 31], [51, 31], [52, 31], [72, 31], [73, 31], [74, 31], 
[29, 32], [30, 32], [31, 32], [51, 32], [52, 32], [53, 32], [73, 32], [74, 32], [75, 32], 
[30, 33], [31, 33], [32, 33], [52, 33], [53, 33], [54, 33], [74, 33], [75, 33], [76, 33], 
[31, 34], [32, 34], [33, 34], [53, 34], [54, 34], [55, 34], [75, 34], [76, 34], [77, 34], 
[44, 37], [45, 37], [46, 37], [66, 37], [67, 37], [68, 37], [88, 37], [89, 37], [90, 37], 
[45, 38], [46, 38], [47, 38], [67, 38], [68, 38], [69, 38], [89, 38], [90, 38], [91, 38], 
[46, 39], [47, 39], [48, 39], [68, 39], [69, 39], [70, 39], [90, 39], [91, 39], [92, 39], 
[47, 40], [48, 40], [49, 40], [69, 40], [70, 40], [71, 40], [91, 40], [92, 40], [93, 40], 
[48, 41], [49, 41], [50, 41], [70, 41], [71, 41], [72, 41], [92, 41], [93, 41], [94, 41], 
[49, 42], [50, 42], [51, 42], [71, 42], [72, 42], [73, 42], [93, 42], [94, 42], [95, 42], 
[50, 43], [51, 43], [52, 43], [72, 43], [73, 43], [74, 43], [94, 43], [95, 43], [96, 43], 
[51, 44], [52, 44], [53, 44], [73, 44], [74, 44], [75, 44], [95, 44], [96, 44], [97, 44], 
[52, 45], [53, 45], [54, 45], [74, 45], [75, 45], [76, 45], [96, 45], [97, 45], [98, 45], 
[53, 46], [54, 46], [55, 46], [75, 46], [76, 46], [77, 46], [97, 46], [98, 46], [99, 46], 
[66, 49], [67, 49], [68, 49], [88, 49], [89, 49], [90, 49], [110, 49], [111, 49], [112, 49], 
[67, 50], [68, 50], [69, 50], [89, 50], [90, 50], [91, 50], [111, 50], [112, 50], [113, 50], 
[68, 51], [69, 51], [70, 51], [90, 51], [91, 51], [92, 51], [112, 51], [113, 51], [114, 51], 
[69, 52], [70, 52], [71, 52], [91, 52], [92, 52], [93, 52], [113, 52], [114, 52], [115, 52], 
[70, 53], [71, 53], [72, 53], [92, 53], [93, 53], [94, 53], [114, 53], [115, 53], [116, 53], 
[71, 54], [72, 54], [73, 54], [93, 54], [94, 54], [95, 54], [115, 54], [116, 54], [117, 54], 
[72, 55], [73, 55], [74, 55], [94, 55], [95, 55], [96, 55], [116, 55], [117, 55], [118, 55], 
[73, 56], [74, 56], [75, 56], [95, 56], [96, 56], [97, 56], [117, 56], [118, 56], [119, 56], 
[74, 57], [75, 57], [76, 57], [96, 57], [97, 57], [98, 57], [118, 57], [119, 57], [120, 57], 
[75, 58], [76, 58], [77, 58], [97, 58], [98, 58], [99, 58], [119, 58], [120, 58], [121, 58], 
[88, 61], [89, 61], [90, 61], [110, 61], [111, 61], [112, 61], [132, 61], [133, 61], [134, 61], 
[89, 62], [90, 62], [91, 62], [111, 62], [112, 62], [113, 62], [133, 62], [134, 62], [135, 62], 
[90, 63], [91, 63], [92, 63], [112, 63], [113, 63], [114, 63], [134, 63], [135, 63], [136, 63], 
[91, 64], [92, 64], [93, 64], [113, 64], [114, 64], [115, 64], [135, 64], [136, 64], [137, 64], 
[92, 65], [93, 65], [94, 65], [114, 65], [115, 65], [116, 65], [136, 65], [137, 65], [138, 65], 
[93, 66], [94, 66], [95, 66], [115, 66], [116, 66], [117, 66], [137, 66], [138, 66], [139, 66], 
[94, 67], [95, 67], [96, 67], [116, 67], [117, 67], [118, 67], [138, 67], [139, 67], [140, 67], 
[95, 68], [96, 68], [97, 68], [117, 68], [118, 68], [119, 68], [139, 68], [140, 68], [141, 68], 
[96, 69], [97, 69], [98, 69], [118, 69], [119, 69], [120, 69], [140, 69], [141, 69], [142, 69], 
[97, 70], [98, 70], [99, 70], [119, 70], [120, 70], [121, 70], [141, 70], [142, 70], [143, 70], 
[110, 73], [111, 73], [112, 73], [132, 73], [133, 73], [134, 73], [154, 73], [155, 73], [156, 73], 
[111, 74], [112, 74], [113, 74], [133, 74], [134, 74], [135, 74], [155, 74], [156, 74], [157, 74], 
[112, 75], [113, 75], [114, 75], [134, 75], [135, 75], [136, 75], [156, 75], [157, 75], [158, 75], 
[113, 76], [114, 76], [115, 76], [135, 76], [136, 76], [137, 76], [157, 76], [158, 76], [159, 76], 
[114, 77], [115, 77], [116, 77], [136, 77], [137, 77], [138, 77], [158, 77], [159, 77], [160, 77], 
[115, 78], [116, 78], [117, 78], [137, 78], [138, 78], [139, 78], [159, 78], [160, 78], [161, 78], 
[116, 79], [117, 79], [118, 79], [138, 79], [139, 79], [140, 79], [160, 79], [161, 79], [162, 79], 
[117, 80], [118, 80], [119, 80], [139, 80], [140, 80], [141, 80], [161, 80], [162, 80], [163, 80], 
[118, 81], [119, 81], [120, 81], [140, 81], [141, 81], [142, 81], [162, 81], [163, 81], [164, 81], 
[119, 82], [120, 82], [121, 82], [141, 82], [142, 82], [143, 82], [163, 82], [164, 82], [165, 82],
[132, 85], [133, 85], [134, 85], [154, 85], [155, 85], [156, 85], [176, 85], [177, 85], [178, 85], 
[133, 86], [134, 86], [135, 86], [155, 86], [156, 86], [157, 86], [177, 86], [178, 86], [179, 86], 
[134, 87], [135, 87], [136, 87], [156, 87], [157, 87], [158, 87], [178, 87], [179, 87], [180, 87], 
[135, 88], [136, 88], [137, 88], [157, 88], [158, 88], [159, 88], [179, 88], [180, 88], [181, 88], 
[136, 89], [137, 89], [138, 89], [158, 89], [159, 89], [160, 89], [180, 89], [181, 89], [182, 89], 
[137, 90], [138, 90], [139, 90], [159, 90], [160, 90], [161, 90], [181, 90], [182, 90], [183, 90], 
[138, 91], [139, 91], [140, 91], [160, 91], [161, 91], [162, 91], [182, 91], [183, 91], [184, 91], 
[139, 92], [140, 92], [141, 92], [161, 92], [162, 92], [163, 92], [183, 92], [184, 92], [185, 92], 
[140, 93], [141, 93], [142, 93], [162, 93], [163, 93], [164, 93], [184, 93], [185, 93], [186, 93], 
[141, 94], [142, 94], [143, 94], [163, 94], [164, 94], [165, 94], [185, 94], [186, 94], [187, 94], 
[154, 97], [155, 97], [156, 97], [176, 97], [177, 97], [178, 97], [198, 97], [199, 97], [200, 97], 
[155, 98], [156, 98], [157, 98], [177, 98], [178, 98], [179, 98], [199, 98], [200, 98], [201, 98], 
[156, 99], [157, 99], [158, 99], [178, 99], [179, 99], [180, 99], [200, 99], [201, 99], [202, 99], 
[157, 100], [158, 100], [159, 100], [179, 100], [180, 100], [181, 100], [201, 100], [202, 100], [203, 100], 
[158, 101], [159, 101], [160, 101], [180, 101], [181, 101], [182, 101], [202, 101], [203, 101], [204, 101], 
[159, 102], [160, 102], [161, 102], [181, 102], [182, 102], [183, 102], [203, 102], [204, 102], [205, 102], 
[160, 103], [161, 103], [162, 103], [182, 103], [183, 103], [184, 103], [204, 103], [205, 103], [206, 103], 
[161, 104], [162, 104], [163, 104], [183, 104], [184, 104], [185, 104], [205, 104], [206, 104], [207, 104], 
[162, 105], [163, 105], [164, 105], [184, 105], [185, 105], [186, 105], [206, 105], [207, 105], [208, 105], 
[163, 106], [164, 106], [165, 106], [185, 106], [186, 106], [187, 106], [207, 106], [208, 106], [209, 106], 
[176, 109], [177, 109], [178, 109], [198, 109], [199, 109], [200, 109], [220, 109], [221, 109], [222, 109], 
[177, 110], [178, 110], [179, 110], [199, 110], [200, 110], [201, 110], [221, 110], [222, 110], [223, 110], 
[178, 111], [179, 111], [180, 111], [200, 111], [201, 111], [202, 111], [222, 111], [223, 111], [224, 111], 
[179, 112], [180, 112], [181, 112], [201, 112], [202, 112], [203, 112], [223, 112], [224, 112], [225, 112], 
[180, 113], [181, 113], [182, 113], [202, 113], [203, 113], [204, 113], [224, 113], [225, 113], [226, 113], 
[181, 114], [182, 114], [183, 114], [203, 114], [204, 114], [205, 114], [225, 114], [226, 114], [227, 114], 
[182, 115], [183, 115], [184, 115], [204, 115], [205, 115], [206, 115], [226, 115], [227, 115], [228, 115], 
[183, 116], [184, 116], [185, 116], [205, 116], [206, 116], [207, 116], [227, 116], [228, 116], [229, 116], 
[184, 117], [185, 117], [186, 117], [206, 117], [207, 117], [208, 117], [228, 117], [229, 117], [230, 117], 
[185, 118], [186, 118], [187, 118], [207, 118], [208, 118], [209, 118], [229, 118], [230, 118], [231, 118], 
[198, 121], [199, 121], [200, 121], [220, 121], [221, 121], [222, 121], [242, 121], [243, 121], [244, 121], 
[199, 122], [200, 122], [201, 122], [221, 122], [222, 122], [223, 122], [243, 122], [244, 122], [245, 122], 
[200, 123], [201, 123], [202, 123], [222, 123], [223, 123], [224, 123], [244, 123], [245, 123], [246, 123], 
[201, 124], [202, 124], [203, 124], [223, 124], [224, 124], [225, 124], [245, 124], [246, 124], [247, 124], 
[202, 125], [203, 125], [204, 125], [224, 125], [225, 125], [226, 125], [246, 125], [247, 125], [248, 125], 
[203, 126], [204, 126], [205, 126], [225, 126], [226, 126], [227, 126], [247, 126], [248, 126], [249, 126], 
[204, 127], [205, 127], [206, 127], [226, 127], [227, 127], [228, 127], [248, 127], [249, 127], [250, 127], 
[205, 128], [206, 128], [207, 128], [227, 128], [228, 128], [229, 128], [249, 128], [250, 128], [251, 128], 
[206, 129], [207, 129], [208, 129], [228, 129], [229, 129], [230, 129], [250, 129], [251, 129], [252, 129], 
[207, 130], [208, 130], [209, 130], [229, 130], [230, 130], [231, 130], [251, 130], [252, 130], [253, 130]]

EV4 EMDOWN 
[[0, 13], [1, 13], [2, 13], [12, 13], [13, 13], [14, 13], [24, 13], [25, 13], [26, 13], 
[1, 14], [2, 14], [3, 14], [13, 14], [14, 14], [15, 14], [25, 14], [26, 14], [27, 14], 
[2, 15], [3, 15], [4, 15], [14, 15], [15, 15], [16, 15], [26, 15], [27, 15], [28, 15], 
[3, 16], [4, 16], [5, 16], [15, 16], [16, 16], [17, 16], [27, 16], [28, 16], [29, 16], 
[4, 17], [5, 17], [6, 17], [16, 17], [17, 17], [18, 17], [28, 17], [29, 17], [30, 17], 
[5, 18], [6, 18], [7, 18], [17, 18], [18, 18], [19, 18], [29, 18], [30, 18], [31, 18], 
[6, 19], [7, 19], [8, 19], [18, 19], [19, 19], [20, 19], [30, 19], [31, 19], [32, 19], 
[7, 20], [8, 20], [9, 20], [19, 20], [20, 20], [21, 20], [31, 20], [32, 20], [33, 20], 
[8, 21], [9, 21], [10, 21], [20, 21], [21, 21], [22, 21], [32, 21], [33, 21], [34, 21], 
[9, 22], [10, 22], [11, 22], [21, 22], [22, 22], [23, 22], [33, 22], [34, 22], [35, 22], 
[12, 25], [13, 25], [14, 25], [24, 25], [25, 25], [26, 25], [36, 25], [37, 25], [38, 25], 
[13, 26], [14, 26], [15, 26], [25, 26], [26, 26], [27, 26], [37, 26], [38, 26], [39, 26], 
[14, 27], [15, 27], [16, 27], [26, 27], [27, 27], [28, 27], [38, 27], [39, 27], [40, 27], 
[15, 28], [16, 28], [17, 28], [27, 28], [28, 28], [29, 28], [39, 28], [40, 28], [41, 28], 
[16, 29], [17, 29], [18, 29], [28, 29], [29, 29], [30, 29], [40, 29], [41, 29], [42, 29], 
[17, 30], [18, 30], [19, 30], [29, 30], [30, 30], [31, 30], [41, 30], [42, 30], [43, 30], 
[18, 31], [19, 31], [20, 31], [30, 31], [31, 31], [32, 31], [42, 31], [43, 31], [44, 31], 
[19, 32], [20, 32], [21, 32], [31, 32], [32, 32], [33, 32], [43, 32], [44, 32], [45, 32], 
[20, 33], [21, 33], [22, 33], [32, 33], [33, 33], [34, 33], [44, 33], [45, 33], [46, 33], 
[21, 34], [22, 34], [23, 34], [33, 34], [34, 34], [35, 34], [45, 34], [46, 34], [47, 34], 
[24, 37], [25, 37], [26, 37], [36, 37], [37, 37], [38, 37], [48, 37], [49, 37], [50, 37], 
[25, 38], [26, 38], [27, 38], [37, 38], [38, 38], [39, 38], [49, 38], [50, 38], [51, 38], 
[26, 39], [27, 39], [28, 39], [38, 39], [39, 39], [40, 39], [50, 39], [51, 39], [52, 39], [27, 40], [28, 40], [29, 40], [39, 40], [40, 40], [41, 40], [51, 40], [52, 40], [53, 40], [28, 41], [29, 41], [30, 41], [40, 41], [41, 41], [42, 41], [52, 41], [53, 41], [54, 41], [29, 42], [30, 42], [31, 42], [41, 42], [42, 42], [43, 42], [53, 42], [54, 42], [55, 42], [30, 43], [31, 43], [32, 43], [42, 43], [43, 43], [44, 43], [54, 43], [55, 43], [56, 43], [31, 44], [32, 44], [33, 44], [43, 44], [44, 44], [45, 44], [55, 44], [56, 44], [57, 44], [32, 45], [33, 45], [34, 45], [44, 45], [45, 45], [46, 45], [56, 45], [57, 45], [58, 45], [33, 46], [34, 46], [35, 46], [45, 46], [46, 46], [47, 46], [57, 46], [58, 46], [59, 46], [36, 49], [37, 49], [38, 49], [48, 49], [49, 49], [50, 49], [60, 49], [61, 49], [62, 49], [37, 50], [38, 50], [39, 50], [49, 50], [50, 50], [51, 50], [61, 50], [62, 50], [63, 50], [38, 51], [39, 51], [40, 51], [50, 51], [51, 51], [52, 51], [62, 51], [63, 51], [64, 51], [39, 52], [40, 52], [41, 52], [51, 52], [52, 52], [53, 52], [63, 52], [64, 52], [65, 52], [40, 53], [41, 53], [42, 53], [52, 53], [53, 53], [54, 53], [64, 53], [65, 53], [66, 53], [41, 54], [42, 54], [43, 54], [53, 54], [54, 54], [55, 54], [65, 54], [66, 54], [67, 54], [42, 55], [43, 55], [44, 55], [54, 55], [55, 55], [56, 55], [66, 55], [67, 55], [68, 55], [43, 56], [44, 56], [45, 56], [55, 56], [56, 56], [57, 56], [67, 56], [68, 56], [69, 56], [44, 57], [45, 57], [46, 57], [56, 57], [57, 57], [58, 57], [68, 57], [69, 57], [70, 57], [45, 58], [46, 58], [47, 58], [57, 58], [58, 58], [59, 58], [69, 58], [70, 58], [71, 58], [48, 61], [49, 61], [50, 61], [60, 61], [61, 61], [62, 61], [72, 61], [73, 61], [74, 61], [49, 62], [50, 62], [51, 62], [61, 62], [62, 62], [63, 62], [73, 62], [74, 62], [75, 62], [50, 63], [51, 63], [52, 63], [62, 63], [63, 63], [64, 63], [74, 63], [75, 63], [76, 63], [51, 64], [52, 64], [53, 64], [63, 64], [64, 64], [65, 64], [75, 64], [76, 64], [77, 64], [52, 65], [53, 65], [54, 65], [64, 65], [65, 65], [66, 65], [76, 65], [77, 65], [78, 65], [53, 66], [54, 66], [55, 66], [65, 66], [66, 66], [67, 66], [77, 66], [78, 66], [79, 66], [54, 67], [55, 67], [56, 67], [66, 67], [67, 67], [68, 67], [78, 67], [79, 67], [80, 67], [55, 68], [56, 68], [57, 68], [67, 68], [68, 68], [69, 68], [79, 68], [80, 68], [81, 68], [56, 69], [57, 69], [58, 69], [68, 69], [69, 69], [70, 69], [80, 69], [81, 69], [82, 69], [57, 70], [58, 70], [59, 70], [69, 70], [70, 70], [71, 70], [81, 70], [82, 70], [83, 70], [60, 73], [61, 73], [62, 73], [72, 73], [73, 73], [74, 73], [84, 73], [85, 73], [86, 73], [61, 74], [62, 74], [63, 74], [73, 74], [74, 74], [75, 74], [85, 74], [86, 74], [87, 74], [62, 75], [63, 75], [64, 75], [74, 75], [75, 75], [76, 75], [86, 75], [87, 75], [88, 75], [63, 76], [64, 76], [65, 76], [75, 76], [76, 76], [77, 76], [87, 76], [88, 76], [89, 76], [64, 77], [65, 77], [66, 77], [76, 77], [77, 77], [78, 77], [88, 77], [89, 77], [90, 77], [65, 78], [66, 78], [67, 78], [77, 78], [78, 78], [79, 78], [89, 78], [90, 78], [91, 78], [66, 79], [67, 79], [68, 79], [78, 79], [79, 79], [80, 79], [90, 79], [91, 79], [92, 79], [67, 80], [68, 80], [69, 80], [79, 80], [80, 80], [81, 80], [91, 80], [92, 80], [93, 80], [68, 81], [69, 81], [70, 81], [80, 81], [81, 81], [82, 81], [92, 81], [93, 81], [94, 81], [69, 82], [70, 82], [71, 82], [81, 82], [82, 82], [83, 82], [93, 82], [94, 82], [95, 82], [72, 85], [73, 85], [74, 85], [84, 85], [85, 85], [86, 85], [96, 85], [97, 85], [98, 85], [73, 86], [74, 86], [75, 86], [85, 86], [86, 86], [87, 86], [97, 86], [98, 86], [99, 86], [74, 87], [75, 87], [76, 87], [86, 87], [87, 87], [88, 87], [98, 87], [99, 87], [100, 87], [75, 88], [76, 88], [77, 88], [87, 88], [88, 88], [89, 88], [99, 88], [100, 88], [101, 88], [76, 89], [77, 89], [78, 89], [88, 89], [89, 89], [90, 89], [100, 89], [101, 89], [102, 89], [77, 90], [78, 90], [79, 90], [89, 90], [90, 90], [91, 90], [101, 90], [102, 90], [103, 90], [78, 91], [79, 91], [80, 91], [90, 91], [91, 91], [92, 91], [102, 91], [103, 91], [104, 91], [79, 92], [80, 92], [81, 92], [91, 92], [92, 92], [93, 92], [103, 92], [104, 92], [105, 92], [80, 93], [81, 93], [82, 93], [92, 93], [93, 93], [94, 93], [104, 93], [105, 93], [106, 93], [81, 94], [82, 94], [83, 94], [93, 94], [94, 94], [95, 94], [105, 94], [106, 94], [107, 94], [84, 97], [85, 97], [86, 97], [96, 97], [97, 97], [98, 97], [108, 97], [109, 97], [110, 97], [85, 98], [86, 98], [87, 98], [97, 98], [98, 98], [99, 98], [109, 98], [110, 98], [111, 98], [86, 99], [87, 99], [88, 99], [98, 99], [99, 99], [100, 99], [110, 99], [111, 99], [112, 99], [87, 100], [88, 100], [89, 100], [99, 100], [100, 100], [101, 100], [111, 100], [112, 100], [113, 100], [88, 101], [89, 101], [90, 101], [100, 101], [101, 101], [102, 101], [112, 101], [113, 101], [114, 101], [89, 102], [90, 102], [91, 102], [101, 102], [102, 102], [103, 102], [113, 102], [114, 102], [115, 102], [90, 103], [91, 103], [92, 103], [102, 103], [103, 103], [104, 103], [114, 103], [115, 103], [116, 103], [91, 104], [92, 104], [93, 104], [103, 104], [104, 104], [105, 104], [115, 104], [116, 104], [117, 104], [92, 105], [93, 105], [94, 105], [104, 105], [105, 105], [106, 105], [116, 105], [117, 105], [118, 105], [93, 106], [94, 106], [95, 106], [105, 106], [106, 106], [107, 106], [117, 106], [118, 106], [119, 106], [96, 109], [97, 109], [98, 109], [108, 109], [109, 109], [110, 109], [120, 109], [121, 109], [122, 109], [97, 110], [98, 110], [99, 110], [109, 110], [110, 110], [111, 110], [121, 110], [122, 110], [123, 110], [98, 111], [99, 111], [100, 111], [110, 111], [111, 111], [112, 111], [122, 111], [123, 111], [124, 111], [99, 112], [100, 112], [101, 112], [111, 112], [112, 112], [113, 112], [123, 112], [124, 112], [125, 112], [100, 113], [101, 113], [102, 113], [112, 113], [113, 113], [114, 113], [124, 113], [125, 113], [126, 113], [101, 114], [102, 114], [103, 114], [113, 114], [114, 114], [115, 114], [125, 114], [126, 114], [127, 114], [102, 115], [103, 115], [104, 115], [114, 115], [115, 115], [116, 115], [126, 115], [127, 115], [128, 115], [103, 116], [104, 116], [105, 116], [115, 116], [116, 116], [117, 116], [127, 116], [128, 116], [129, 116], [104, 117], [105, 117], [106, 117], [116, 117], [117, 117], [118, 117], [128, 117], [129, 117], [130, 117], [105, 118], [106, 118], [107, 118], [117, 118], [118, 118], [119, 118], [129, 118], [130, 118], [131, 118], [108, 121], [109, 121], [110, 121], [120, 121], [121, 121], [122, 121], [132, 121], [133, 121], [134, 121], [109, 122], [110, 122], [111, 122], [121, 122], [122, 122], [123, 122], [133, 122], [134, 122], [135, 122], [110, 123], [111, 123], [112, 123], [122, 123], [123, 123], [124, 123], [134, 123], [135, 123], [136, 123], [111, 124], [112, 124], [113, 124], [123, 124], [124, 124], [125, 124], [135, 124], [136, 124], [137, 124], [112, 125], [113, 125], [114, 125], [124, 125], [125, 125], [126, 125], [136, 125], [137, 125], [138, 125], [113, 126], [114, 126], [115, 126], [125, 126], [126, 126], [127, 126], [137, 126], [138, 126], [139, 126], [114, 127], [115, 127], [116, 127], [126, 127], [127, 127], [128, 127], [138, 127], [139, 127], [140, 127], [115, 128], [116, 128], [117, 128], [127, 128], [128, 128], [129, 128], [139, 128], [140, 128], [141, 128], [116, 129], [117, 129], [118, 129], [128, 129], [129, 129], [130, 129], [140, 129], [141, 129], [142, 129], [117, 130], [118, 130], [119, 130], [129, 130], [130, 130], [131, 130], [141, 130], [142, 130], [143, 130]]

EMT EMDOWN [[8, 0], [8, 1], [8, 2], [8, 12], [8, 13], [8, 14], [8, 24], [8, 25], [8, 26], [9, 1], [9, 2], [9, 3], [9, 13], [9, 14], [9, 15], [9, 25], [9, 26], [9, 27], [10, 2], [10, 3], [10, 4], [10, 14], [10, 15], [10, 16], [10, 26], [10, 27], [10, 28], [11, 3], [11, 4], [11, 5], [11, 15], [11, 16], [11, 17], [11, 27], [11, 28], [11, 29], [12, 4], [12, 5], [12, 6], [12, 16], [12, 17], [12, 18], [12, 28], [12, 29], [12, 30], [15, 12], [15, 13], [15, 14], [15, 24], [15, 25], [15, 26], [15, 36], [15, 37], [15, 38], [16, 13], [16, 14], [16, 15], [16, 25], [16, 26], [16, 27], [16, 37], [16, 38], [16, 39], [17, 14], [17, 15], [17, 16], [17, 26], [17, 27], [17, 28], [17, 38], [17, 39], [17, 40], [18, 15], [18, 16], [18, 17], [18, 27], [18, 28], [18, 29], [18, 39], [18, 40], [18, 41], [19, 16], [19, 17], [19, 18], [19, 28], [19, 29], [19, 30], [19, 40], [19, 41], [19, 42], [22, 24], [22, 25], [22, 26], [22, 36], [22, 37], [22, 38], [22, 48], [22, 49], [22, 50], [23, 25], [23, 26], [23, 27], [23, 37], [23, 38], [23, 39], [23, 49], [23, 50], [23, 51], [24, 26], [24, 27], [24, 28], [24, 38], [24, 39], [24, 40], [24, 50], [24, 51], [24, 52], [25, 27], [25, 28], [25, 29], [25, 39], [25, 40], [25, 41], [25, 51], [25, 52], [25, 53], [26, 28], [26, 29], [26, 30], [26, 40], [26, 41], [26, 42], [26, 52], [26, 53], [26, 54], [29, 36], [29, 37], [29, 38], [29, 48], [29, 49], [29, 50], [29, 60], [29, 61], [29, 62], [30, 37], [30, 38], [30, 39], [30, 49], [30, 50], [30, 51], [30, 61], [30, 62], [30, 63], [31, 38], [31, 39], [31, 40], [31, 50], [31, 51], [31, 52], [31, 62], [31, 63], [31, 64], [32, 39], [32, 40], [32, 41], [32, 51], [32, 52], [32, 53], [32, 63], [32, 64], [32, 65], [33, 40], [33, 41], [33, 42], [33, 52], [33, 53], [33, 54], [33, 64], [33, 65], [33, 66], [36, 48], [36, 49], [36, 50], [36, 60], [36, 61], [36, 62], [36, 72], [36, 73], [36, 74], [37, 49], [37, 50], [37, 51], [37, 61], [37, 62], [37, 63], [37, 73], [37, 74], [37, 75], [38, 50], [38, 51], [38, 52], [38, 62], [38, 63], [38, 64], [38, 74], [38, 75], [38, 76], [39, 51], [39, 52], [39, 53], [39, 63], [39, 64], [39, 65], [39, 75], [39, 76], [39, 77], [40, 52], [40, 53], [40, 54], [40, 64], [40, 65], [40, 66], [40, 76], [40, 77], [40, 78]]


# Found some serious problem
-->when without padding
blistEV1toEV4 = connectLayerswithOverlap(NBpreN = 400, NBpostN = 100, overlap_xdir = 3, padded_preneurons_xdir = 0, padded_postneurons_xdir = 0)
len(np.unique(np.array(blistEV1toEV4)[:,0])) = 400

-->when with padding
blistEV1toEV4 = connectLayerswithOverlap(NBpreN = 484, NBpostN = 144, overlap_xdir = 3, padded_preneurons_xdir = 2, padded_postneurons_xdir = 2)
len(np.unique(np.array(blistEV1toEV4)[:,0])) = 144
# my suggestion is to create a data structure with the info i mentioned and use that to create the cells and their connections

-- DONT USE PADDING

-- Testing without padding

len(blistEV1toEV4) = 841
len(np.unique(np.array(blistEV1toEV4)[:,0])) = 400
len(np.unique(np.array(blistEV1toEV4)[:,1])) = 100

len(blistEV4toEMT)= 196
len(np.unique(np.array(blistEV4toEMT)[:,0])) = 100
len(np.unique(np.array(blistEV4toEMT)[:,1])) = 25

len(blistEV1toIV1) = 841
len(np.unique(np.array(blistEV1toIV1)[:,0])) = 400
len(np.unique(np.array(blistEV1toIV1)[:,1])) = 100

len(blistEV4toIV4) = 196
len(np.unique(np.array(blistEV4toIV4)[:,0])) = 100
len(np.unique(np.array(blistEV4toIV4)[:,1])) = 25

len(blistEMTtoIMT) = 64
len(np.unique(np.array(blistEMTtoIMT)[:,0])) = 16
len(np.unique(np.array(blistEMTtoIMT)[:,1])) = 9

len(blistIV1toEV1) = 2209
len(np.unique(np.array(blistIV1toEV1)[:,0])) = 100
len(np.unique(np.array(blistIV1toEV1)[:,1])) = 400

len(blistIV4toEV4) = 484
len(np.unique(np.array(blistIV4toEV4)[:,0])) = 25
len(np.unique(np.array(blistIV4toEV4)[:,1])) = 100

len(blistIMTtoEMT) = 144
len(np.unique(np.array(blistIMTtoEMT)[:,0])) =9
len(np.unique(np.array(blistIMTtoEMT)[:,1])) =25

print(prety,poty,len(blist),len(np.unique(np.array(blist)[:,0])),len(np.unique(np.array(blist)[:,1])))

EV1 EMDOWN 841 400 100
EV1 EMUP 841 400 100
EV1DE EMDOWN 841 400 100
EV1DE EMUP 841 400 100
EV1DNE EMDOWN 841 400 100
EV1DNE EMUP 841 400 100
EV1DN EMDOWN 841 400 100
EV1DN EMUP 841 400 100
EV1DNW EMDOWN 841 400 100
EV1DNW EMUP 841 400 100
EV1DW EMDOWN 841 400 100
EV1DW EMUP 841 400 100
EV1DSW EMDOWN 841 400 100
EV1DSW EMUP 841 400 100
EV1DS EMDOWN 841 400 100
EV1DS EMUP 841 400 100
EV1DSE EMDOWN 841 400 100
EV1DSE EMUP 841 400 100
EV4 EMDOWN 784 100 100
EV4 EMUP 784 100 100
EMT EMDOWN 196 25 100
EMT EMUP 196 25 100


EMT EMDOWN 
[[0, 0], [0, 1], [0, 10], [0, 11], 
[1, 1], [1, 2], [1, 3], [1, 11], [1, 12], [1, 13], 
[2, 3], [2, 4], [2, 5], [2, 13], [2, 14], [2, 15], 
[3, 5], [3, 6], [3, 7], [3, 15], [3, 16], [3, 17], 
[4, 7], [4, 8], [4, 9], [4, 17], [4, 18], [4, 19], 
[5, 10], [5, 11], [5, 20], [5, 21], [5, 30], [5, 31], 
[6, 11], [6, 12], [6, 13], [6, 21], [6, 22], [6, 23], [6, 31], [6, 32], [6, 33], 
[7, 13], [7, 14], [7, 15], [7, 23], [7, 24], [7, 25], [7, 33], [7, 34], [7, 35], 
[8, 15], [8, 16], [8, 17], [8, 25], [8, 26], [8, 27], [8, 35], [8, 36], [8, 37], 
[9, 17], [9, 18], [9, 19], [9, 27], [9, 28], [9, 29], [9, 37], [9, 38], [9, 39], 
[10, 30], [10, 31], [10, 40], [10, 41], [10, 50], [10, 51], 
[11, 31], [11, 32], [11, 33], [11, 41], [11, 42], [11, 43], [11, 51], [11, 52], [11, 53], 
[12, 33], [12, 34], [12, 35], [12, 43], [12, 44], [12, 45], [12, 53], [12, 54], [12, 55], 
[13, 35], [13, 36], [13, 37], [13, 45], [13, 46], [13, 47], [13, 55], [13, 56], [13, 57], 
[14, 37], [14, 38], [14, 39], [14, 47], [14, 48], [14, 49], [14, 57], [14, 58], [14, 59], 
[15, 50], [15, 51], [15, 60], [15, 61], [15, 70], [15, 71], [16, 51], [16, 52], [16, 53], 
[16, 61], [16, 62], [16, 63], [16, 71], [16, 72], [16, 73], 
[17, 53], [17, 54], [17, 55], [17, 63], [17, 64], [17, 65], [17, 73], [17, 74], [17, 75], 
[18, 55], [18, 56], [18, 57], [18, 65], [18, 66], [18, 67], [18, 75], [18, 76], [18, 77], 
[19, 57], [19, 58], [19, 59], [19, 67], [19, 68], [19, 69], [19, 77], [19, 78], [19, 79], 
[20, 70], [20, 71], [20, 80], [20, 81], [20, 90], [20, 91], 
[21, 71], [21, 72], [21, 73], [21, 81], [21, 82], [21, 83], [21, 91], [21, 92], [21, 93], 
[22, 73], [22, 74], [22, 75], [22, 83], [22, 84], [22, 85], [22, 93], [22, 94], [22, 95], 
[23, 75], [23, 76], [23, 77], [23, 85], [23, 86], [23, 87], [23, 95], [23, 96], [23, 97], 
[24, 77], [24, 78], [24, 79], [24, 87], [24, 88], [24, 89], [24, 97], [24, 98], [24, 99]]

-- DONT RUN WITH PADDING i.e. always use "useNeuronPad": 0

-- my suggestion is to create a data structure with the info i mentioned and use that to create the cells and their connections
cellID, cell type, x location, y location, presynaptic IDs, postsynaptic IDs

... will work on this....

-- run 1000 sec sim in 20sept24_A0_simulated_cyle_
with
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint": 0.0,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.0
    },

-- run 1000 sec sim in 20sept24_A1_simulated_cyle_
with
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint": 0.0,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.0
    },
and 
"simulatedEnvParams": {
        "random":0,

-- run 1000 sec in 20sept24_A0_simulated_falcor_
with 
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint": 0.0,
        "followTarget": 0.2,
        "avoidTarget": -0.02,
        "hitBall": 0.0
    },
and 
"simulatedEnvParams": {
        "random":0,

* 20sept25 

-- python -i simdat.py backupcfg/20sept24_A0_simulated_falcor_sim.json
-- plotPerf(actreward) .... very similar performance p(follow)~0.4
save as 20sept24_A0_simulated_falcor_Perf.png

-- plot weights change onto M neurons:

--- draw average M activity 
pop = 'EMUP'
utimes = np.unique(pdf.time)
nbNeurons = dendidx[pop]+1-dstartidx[pop]
tpnts = len(utimes)
wts_top = np.zeros((tpnts,nbNeurons))
count = 0
for idx in range(dstartidx[pop],dendidx[pop]+1,1): # first plot average weight onto each individual neuron
  pdfs = pdf[(pdf.postid==idx)]  
  wts = [np.mean(pdfs[(pdfs.time==t)].weight) for t in utimes]
  wts_top[:,count] = wts
  count = count+1

tpnt1 = np.reshape(wts_top[0,:],(10,10))
tpnt2 = np.reshape(wts_top[-1,:],(10,10))

plt.imshow(np.subtract(tpnt2,tpnt1))
plt.title('Change in weights-->EMUP')

-- more comprehensive visualization.

pop = 'EMUP'
utimes = np.unique(pdf.time)
nbNeurons = dendidx[pop]+1-dstartidx[pop]
tpnts = len(utimes)
wts_top = np.zeros((tpnts,nbNeurons))
count = 0
prepop = 'EMT'
prestartidx = dstartidx[prepop]
preendidx = dendidx[prepop]
for idx in range(dstartidx[pop],dendidx[pop]+1,1): # first plot average weight onto each individual neuron
  pdfs = pdf[(pdf.postid==idx) and (pdf.preid>=prestartidx) and (pdf.preid<=preendidx)]  
  wts = [np.mean(pdfs[(pdfs.time==t)].weight) for t in utimes]
  wts_top[:,count] = wts
  count = count+1


-- included 2 functions in simdat.py
1. plotAllWeightsChangePreMtoM(pdf, dstartidx, dendidx, targetpop ,tpnt1 = 0, tpnt2 = -1)
... this function plots avg weight change for all synaptic connection onto targetpop.
... implemented to use targetpop as 'EMUP' or 'EMDOWN'.. havent checked for other targetpops
... could be used as plotAllWeightsChangePreMtoM(pdf, dstartidx, dendidx, targetpop='EMUP')
2. plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop , targetpop = 'EMUP',tpnt1 = 0, tpnt2 = -1)
... this function plots avg weight change synaptic connection from one preM area onto M (targetpop).
... implemented to use targetpop as 'EMUP' or 'EMDOWN'.. havent checked for other targetpops
... could be used as plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DE' , targetpop = 'EMUP')

-- run 1000 sec sim in 20sept25_A0_simulated_falcor_
with 
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint": 0.0,
        "followTarget": 0.2,
        "avoidTarget": -0.02,
        "hitBall": 0.0
    },
and 
"simulatedEnvParams": {
        "random":0,

and 

RLconns:
"FeedForwardDirNtoM":1 --->this was 1 even in last sims.
"FeedForwardLocNtoM":1
... now allow RL-plasticity in location pops (V1, V4, MT) too.

* 20sept28

... no improvement in p(follow) ~ 0.38 ... saved as 20sept25_A0_simulated_falcor_Perf.png
... plotted using 
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV4' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EMT' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DE' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DNE' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DN' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DNW' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DW' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DSW' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DS' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DSE' , targetpop='EMUP')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV4' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EMT' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DE' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DNE' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DN' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DNW' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DW' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DSW' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DS' , targetpop='EMDOWN')
plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = 'EV1DSE' , targetpop='EMDOWN')

and saved all WeightChange with prefix 20sept25_A0_simulated_falcor_WeightChange*

-- should have a function which takes care of all these plots.... see below. The function 
plotWeightChangeOnePreMtoMAll(pdf, dstartidx, dendidx, tpnt1 = 0, tpnt2 = -1, figsize=(14,8))
added to the simdat.py


>>> dconf['net']['EPreMPops']
['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EV4', 'EMT']
>>> dconf['net']['EMotorPops']
['EMDOWN', 'EMUP', 'EMSTAY']

minV = 0
maxV = 0
weightChanges = dict()
for prepop in dconf['net']['EPreMPops']:
  if dconf['net']['allpops'][prepop]>0:
    for targetpop in dconf['net']['EMotorPops']:
      if dconf ['net']['allpops'][targetpop]>0:
        weightChanges[prepop+'->'+targetpop] = plotWeightsChangeOnePreMtoM(pdf, dstartidx, dendidx, prepop = prepop , targetpop=targetpop)
        if np.amin(weightChanges[prepop+'->'+targetpop])<minV: minV = np.amin(weightChanges[prepop+'->'+targetpop])
        if np.amax(weightChanges[prepop+'->'+targetpop])>maxV: maxV = np.amax(weightChanges[prepop+'->'+targetpop])
nbrows = 4
nbcols = int(np.ceil(len(weightChanges)/4))
figsize=(14,8)
fig, axs = plt.subplots(nbrows, nbcols, figsize=figsize);
lax = axs.ravel()
cbaxes = fig.add_axes([0.92, 0.4, 0.01, 0.2])
conn_count = 0
for conns in weightChanges.keys():
  pcm = lax[conn_count].imshow(weightChanges[conns],vmin = minV, vmax = maxV)
  lax[conn_count].set_ylabel(conns,fontsize=8)
  conn_count = conn_count+1
  if conn_count==len(weightChanges): plt.colorbar(pcm, cax = cbaxes)
for _ in range(conn_count,nbrows*nbcols):
  lax[conn_count].set_axis_off()
  conn_count = conn_count+1

-- because of the large range of weight changes, small changes are invisible in individual weight changes when using 
plotWeightChangeOnePreMtoMAll(pdf, dstartidx, dendidx)...

-- ran plotPerf(actreward), plotWeightChangeOnePreMtoMAll(pdf, dstartidx, dendidx),
plotAllWeightsChangePreMtoM(pdf, dstartidx, dendidx, targetpop ='EMUP') and
plotAllWeightsChangePreMtoM(pdf, dstartidx, dendidx, targetpop ='EMDOWN').
... no improvement in performance.
... need to look carefully at the weights, if can learn anything or not??

-- run 3000 sec sims on cycle with real game.

-- should finish connection lists with coordinates....
cellID, cell type, x location, y location, presynaptic IDs, postsynaptic IDs

* 20sept29

-- saving dict of syn connections 
fconn = 'data/'+dconf['sim']['name']+'synConns.pkl'
pickle.dump(sim.topologicalConns, open(fconn, 'wb')) 

with 2 lists.

      sim.topologicalConns[prety+'->'+poty] = {}
      sim.topologicalConns[prety+'->'+poty]['blist'] = blist
      sim.topologicalConns[prety+'->'+poty]['coords'] = connc]Coords

where blist has preid and postid
and coords have xcoord, y coords of preneuron and xcoords, y coords of postneuron.

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
import pickle

# fn = 'data/'+dconf['sim']['name']+'synConns.pkl'
def plotConns(prepop,postpop):
  fn = 'data/20sept29_A0_simulated_local_synConns.pkl'
  D = pickle.load(open(fn,'rb'))
  fig = plt.figure()
  ax = fig.add_subplot(111, projection='3d')
  for conns in D.keys():
    if conns==prepop+'->'+postpop:
      cConns = D[conns]['blist']
      cCoords = D[conns]['coords']
  for i in range(np.shape(cCoords)[0]):
    prex, prey, postx, posty = cCoords[i][0],cCoords[i][1],cCoords[i][2],cCoords[i][3]
    ax.plot([prex,postx],[prey,posty],[9,0],'ro-')
    ax.set_zticks([0,9])
    ax.set_zticklabels([postpop,prepop])
  plt.show()

-- python -i simdat.py backupcfg/20sept28_A0_cycle_sim.json
... 20sept28_A0_game_cycle_Perf.png --> plotPerf(actreward)
... 20sept28_A0_game_cycle_weightschangeAll.png --> plotWeightChangeOnePreMtoMAll(pdf,dstartidx,dendidx)
... 20sept28_A0_game_cycle_EMDOWNweightschange.png ---> plotAllWeightsChangePreMtoM(pdf,dstartidx,dendidx,targetpop='EMDOWN')
... 20sept28_A0_game_cycle_EMUPweightschange.png ---> plotAllWeightsChangePreMtoM(pdf,dstartidx,dendidx,targetpop='EMUP')
... 20sept28_A0_game_cycle_sumInputImages.png ---> plt.imshow(np.sum(InputImages,0))

-- python -i simdat.py backupcfg/20sept25_A1_simulated_cycle_sim.json..... i forgot to change the name of the sim.... so previous simulation is gone.
... 20sept25_A1_simulated_cycle_Perf.png --> plotPerf(actreward)
... 20sept25_A1_simulated_cycle_weightschangeAll.png --> plotWeightChangeOnePreMtoMAll(pdf,dstartidx,dendidx)
... 20sept25_A1_simulated_cycle_EMDOWNweightschange.png ---> plotAllWeightsChangePreMtoM(pdf,dstartidx,dendidx,targetpop='EMDOWN')
... 20sept25_A1_simulated_cycle_EMUPweightschange.png ---> plotAllWeightsChangePreMtoM(pdf,dstartidx,dendidx,targetpop='EMUP')
... 20sept25_A1_simulated_cycle_sumInputImages.png ---> plt.imshow(np.sum(InputImages,0))

-- Interesting part of both simulations was that showed quite good ration for Hit/Miss. though i didnt use the reward for that.
-- SHOULD LOOK CAREFULLY and MAY PURSUE FURTHER....both game simulations.
backupcfg/20sept25_A1_simulated_cycle_sim.json and
backupcfg/20sept28_A0_cycle_sim.json


-- previous updates got lost somehow.....
-- debugging those lost changes....


-- Cortical pattern generation during dextrous movement in input-driven (Nature 577, 386-391 (2020) Adam Hantman group @ Janelia) 
... How do local dynamics and unputs interact to produce the cortical output pattern? 
... In the extreme case of an autonomous system, the entire pattern can be produced without input.
... while at the other extreme, the pattern may be inherited almst entirely from the inputs.
... This paper shows something intermediate happens i.e.
... When inputs are removed, the motor cortex does not merely produce a corrupted or scaled-down version of the normal pattern
... but instead moves to a new fixed point.
... Most likely, the local dynamics and inputs interact to produce this pattern.
... Upstream brain regions have the information about the current and target state of the arm, then route this information through motor cortex to compensate for the perturbation.
... Direct propioceptive information could be relayed through thalamus
... OR May be maintained through persistent activity in another area, such as the frontal cortex. 


-- For fixed weights, when presynaptic neurons fire at higher firing rate, the postsynaptic firing rate can increase.
... for this case, the weights of all connections onto the postsynaptic neuron should be scaled.

-- Homeostatic synaptic plasticity:

check firing rates of all neurons.
2 options: check every timestep or after 1000 timesteps.
if firing rate of a postsynaptic neuron go above the threshold, decrease the weights of all synaptic connections associated with that postsynaptic neuron.
Wij = Wij*(1-Dtar)
Dtar = 0.0001

If a postsynaptic neuron J fires > target rate, Sum of Wij (connection weights between the postsynaptic neuron J and all presynaptic neurons conneting with the J neuron) should be decreased as:
Wj(n+1) = Wj(n)*(1-Dtar)

If a postsynaptic neuron J fires < target rate, Sum of Wij should be increased as:
Wj(n+1) = Wj(n)*(1+Dtar)

1. Initialize the sumW for the neurons in each pop. 
2. get firing rates of neurons in each pop at time between t and t+tlarge.
3. If firing rate of a neuron is higher than the target rate, decrease sumW (sumW = sumW-dfctr). If firing rate of a neuron is lower than the target rate, increase sumW (sumW = sumW+dfctr).
4. at each time step, look at the weights of all connections onto a neuron. This W1+W2+....+WN should be equal to sumW.
... S = sumW/(W1+W2+....+WN)
... W1new = S*W1
... W2new = S*W2 and so on.

*****

1. Initialize the sumW for the neurons in each pop and setup dict for TargetFR.

def initTargetFR(sim,allpops,initTargetFR=5):
  sim.dTargetFR_AllNeurons = {}
  for pop in allpops:
    sim.dTargetFR_AllNeurons[pop]=[]
    lcell = [c for c in sim.net.cells if c.gid in sim.net.pops[pop].cellGids] # this is the set of cells in a pop
    for cell in lcell:
      sim.dTargetFR_AllNeurons[pop].append([cell.gid,initTargetFR])

def initTargetW(sim,allpops):
  sim.dTargetW_AllNeurons = {}
  for pop in allpops:
    sim.dTargetW_AllNeurons[pop]=[]
    lcell = [c for c in sim.net.cells if c.gid in sim.net.pops[pop].cellGids] # this is the set of cells in a pop
    for cell in lcell:
      cCellW = 0
      for conn in cell.conns:    
        cCellW+=conn['hObj'].weight[0]
      sim.dTargetW_AllNeurons[pop].append([cell.gid,cCellW])


initTargetFR(sim,allpops,initTargetFR=dconf['net']['homPlast']['targetFR']) # call this once before the simulation
initTargetW(sim,allpops) # call this once before running the simulation.

*****

2. get firing rates of neurons in each pop at time between t and t+tlarge.

def getFiringRateWithIntervalAllNeurons(sim, trange, allpops):
  sim.dFR_AllNeurons = {}
  for pop in allpops:
    sim.dFR_AllNeurons[pop] = getFiringRateWithInterval (trange = trange, neuronal_pop = sim.net.pops[pop].cellGids)
  

def getFiringRateWithInterval (trange = None, neuronal_pop = None):
  if len(neuronal_pop) < 1: return 0.0
  spkts = sim.simData['spkt']
  spkids = sim.simData['spkid']
  ctspkids = spkids[np.where(spkts>=trange[0]&spkts <= trange[1])]
  pop_firingrates = []
  if len(spkts)>0:
    for cellid in neuronal_pop:
      pop_firingrates.append([cellid,1000*len(np.where(ctspkids==cellid)/(trange[1]-trange[0]))])
  return pop_firingrates

*****

3. If firing rate of a neuron is higher than the target rate, decrease sumW (sumW = sumW-dfctr). If firing rate of a neuron is lower than the target rate, increase sumW (sumW = sumW+dfctr).
def adjustTargetW

getFiringRateWithIntervalAllNeurons(sim, [t,t-dconf['net']['homPlast']['hInterval']], allpops) # call this function at hsInterval

def adjustTargetWBasedOnFiringRates (sim):
  dshift = dconf['sim']['homPlast']['dshift']
  for pop in sim.dTargetW_AllNeurons.keys():
    for idx in range(len(sim.dTargetW_AllNeurons[pop])):
      cid = sim.dTargetW_AllNeurons[pop][idx][0]
      cTargetW = sim.dTargetW_AllNeurons[pop][idx][1]
      if sim.dTargetFR_AllNeurons[pop][idx][0]==cid:
        cTargetFR = sim.dTargetFR_AllNeurons[pop][idx][1]
      if sim.dFR_AllNeurons[pop][idx][0]==cid:
        cFR = sim.dFR_AllNeurons[pop][idx][1]
      if cFR>cTargetFR:
        sim.dTargetW_AllNeurons[pop][idx][1]-=dshift
      elif cFR<cTargetFR:
        sim.dTargetW_AllNeurons[pop][idx][1]+=dshift
  return sim.dTargetW_AllNeurons

adjustTargetWBasedOnFiringRates(sim) # call this function at hsInterval

*****

4. at each time step, look at the weights of all connections onto a neuron. This W1+W2+....+WN should be equal to sumW.
... S = sumW/(W1+W2+....+WN)
... W1new = S*W1
... W2new = S*W2 and so on.


def adjustWeightsBasedOnFiringRates (sim,lpop):
  # normalize the STDP/RL weights during the simulation - called in trainAgent
  for pop in lpop:
    lcell = [c for c in sim.net.cells if c.gid in sim.net.pops[pop].cellGids] # this is the set of cells in a pop
    lTargetW = sim.dTargetW_AllNeurons{pop}
    for cell,targetW in zip(lcell,lTargetW):
      cCellW = 0
      for conn in cell.conns:    
        cCellW+=conn['hObj'].weight[0]
      sfctr = targetW[1]/cCellW
      for conn in cell.conns:    
        conn['hObj'].weight[0]=sfctr*conn['hObj'].weight[0]

adjustWeightsBasedOnFiringRates (sim,allpops) # call this function every game timestep i.e 20ms/50ms/100ms.

-- Integrated these functions into sim.py.
-- add in sim.json
"homPlast": {"On":1, "dshift":0.00001,"targetFR":5,"hsIntervalSteps":100,"updateIntervalSteps":20}

-- seems to be working. Not sure if and how this will be helpful.
-- right now targertFR is 5Hz for all neurons. Could be seperated for different pops. 

-- use targetFR of 2Hz.

-- Change the homeostatic synaptic plasticity to take into account individual types of synapses.

-- Was working on progress report for ARO in first week of Oct.

* 20Oct09

-- If we use same value for reward and punishment, will we be able to get rid of irrelevant noise?

-- update sim.json based on sn.json but still using 
  "targetedRL":1 
and 
  "architecturePreMtoM": {
        "useProbabilistic": 0,
        "useTopological": 1}
-- run the simulatedEnv in "20oct09_"

* 20Oct14/20Oct15

** Potential models for RL.

-- Farries and Fairhall JNeurophys 2007
---- STDP:
F(Delta_t) = A_plus * exp(-|Delta_t|/tau_plus) if Delta_t>0 (LTP) .... tau_plus = 13 ms
F(Delta_t) = A_neg * exp(-|Delta_t|/tau_neg) if Delta_t<0 (LTD) .... tau_neg = 35 ms

Delta_t is timing of the postsynaptic spike relative to the presynaptic spike.

Froemke and Dan (2002) added a spike suppression model, where the effectiveness of a pre- or postsynaptic spike at inducing synaptic changes is supressed by preceeding spikes.
Each spike is assigned an "efficacy" eta = 1 - exp(-tspike/taus)
tspike is the time of the preceding spike.

delta_w_ij = eta_pre_i * eta_post_j * F(Detla_t_ij)
eta_pre_i = 1 - exp(-tspike_pre_i/taus_pre) ..... taus_pre = 28 ms
eta_post_j = 1 - exp(-tspike_post_j/taus_post) ..... taus_post = 88 ms

wmax--- 10*w_initial
wmin--- 0.1*w_initial

---- activity dependent synaptic scaling.
If the activity of the postsynaptic neuron increased more than the upper limit of allowed firing rates, they scaled down the synaptic weight using some multiplicative factor
If the activity of the postsynaptic neuron decreased below the lower limit of allowed firing rates, they scaled up the synaptic weights using some multiplicative factor.
activity dependent scaling was done at end of each trial (so should use large time-interval).
......in a few sims, they implemented activity-dependent changes in intrinsic excitability instead of synaptic scaling.....see the paper for details.


---- RL through modulation of synaptic plasticity.
reward signal * unmodulated STDP.

adaptation of temporal difference algorithm
delta_R = R_received - R_expected

* 20Oct20

** Reduce V1 dir

Haroon: If we go that path, then i would say reduce V1 dir to 8 neurons to only encode the direction of the ball. I don't think that the direction of racket ever contributes to the decision. Only the racket's position is relevant. E.g.
S(t) = [Pixel_RO(t),Pixel_RM(t),Pixel_B(t),Dir_B(t)]
S(t) is state of the environment at time t
Pixel_RO(t) is pixel representing opponent racket at time t ---> Position of opponent racket
Pixel_RM(t) is pixel representing model racket at time t ---> Position of model racket
Dir_B(t) is direction vector representing direction of ball at time t ---> Direction of the ball

** Reduce V1 too for making associations.

Haroon: One thing is for sure that we need an association layer, but not sure if what is described above makes sense. Associations are not to be made only between location and directions, but also between locations and directions. So 400x3200 pairs are not going to add anything that is in comparison to how many associations are needed. This is a huge space. I think we may reduce the whole problem (I hate it because this will only work for paddle/racket games) by only encoding the y-position of the ball and rackets using 20x3 neurons. Want to have 3 columns to separately encode 3 objects.So if we do that we will have 60 location encoding neurons and 8 direction encoding neurons, and we will have 68 neurons to make all possible associations. And then we will need quadruplets to make associations.
yLoc_RO, yLoc_RM, yLoc_Ball, dir_Ball
Choose 1 number from 1-20 for yLoc_RO - 20 options 
Choose 1 number from 1-20 for yLoc_RM - 20 options
Choose 1 number from 1-20 for yLoc_Ball - 20 options
Choose 1 number from 1-8 for dir_Ball   - 8 options
Total associations will be 20x20x20x8 = 64000
Or we could even reduce it further by ignoring yLoc_RO in making associations and that will require only 3200 neurons in EA.

** Sam has already started developing EA, association area so I should switch to development branch to develop further.
-- switch to development branch
git pull origin development

-- adaption sim.json according to sn.json.... this will change eventually.

-- have a seperate option for reduced network....

-- use "useReducedNetwork": 1 in "sim" in sim.json.
-- use same "net" but with different values.
	    "allpops": {
	        "ER":0,
	        "IR":0,
	        "EV1":60,
	        "EV1DE":1,
	        "EV1DNE":1,
	        "EV1DN":1,
	        "EV1DNW":1,
	        "EV1DW":1,
	        "EV1DSW":1,
	        "EV1DS":1,
            "EV1DSE":1,
            "ID":0,
	        "IV1":10,
	        "EV4":0,
	        "IV4":0,
	        "EMT":0,
            "IMT":0,
            "EA":64000,
            "IA":640,
	        "EMDOWN":100,
	        "EMUP":100,
	        "EMSTAY":0,
            "IM":13,
            "IMUP": 13,
            "IMDOWN": 13,
            "IMSTAY": 0
      }

-- update function updateDirSensitiveRates() in aigame.py

    if self.reducedNet:
      AngRFSigma2 = self.AngRFSigma2
      MaxRate = self.dirSensitiveNeuronRate[1]
      for pop in self.ldirpop: self.dFiringRates[pop] = self.dirSensitiveNeuronRate[0] * np.ones(shape=(1,1)) # should have a single angle per direction selective neuron pop
      court_motiondir = motiondir[:,self.courtXRng[0]:self.courtXRng[1]] # only motion direction of ball in the court
      unique_angles = np.unique(court_motiondir)
      for a in unique_angles:
        if a >= 0.0:
          for pop in self.ldirpop:
            if self.EXPDir:
              fctr = np.exp(-1.0*(getangdiff(a,dAngPeak[pop])**2)/AngRFSigma2)
              if MaxRate * fctr < self.FiringRateCutoff: fctr = 0
              self.dFiringRates[pop] += MaxRate * fctr
            else:
              self.dFiringRates[pop] = MaxRate

-- update function updateInputRates() in aigame.py

    if self.reducedNet:
      if dconf['net']['useBinaryImage']:
        thresh = threshold_otsu(dsum_Images)
        binary_Image = dsum_Images > thresh
        fr_Image = np.zeros(shape=(self.input_dim,3))
        fr_Images_RO = self.locationNeuronRate*sum(binary_Image[:,0:self.courtXRng[0]-1],1)
        fr_Images_Ball = self.locationNeuronRate*sum(binary_Image[:,self.courtXRng[0]:self.courtXRng[0]],1)
        fr_Images_RM = self.locationNeuronRate*sum(binary_Image[:,self.courtXRng[1]+1:-1],1)
        fr_Image[:,0] = fr_Images_RO
        fr_Image[:,1] = fr_Images_Ball
        fr_Image[:,2] = fr_Images_RM
      else:
        dsum_Images = dsum_Images - np.amin(dsum_Images)
        dsum_Images = (255.0/np.amax(dsum_Images))*dsum_Images
        fr_Images = self.locationNeuronRate/(1+np.exp((np.multiply(-1,dsum_Images)+123)/10))
        fr_Image[:,0] = sum(fr_Images[:,0:self.courtXRng[0]-1],1) # opponent racket y loc
        fr_Image[:,1] = sum(fr_Images[:,self.courtXRng[0]:self.courtXRng[1]],1) # ball y loc
        fr_Image[:,2] = sum(fr_Images[:,self.courtXRng[1]+1:-1],1) # model racket y loc

-- now adjust the architecture in sim.py
... first connections...

V1 neurons:
1,2,3
4,5,6
7,8,9
10,11,12
.....
58,59,60

# cLV1toEA, cLV1DEtoEA, cLV1DNEtoEA, cLV1DNtoEA, cLV1DNWtoEA, cLV1DWtoEA, cLV1DSWtoEA, cLV1DStoEA, cLV1DSEtoEA = createConnListV1toEA(60,3)
def createConnListV1toEA(NBpreN,NBobjs): # This function is hard coded.... Not sure how to make it more generalized.
    RO_neurons = []
    Ball_neurons = []
    RM_neurons = []
    count = 0
    for _ in range(int(NBpreN/NBobjs)): # this is assuming 3 objects represented by RO (Opponent Racket), Ball and RM (Model Racket)
        RO_neurons.append(count)
        Ball_neurons.append(count+1)
        RM_neurons.append(count+2)
        count = count+NBobjs
        # Dir neurons: E, NE, N, NW, W, SW, S, SE
    Dir_neurons = [0,1,2,3,4,5,6,7]
    combs = []
    for ro in RO_neurons:
        for b in Ball_neurons:
            for rm in RM_neurons:
                for dirs in Dir_neurons:
                    combs.append([ro,b,rm,dirs])
    connsListV1toEA = []
    connsListV1DEtoEA = []
    connsListV1DNEtoEA = []
    connsListV1DNtoEA = []
    connsListV1DNWtoEA = []
    connsListV1DWtoEA = []
    connsListV1DSWtoEA = []
    connsListV1DStoEA = []
    connsListV1DSEtoEA = []
    postid = 0
    for comb in combs:
        combV1 =  comb[0:3] #comb[0:NBobjs] # assuming NBobjs = 3
        combDirV1 = comb[3]
        for ob in combV1: 
            connsListV1toEA.append([ob,postid])
        if combDirV1==0: #E
            connsListV1DEtoEA.append([0,postid])
        elif combDirV1==1: #NE
            connsListV1DNEtoEA.append([0,postid])
        elif combDirV1==2: #N
            connsListV1DNtoEA.append([0,postid])
        elif combDirV1==3: #NW
            connsListV1DNWtoEA.append([0,postid])
        elif combDirV1==4: #W
            connsListV1DWtoEA.append([0,postid])
        elif combDirV1==5: #SW
            connsListV1DSWtoEA.append([0,postid])
        elif combDirV1==6: #S
            connsListV1DStoEA.append([0,postid])
        elif combDirV1==7: #SE
            connsListV1DSEtoEA.append([0,postid])
        postid = postid+1 
    return connsListV1toEA, connsListV1DEtoEA, connsListV1DNEtoEA, connsListV1DNtoEA, connsListV1DNWtoEA, connsListV1DWtoEA, connsListV1DSWtoEA, connsListV1DStoEA, connsListV1DSEtoEA


-- nothing tested....

* 20Oct21

-- may be keep the reduced network model simple and dont include any recurrent connections or feedback connections.
.... we should have those included once understand the dynamics (pop firing rates etc) of the reduced network.

-- change "EEPreMProb" to "EEPreAProb" and set it to "EEPreAProb": 0.0 (want to test network with on FF conns)

-- if VTopoI    to    if VTopoI and dconf['sim']['useReducedNetwork']==0

-- TODO: should include connCoords for createConnListV1toEA function.

-- for now only using AMPA syns for V1toEA and V1DirtoEA.

-- tried running but seems like too many connections to be established on local machine.
... may be "EEMProb": 0.3 is too high, will change it to 0.0003
... still taking so much long time. may be the problem is somewhere else....


* 20Oct22

-- primarliy debugging to make sure that reduced model runs before tuning the parameters.

-- looks like there was no problem with the connections. Just that with recurrent connections, there were too many connections to take care.

Creating network of 26 cell populations on 1 hosts...
  Number of cells on node 0: 64968 
  Done; cell creation time = 26.49 s.
Making connections...
  Number of connections on node 0: 13161070 
  Number of synaptic contacts on node 0: 18281070 
  Done; cell connection time = 2902.55 s.
Adding stims...
  Number of stims on node 0: 68 
  Done; cell stims creation time = 0.51 s.
Recording 8 traces of 1 types on node 0

... removing Feedback and recurrent connections by setting probs to 0, it took about 10 mins. and then there was some bug in aigame.py.

Creating network of 26 cell populations on 1 hosts...
  Number of cells on node 0: 64968 
  Done; cell creation time = 29.86 s.
Making connections...
  Number of connections on node 0: 8041070 
  Done; cell connection time = 581.51 s.
Adding stims...
  Number of stims on node 0: 68 
  Done; cell stims creation time = 0.29 s.
Recording 8 traces of 1 types on node 0

-- so once the connections were established found a couple of more bugs related to reduced network model in aigame.py

-- one problem was using the coordinates to split the ylocs of two rackets and a ball.
.... i was using coordinates considering full image but firingrates for loc (for driving EV1) were computed using downsampled image.
.... therefore i changed the coordinates to
fr_Images_RO = self.locationNeuronRate*np.sum(binary_Image[:,0:3],1)
fr_Images_Ball = self.locationNeuronRate*np.sum(binary_Image[:,3:17],1)
fr_Images_RM = self.locationNeuronRate*np.sum(binary_Image[:,17:],1)

-- fixed some minor typos.

-- reduced model seems to be running. will keep testing more.

-- the model is annoyingly slow now. should run on cluster and start tuning parameters.

-- run 100sec sim "20oct22_A0_game_falcor_" to see the results. (will start tuning afterwards)
... EEMProb = 0.2
-- pushed sim.json has EEMProb = 0 ---> Change it to 0.2 and run.

-- run 100sec sim "20oct22_A0_game_cycle_" to see the results. (will start tuning afterwards)
... i think i used targetedRL for this sim.
... EEMProb = 0.2

-- Looks like EEMProb of 0.2 is not producing any actions.
... probably too much drive causing depolarization block.... needs to be checked.....

* 20Oct23

-- No activity observed in 'EA' in sim "20oct22_A0_game_cycle_"
change dconf['net']['EEAWghtAM'] from "EEAWghtAM": 2e-05 to "EEAWghtAM": 2e-04
and rerun sim for 10sec. 

-- run sim "20oct23_A0_game_cycle_" by increase EEAWghtAM from 2e-5 to 2e-4 to see if this is enough to relay information from V1 to EA>

-- terminate sim "20oct22_A0_game_falcor_" and rerun in "20oct23_A0_game_falcor_" with "EEAWghtAM": 2e-04

-- should have an option to run even simpler network with only ball and model racket represented.....

        if dconf['net']['captureTwoObjs']:
          fr_Images = np.zeros(shape=(20,2))
          fr_Images_Ball = self.locationNeuronRate*np.sum(binary_Image[:,3:17],1)
          fr_Images_RM = self.locationNeuronRate*np.sum(binary_Image[:,17:],1)
          fr_Images[:,0] = fr_Images_Ball
          fr_Images[:,1] = fr_Images_RM
          print(fr_Images)        

-- make sure to use 40 neurons for EV1 when using reduced network capturing ball and model racket.
... also have another function in connUtils.py to have connectivity from V1 and V1DIR to EA.
-- make sure to use 60 neurons for EV1 when using reduced network capturing opponent racket, ball and model racket.

-- poor coding choice ... may be should fix it...

  if dconf['sim']['captureTwoObjs']:
    cLV1toEA, cLV1DEtoEA, cLV1DNEtoEA, cLV1DNtoEA, cLV1DNWtoEA, cLV1DWtoEA, cLV1DSWtoEA, cLV1DStoEA, cLV1DSEtoEA = createConnListV1toEA2(dnumc['EV1'],2) # 3 objects in the game
  else:
    cLV1toEA, cLV1DEtoEA, cLV1DNEtoEA, cLV1DNtoEA, cLV1DNWtoEA, cLV1DWtoEA, cLV1DSWtoEA, cLV1DStoEA, cLV1DSEtoEA = createConnListV1toEA(dnumc['EV1'],3) # 3 objects in the game

-- use "EA":64000 when "EV1":60 representing 3 objects (20+20+20) NB associations: 20x20x20x8 = 64000
-- use "EA":3200 when "EV1":60 representing 2 objects (20+20) NB associations: 20x20x8 = 3200 


-- I THINK THERE IS A BUG IN MOTIONDIRECTION CODE FOR REDUCEDNETWORK MODEL.....
-- Found the bug.... it was related to dirSensitiveNeuronDim.
... the code was written assuming we will use direction sensitive neurons encoding direction of objects at their locations.

... for reduced model, we are using 1 neuron to encode 1 directions so in total 8 neurons to encode 8 directions 
... also the direction is encoded only for the ball. 

... the quick fix to the problem is below....
    if self.reducedNet:
      self.dirSensitiveNeuronDim = 20 #Assuming the downscaling factor is 8.
    else:
      self.dirSensitiveNeuronDim = int(np.sqrt(dconf['net']['allpops']['EV1DE']))

-- still tuning parameters.....

-- started new sims (1000 sec each) on falcor (20oct23_...._nontargeted)and cycle (20oct23_...._targeted).

* 20Oct26

-- the simulation ran on falcor on oct23 was too slow. took more than 2 days to run 84 sec.
-- should run the reduced model on falcor.
"20oct26_A0_game_falcor_reduced2_targeted_"
"captureTwoObj":1 <--[0]
"EV1":40  <--[60]
"EA":3200 <--[64000]
run for 10 sec to adjust parameters.
... look at EV1cell0, seems like a depol block (see the fig)
... looking at raster (see the fig), highly synchronized activity in EA and IA.... should lower the weight
... looking at raster, for long duration, no activity in M.... should lower the weights onto M too.

-- "20oct26_A1_game_falcor_reduced2_targeted_"
"stimModInputW":0.015   <--[0.02]
"EEAWghtAM": 1e-3   <--[2e-3]
"EEMWghtAM":4.5e-5  <--[4.5e-4] decreased
... didnt save any fig.
... no motor activity generated. so may be need to increase "EEMWghtAM" or increase convergence from 0.2 to 0.4.

-- "20oct26_A2_game_falcor_reduced2_targeted_"
"stimModInputW":0.015   <--[0.02]
"EEAWghtAM": 1e-3   <--[2e-3]
"EEMWghtAM":4.5e-3  <--[4.5e-4] increased this time
"EEMFeedbackWghtAM":2e-15   <--[2e-5].... should not have affected because EEMFeedbackProb was already set to 0.

-- still not completely sure about the choice of parameters, but with a 10sec run, see decent firing rates. May be should try running on falcor.

-- run "20oct26_B0_falcor_reduced_2obj_"

* 20oct27

-- saved rasters: 
20oct26_B0_rasterZ0.png - Full 
.... firing rates are high
......... 1. probably should reduce either the strength of connections from stimMod to V1
......... 2. or decrease the firing rate of stimMod.
......... 3. may be both 1 and 2.
.... some times, EV1 cells went to depolarization block, which could be due to high firing rate inputs.
......... not sure what is causing it. could be high input firing rates or weights.
.... seems like V to EA and EA to M weights are working fine.

-- run "20oct27_B0_falcor_reduced_2obj_" for 100 sec.
"DirMaxRate": 100
"LocMaxRate": 100

-- run "20oct27_A0_cycle_reduced_2obj_" for 100 sec on cycle:

"DirMaxRate": 100
"LocMaxRate": 100
"stimModVD":0.02
"stimModVL":0.02

* 20oct28

-- yesterday, i ran quite a few parameters for "DirMaxRate", "LocMaxRate", "stimModVD" and "stimModVL" ...
... but could not find a good set of parameters to get a stable firing. saw some dep block in cell0 of EV1 ....
... and some silent periods in raster. (havent saved all raster).

-- play with inhibition IV1 to EV1.
IV1 to EV1: GA = 0.1 (0.2 originally), p = 0.5 (0.25 originally)
set ID neuron to 1.
"20oct28_A0_cycle_reduced_2obj_" ... 100 sec.
... raster saved... looks ok

-- play with inhibition IV1 to EV1.
IV1 to EV1: GA = 0.3 (0.2 originally), p = 0.5 (0.25 originally)
ID to ED: GA = 0.2, p = 1 <--additional change
set ID neuron to 1.
"20oct28_A1_cycle_reduced_2obj_" ... 100 sec.

-- play with inhibition IV1 to EV1.
stimModVD: 0.005
stimModVL: 0.005
IV1 to EV1: GA = 0.3 (0.2 originally), p = 0.5 (0.25 originally)
ID to ED: GA = 0.2, p = 1 <--additional change
set ID neuron to 1.
"20oct28_A2_cycle_reduced_2obj_" ... 100 sec.

-- remove inhibition onto EV1.
stimModVD: 0.02
stimModVL: 0.02
IV1 to EV1: p = 0 (originally 0.25)
"20oct28_A0_falcor_reduced_2obj_" ... 100 sec.

seems like need inhibition and probably more than before.

-- restore inhibition onto EV1.
stimModVD: 0.02
stimModVL: 0.02
IV1 to EV1: GA=0.2 and p = 0.5 (originally 0.25)
"20oct28_A1_falcor_reduced_2obj_" ... 100 sec.

-- restore inhibition onto EV1.
stimModVD: 0.02
stimModVL: 0.02
IV1 to EV1: GA=0.1 and p = 0.75 (originally 0.25)
ID to ED: GA = 0.2, p = 1
"20oct28_A2_falcor_reduced_2obj_" ... 100 sec.


-- restore inhibition onto EV1. and decrease input weights.
stimModVD: 0.01
stimModVL: 0.01
IV1 to EV1: GA=0.1 and p = 0.75 (originally 0.25)
ID to ED: GA = 0.2, p = 1
"20oct28_A3_falcor_reduced_2obj_" ... 100 sec.

-- restore inhibition onto EV1. and decrease input weights.
stimModVD: 0.005
stimModVL: 0.005
IV1 to EV1: GA=0.1 and p = 0.75 (originally 0.25)
ID to ED: GA = 0.2, p = 1
"20oct28_A4_falcor_reduced_2obj_" ... 100 sec.

* 20oct29

-- found that for reducedModel, inhibition was too strong and might be unnecessary.
-- therefore get rid of inhibition for now.
set "IV1":0
-- once inhibition is gone, much less weight is required for the excitation.
set "stimModVL": 0.002
and also set "stimModVD": 0.002
-- another issue is with firing rates higher than 150Hz. put
          elif dFiringRates[pop][int(cell.gid-offset)]>dconf['net']['LocMaxRate']:
            stim['hObj'].interval = 1000.0/dconf['net']['LocMaxRate']


-- better solution: use amax instead of sum so that can get maximum projection on a plane.
e.g. in function updateInputRates (self, dsum_Images) in aigame.py 
fr_Images_Ball = self.locationNeuronRate*np.amax(binary_Image[:,3:17],1)

-- fix in aigame.py on falcor, and then run a 100 sec sim
"20oct29_A0_falcor_reduced_2obj_"
"ID":0
"IV1":0 
stimModVD: 0.002
stimModVL: 0.002
... seems like the racket didnt move much.

-- changed EA to EM = 4.5e-3... check the value
"20oct29_A1_falcor_reduced_2obj_"
"ID":0
"IV1":0 
stimModVD: 0.002
stimModVL: 0.002

- changed VL to EA and VD to EA to 4.5e-2
EA to EM = 4.5e-3... check the value
"20oct29_A2_falcor_reduced_2obj_"
"ID":0
"IV1":0 
stimModVD: 0.002
stimModVL: 0.002

* 20nov02

-- weights from Loc and Dir neurons onto EA should be adjusted so that EA neurons get activated when all 3 presynaptic neurons are active.

-- i had problem compiling mod on new computer. was giving error that misc.h missing.
-- sam suggested: for now you can delete intf6.mod and misc.h, misc.mod from the mod folder
intf6.mod is an integrate and fire model i worked on in the past
... removed these files and it works.

-- still mpi is not working on my new mac. need to figure out....

-- adjusting weights from Loc and Dir neurons onto EA, so that EA neurons get activated when all 3 presynaptic neurons are active.
20nov02_A0_cycle
0.002 seems a bit low…. Because I see only 2 neurons firing for the racket.

W between Loc and EA and dir and EA is still high as I see EA neurons spiking even in the absence of 3 types of neurons (B, R and D) activating.

20nov02_A1_cycle
0.0025 to make sure successful inputs without dropping
1.5e-3 instead of 4.5e-3 from VL to EA and VD to EA


20nov02_A2_cycle
0.0025 to make sure successful inputs without dropping — seems reasonable for now
2e-3 instead of 4.5e-3 from VL to EA and VD to EA
0.01 instead of 0.02 from EA to IA
4e-3 instead of 4e-4 from EA to EM


20nov02_A3_cycle
0.003 to make sure successful inputs without dropping — seems reasonable for now
2e-3 instead of 4.5e-3 from VL to EA and VD to EA
0.005 instead of 0.02 from EA to IA
4e-3 instead of 4e-4 from EA to EM


20nov02_A3long_cycle
Run 300 sec sim.---> took 13289 sec (221 mins or 3hrs41mins) using 12 cores
save raster as "20nov02_A3long_cycle_reduced_2obj_raster.png"
save perf as "20nov02_A3long_cycle_reduced_2obj_Perf.png"

could potentially be run for longer durations.

* 20nov03

-- run 20nov03_A3long_cycle for 2000 sec. (only follow the ball)

-- run 20nov03_A3longAllRewards_cycle for 2000 sec.
scorePoint:1.0
losePoint:-0.5
hitBall:0.5

followTarget: 0.1
avoidTarget: -0.01

-- on falcor i ran sim "20nov02_A0Long_falcor_reduced_2obj" for 300 sec. still running.

-- run 20nov03_A3long_falcor for 500 sec. (only follow the ball)
... same parameters are 20nov03_A3long_cycle except targetedRL = 0

-- setup complete on new mac
now can run using mpi on new machine.

mpiexec -n 4 nrniv -python -mpi sim.py

pythonw issue: https://github.com/Neurosim-lab/netpyne/issues/496

* 20nov04

-- got this code from sam

# SN: exptl
  #if 'hSTDP' not in conn: continue
  #cpreID = conn.preGid  #find preID
  #if type(cpreID) != int: continue
  if dconf['sim']['targettedRL'] > 1:
    for pop in Mpops: dcell[pop] = np.unique(dcell[pop])
    nhost = sim.pc.nhost()
    src = [dcell]*nhost
    dcellgid = sim.pc.py_alltoall(src)
    for dcell in dcellgid:
      for pop in Mpops:
        for cell in sim.net.cells:
          if cell.gid in dcell[pop]:
            for conn in cell.conns:
              STDPmech = conn.get('hSTDP')
              if STDPmech:
                if STDPmech not in dSTDPmech[pop]:
                  dSTDPmech[pop].append(STDPmech)

-- start with the motor pops at the first level or level 0. so EMUP and EMDOWN.
-- to get all rlstdp synapses at previous stage....
for each neuron in pops
get thre preid


-- PROBLEM: at some places in cmat we use EMDOWN and EMUP whereas at other places we use EM

Mpops = ['EMUP','EMDOWN','EM']
l1pop = []
for mpop in Mpops:
  for prepops in dconf['net']['cmat'].keys():
    if mpop in dconf['net']['cmat'][prepops].keys():
      if prepops not in l1pop and dconf['net']['allpops'][prepops]>0:
        l1pop.append(prepops)

* 20nov05

-- resume sim in "20nov05_A3longAllrewards_cycle" (should have been without Allrewards in the name) using "20nov03_A3long_cycle"
not better than early version of the model without EA.
still want to run it for longer duration.

-- run sim in "20nov05_A3long_cycle_reduced_2obj_pong0_"
same parameters as in for sim "20nov03_A3long_cycle" but use pong-v0

-- later run with pong-v0 and 
            "RLlenhebb": 100,
            "RLlenanti": 100,
    instead of 
                "RLlenhebb": 2000,
            "RLlenanti": 2000,
TO BE DONE. 
I want to run this because with 2000 ms, associations might form between temporal distant environment and actions. 

-- now check what happened on falcor sims. still running....

-- continue preparing lists of conns for each postsynaptic neuron pop.

# this function return a dictonary of postsynaptic pops with presynpatic pops

def presynPopsDict():
  # create list of potential postsynaptic populations.
  pot_postpops = []
  for pops in dconf['net']['allpops'].keys():
    if dconf['net']['allpops'][pops]>0:
      pot_postpops.append(pops)
  pot_postpops.append('EM')
  pot_postpops.append('VD')
  pot_postpops.append('VL')
  # create a dictionary, where for each potential postsynaptic population, include presynaptic pops.
  dprepops = {pop:[] for pop in pot_postpops} # SN: exptl
  lLocpops = ['EV1']
  lDirpops = ['EV1DE','EV1DNE','EV1DN','EV1DNW','EV1DW','EV1DSW','EV1DS','EV1DSE']
  lMpops = ['EMDOWN','EMUP']
  for prepops in dconf['net']['cmat'].keys():
    for postpops in dconf['net']['cmat'][prepops].keys():
      if postpops in pot_postpops and prepops in pot_postpops:
        if postpops=='EM':
          for postmpops in lMpops:
            if prepops=='EM':
              for prempops in lMpops:
                dprepops[postmpops].append(prempops)
            elif prepops=='VD':
              for predirpops in lDirpops:
                dprepops[postmpops].append(predirpops)
            elif prepops=='VL':
              for prelocpops in lLocpops:
                dprepops[postmpops].append(prelocpops)
            else:
              dprepops[postmpops].append(prepops)
        elif postpops=='VD':
          for postdirpops in lDirpops:
            if prepops=='EM':
              for prempops in lMpops:
                dprepops[postdirpops].append(prempops)
            elif prepops=='VD':
              for predirpops in lDirpops:
                dprepops[postdirpops].append(predirpops)
            elif prepops=='VL':
              for prelocpops in lLocpops:
                dprepops[postdirpops].append(prelocpops)
            else:
              dprepops[postdirpops].append(prepops)
        elif postpops=='VL':
          for postlocpops in lLocpops:
            if prepops=='EM':
              for prempops in lMpops:
                dprepops[postlocpops].append(prempops)
            elif prepops=='VD':
              for predirpops in lDirpops:
                dprepops[postlocpops].append(predirpops)
            elif prepops=='VL':
              for prelocpops in lLocpops:
                dprepops[postlocpops].append(prelocpops)
            else:
              dprepops[postlocpops].append(prepops)
        else:
          if prepops=='EM':
            for prempops in lMpops:
              dprepops[postpops].append(prempops)
          elif prepops=='VD':
            for predirpops in lDirpops:
              dprepops[postpops].append(predirpops)
          elif prepops=='VL':
            for prelocpops in lLocpops:
              dprepops[postpops].append(prelocpops)
          else:
            dprepops[postpops].append(prepops)
  return dprepops

def getAllSTDPObjects2 (sim):
  # get all the STDP objects from the simulation's cells
  dprepops = presynPopsDict() # for each pop, has a list of prepops
  dSTDPmech = {'all':[]} # dictionary of STDP objects keyed by type (all, for EMUP, EMDOWN populations)
  dSTDPmechRec = {'all':[]}
  for pop in dprepops.keys(): 
    dSTDPmech[pop] = []
    dSTDPmechRec[pop] = []
  for cell in sim.net.cells:
    for conn in cell.conns:
      STDPmech = conn.get('hSTDP')  # check if the connection has a NEURON STDP mechanism object
      if STDPmech:
        dSTDPmech['all'].append(STDPmech)
        for pop in dprepops.keys():
          if len(dprepops[pop])>0: # if the pop has presyn pop
            if cell.gid in sim.net.pops[pop].cellGids:
              if conn.preGid in sim.net.pops[pop].cellGids:
                dSTDPmechRec['all'].append(STDPmech)
                dSTDPmechRec[pop].append(STDPmech)
              else:
                dSTDPmech[pop].append(STDPmech)
return dSTDPmech, dSTDPmechRec


.... still need to include these in the sim.py and use it too.....

first need to get started with INTF7.

* 20nov09

-- start using INTF7
-- started with weights from sn.json
-- increased VD->EA and VL->EA to 6.6 .... no firing in EA
-- increased VD->EA and VL->EA to 16.6.... too high firing in EA (~70Hz)
...reduce 16.6 to 10.6.
-- decreased VD->EA and VL->EA to 10.6.... still high firing  and EM ~160Hz
... reduce to 8.6
-- decreased VD->EA and VL->EA to 8.6 

-- to use INTF7.... need the following
/opt/anaconda3/lib/python3.7/site-packages/netpyne/network/conn.py
and
/opt/anaconda3/lib/python3.7/site-packages/netpyne/cell/pointCell.py

-- on new mac:
scp hanwar@10.76.252.198:/opt/anaconda3/lib/python3.7/site-packages/netpyne/cell/pointCell.py ~/netpyne/netpyne/cell/.
scp hanwar@10.76.252.198:/opt/anaconda3/lib/python3.7/site-packages/netpyne/network/conn.py ~/netpyne/netpyne/network/.

-- rerun again with VD->EA and VL->EA of 8.6

-- too high firing rate using stimmod of 35.

-- now use lower values
       "stimModVD": 25,
        "stimModVL": 25,
.... may be these values work.... but no activity in EA. increase VD and VL to EA. increase from 8.6 to 12.

-- 10 might work for VD and VL to EA. with 12, EA fires even when only VL is active. Also try with EA->EM 6 instead of 1.6 which didnt show any activity in EM.
no activity in EM.

-- 10.6 for VD and VL to EA. 12 for EA->EM.

-- 10.6 for VD and VL to EA. 16 for EA->EM

-- 10.6 for VD and VL to EA. 20 for EA->EM and p = 0.2.

* 20nov10

-- start running on cycle and falcor.

-- while i was tuning parameters for reduced network model with INTF7, sam raised a question:
Is it possible that when the racket is half outside the corner, the network balance gets distrubed... 
... because now we have higher contribution from direction selective neurons as compared to the location neurons....
... because half of the pixels of racket wont get activated because they are outside field of view.
... This might force racket to stay at the location (getting stuck).

I think its possible for the reason mentioned above and for another reason too.
When the racket gets stuck, it will not produce any motion field and therefore will further reduce its impact on motor areas ...
...that will reduce input to motor cortex.

-- I proposed that before we try a circuit level fix to this problem, why dont we limit the actions when the racket is close to the edges.

-- while sam started looking at the ycoords of the racket, he observed that for an action, racket moved 40 pixels.
this raised suspicion that what was going on?

-- we suspected that there might be a bug in location detection.

-- 2 different algorithms are used for location detection. findobj for location detection involved in reward generation...
and centroid tracking for object direction computations.

-- i think that this bug associated with findobj should not have any impact on reward assignment, but think its better to double check it

-- now trying to think about ways to test it.
-- run 20 sec sim "20nov10_A0_cycle_reduced_2obj_INTF7_" with _v4 game. dt = 0.2.

-- run 20 sec sim "20nov10_A1_cycle_reduced_2obj_INTF7_" with _v4 game. dt = 0.6 to speed up.

-- run 20 sec sim "20nov10_A2_cycle_reduced_2obj_INTF7_" with _v4 game. dt = 0.6 to speed up.
stimModVD and stimModVL 20.


* 20nov12

stimModVD: 30 (35)
stimModVL: 30 (35)
VL->EA: 10 (1.8)
VD->EA: 10 (3.6)
EA->EM: 20 (1.8)

-- no activity in EA or EM with 

stimModVD: 35
stimModVL: 35
VL->EA: 1.8
VD->EA: 3.6
EA->EM: 1.8

-- see activity in EA but not in EM.

stimModVD: 35
stimModVL: 35
VL->EA: 10
VD->EA: 0
EA->EM: 1.8

but the values should be used to evoke activity in EA only when both VL and VD neurons are active. but here we didnt connect VD with EA.
must reduce VL->EA first or alternatively reduce stimModVD and stimModVL

-- still sparse activity in EA just driven by VL

stimModVD: 30
stimModVL: 30
VL->EA: 10
VD->EA: 0
EA->EM: 1.8

now reduce VL->EA

-- activity in EA stopped

stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 0
EA->EM: 1.8

now test same with only VD ->EA

-- no activity in EA.

stimModVD: 30
stimModVL: 30
VL->EA: 0
VD->EA: 8
EA->EM: 1.8


-- too much sparse

stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 8
EA->EM: 1.8


-- may be too much activity

stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 16
EA->EM: 1.8


-- probably OK for now.....

stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 12
EA->EM: 1.8

... now need to play with EA->EM

-- only a few actions

FeedForwardAtoM: 0
stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 12
EA->EM: 10


-- M neurons fired whenever EA neurons fired.

FeedForwardAtoM: 0
stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 12
EA->EM: 20


-- M neurons stopped firing at 6 sec.

FeedForwardAtoM: 1
stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 12
EA->EM: 20
... fix RL parameters......

-- seems to work.

FeedForwardAtoM: 1
stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 12
EA->EM: 20
"RL":{
  "AMPA":{
    "wbase":0.16,
    "wmax":16,
    RLlenhebb:100,
    RLlenanti:100,
    useRLexp:1,
    RLhebbwt:0.005,
    RLantiwt:0,
    tauhebb:10,
    tauanti:10,
    RLwinhebb:10,
  }
}

-- run for 200 sec on cycle. "20nov12_A0_cycle_reduced_2obj_INTF7"

FeedForwardAtoM: 1
stimModVD: 30
stimModVL: 30
VL->EA: 8
VD->EA: 12
EA->EM: 20
"RL":{
  "AMPA":{
    "wbase":10,
    "wmax":40,
    RLlenhebb:100,
    RLlenanti:100,
    useRLexp:1,
    RLhebbwt:0.005,
    RLantiwt:0,
    tauhebb:10,
    tauanti:10,
    RLwinhebb:10,
  }
}

-- run for 2000 sec on cycle. "20nov12_A1_cycle_reduced_2obj_INTF7"

-- run for 2000 sec on cycle. "20nov12_A1pongv0_cycle_reduced_2obj_INTF7"

-- before pushing sim.json used for  "20nov12_A1_cycle_reduced_2obj_INTF7", remove "avoidStuck":1,


* 20nov13

-- need to pad image....
from matplotlib import pyplot as plt
from skimage.color import rgb2gray
import numpy as np
import gym
from skimage.filters import threshold_otsu

padding_dim = 16

env = gym.make('Pong-v0')
env.reset()
for _ in range(30):
  observation, reward, done, info = env.step(3)

courtYRng = (34, 194)
courtXRng = (20, 140)
racketXRng = (141, 144)
obs = observation[courtYRng[0]:courtYRng[1],:,:]


def getPaddedImage(obs,padding_dim,courtXRng,racketXRng):
  expected_racket_len = 16
  gs_obs = 255.0*rgb2gray(obs)
  input_dim = gs_obs.shape[0] + 2*padding_dim
  padded_Image = np.amin(gs_obs)*np.ones(shape=(input_dim,input_dim))
  padded_Image[padding_dim:padding_dim+gs_obs.shape[0],padding_dim:padding_dim+gs_obs.shape[1]] = gs_obs
  racket2 = gs_obs[:,courtXRng[0]-4:courtXRng[0]-1]
  thresh = threshold_otsu(racket2)
  binary_racket2 = racket2 > thresh
  racket2_ypixels = np.unique(np.where(binary_racket2)[0])
  racket2_len = len(racket2_ypixels)
  racket1 = gs_obs[:,racketXRng[0]:racketXRng[1]]
  thresh = threshold_otsu(racket1)
  binary_racket1 = racket1 > thresh
  racket1_ypixels = np.unique(np.where(binary_racket1)[0])
  racket1_len = len(racket1_ypixels)
  if expected_racket_len>racket1_len:
    missing_racket1_len = expected_racket_len-racket1_len
    if 0 in racket1_ypixels:
      for ind in range(missing_racket1_len):
        for jind in range(racketXRng[1]-racketXRng[0]+1):
          padded_Image[padding_dim-ind,racketXRng[0]+padding_dim+jind-1] = racket1[0,0]
    else:
      for ind in range(missing_racket1_len):
        for jind in range(racketXRng[1]-racketXRng[0]+1):
          padded_Image[gs_obs.shape[0]+padding_dim+ind,racketXRng[0]+padding_dim+jind-1] = racket1[-1,0]
  if expected_racket_len>racket2_len:
    missing_racket2_len = expected_racket_len-racket2_len
    if 0 in racket2_ypixels:
      for ind in range(missing_racket2_len):
        for jind in range(racketXRng[1]-racketXRng[0]+1):
          padded_Image[padding_dim-1-ind,courtXRng[0]+padding_dim-1-jind] = racket2[0,0]
    else:
      for ind in range(missing_racket2_len):
        for jind in range(racketXRng[1]-racketXRng[0]+1):
          padded_Image[gs_obs.shape[0]+padding_dim+ind,courtXRng[0]+padding_dim-1-jind] = racket2[-1,0]
  return padded_Image

for _ in range(10):
  observation, reward, done, info = env.step(4)
  env.render()

obs = observation[courtYRng[0]:courtYRng[1],:,:]
padded_Image = getPaddedImage(obs,padding_dim,courtXRng,racketXRng)
plt.imshow(padded_Image)
plt.show()

-- saved "20nov12_A1pongv0_cycle_reduced_2obj_INTF7_Perf.png".... P(Follow)~0.4, Hit/miss <0.2
not good at all.
.... also save raster in "20nov12_A1pongv0_cycle_reduced_2obj_INTF7_Raster.png"... firing rates look OK.
EMUP = 2.14 Hz, EMDOWN = 2.15 Hz. EA = 0.03 Hz.

-- saved "20nov12_A1_cycle_reduced_2obj_INTF7_Perf.png".... P(Follow)~0.32, Hit/miss <0.1
worse than before.
... also save raster in "20nov12_A1_cycle_reduced_2obj_INTF7_Raster.png"... firing rates look OK but
sparser than when used frameskip-v4 .... EMUP = 0.73 Hz, EMDOWN = 0.74 Hz. EA = 0.01 Hz.

-- any effct of 20 ms tSetpPerAction?? rerun with same params as in ""20nov12_A1pongv0_cycle_reduced_2obj_INTF7_"  and 
.... "20nov12_A1_cycle_reduced_2obj_INTF7_"


-- when using "useImagePadding" and "captureTwoObjs" with "useReducedNetwork"
	    "EV1":48,
	    "EA":4608,

otherwise when "useImagePadding"
      "EV1":576
      and all EV1Dirs:576

-- when using "useImagePadding" with sam's network in sn.json
use 
	    "EV1":576,
	    "EV1DE":576,
	    "EV1DNE":576,
	    "EV1DN":576,
	    "EV1DNW":576,
	    "EV1DW":576,
	    "EV1DSW":576,
	    "EV1DS":576,
	    "EV1DSE":576,

* 20nov16

-- testing useImagePadding

-- add 20 or 24 neurons for encoding x ball position in the reduced network model

-- added neurons for encoding ball_xpos.... when using "useReducedNetwork": 1

-- retune the model parameters from V to EA....

* 20nov17

-- modified reduced network architecture to include ball_xpos

-- now number of neurons increased

"EV1":62, (24 for ball y pos +14 for ball x pos + 24 for racket y pos)
"EA":64512, (24x14x24x8)

-- runs successfully... but now the sim is too slow....

-- also realized that the connections from EV1 to EA might not be accurate.... should check.

-- decided to change the architecture because probably its not worth it....

-- Sam pointed out that the ball and racket change their sizes which is a big issue.

-- Sam suspected that the problem might be because of the padding but i suspected the problem might be due to downscaling.
... Sam argued that if the problem was because of downsampling it should have affected other racket too which appeared not to be the case.

-- Upon further investigation, Sam confirmed that the problem was due to the downsampling... so we decided to use 80x80 image instead of 20x20 image for most of the simulations.

-- Using 80x80 image might be a problem for me when using reducedNetwork. (TO BE DONE)
.... would need 80 neurons to encode ypos of ball.
.... would need 80 neurons to encode ypos of racket.
.... would need 8 neurons to encode dir of racket.
... this would require 80x80x8 (=51200) neurons in EA.

-- other idea to reduce further..... (TO BE DONE)
....80 neurons to encode y pos of ball
....80 neurons to encode y pos of racket
....3 neurons to encode motion direction of the ball.
.... this would require 80x80x3 (=19200) neurons in EA.

-- other idea to reduce further..... (TO BE DONE)
....80 neurons to encode y pos of ball
....3 neurons to encode y pos of racket
....3 neurons to encode motion direction of the ball.
.... this would require 80x3x3 (=720) neurons in EA.


* 20nov18

-- I asked Sam about not using Imagepadding and he made me realized that Imagepadding only works for 20x20 image.

-- I should fix that part to make it more general.
.... gray_Image = self.getPaddedImage(gray_Image,padding_dim,courtXRng,racketXRng) ---> This works fine.....
.... need to adjust 
updateInputRates(dsum_Images)
and
updateDirSensitiveRates()

.... need to use new values for courtXrng and racketRng based on downscale factor and padding.

self.courtXRng = (20, 140) # court x range
self.racketXRng = (140, 144) # racket x range
self.racket0XRng = (16, 20)


from skimage.transform import downscale_local_mean, resize
downsampshape = (8,8)

racket0 = gray_Image[:,racket0XRng[0]:racket0XRng[1]]
racket = gray_Image[:,racketXRng[0]:racketXRng[1]]
court = gray_Image[:,courtXRng[0]:courtXRng[1]]
>>> court.shape
(160, 120)
>>> racket.shape
(160, 3)
>>> racket0.shape
(160, 3)



>>> I1 = downscale_local_mean(gray_Image,(8,8))
>>> I2 = downscale_local_mean(gray_Image,(4,4))
>>> I3 = downscale_local_mean(gray_Image,(2,2))

if downsampshape[0]==8
  if useImagePadding:
    ds_courtXRng = (5, 19) # court x range
    ds_racketXRng = (19, 20) # racket x range... when used in an image
    ds_racket0XRng = (4, 5)
  else:
    ds_courtXRng = (3, 17) # court x range
    ds_racketXRng = (17, 18) # racket x range... when used in an image
    ds_racket0XRng = (2, 3)

>>> I1[:,2:3].shape
(20, 1)
>>> I1[:,17:18].shape
(20, 1)
>>> I1[:,3:17].shape
(20, 14)


if downsampshape[0]==4
  if useImagePadding:
    ds_courtXRng = (9, 39) # court x range
    ds_racketXRng = (39, 40) # racket x range... when used in an image
    ds_racket0XRng = (8, 9)  
  else:
    ds_courtXRng = (5, 35) # court x range
    ds_racketXRng = (35, 36) # racket x range... when used in an image
    ds_racket0XRng = (4, 5)

>>> I2[:,4:5].shape
(40, 1)
>>> I2[:,35:36].shape
(40, 1)
>>> I2[:,5:35].shape
(40, 30)


if downsampshape[0]==2
  if useImagePadding:
    ds_courtXRng = (18, 78)
    ds_racketXRng = (78, 80)
    ds_racket0XRng = (16, 18)  
  else:
    ds_courtXRng = (10, 70) # court x range
    ds_racketXRng = (70, 72) # racket x range... when used in an image
    ds_racket0XRng = (8, 10)

>>> plt.show()
>>> I3[:,10:70].shape
(80, 60)
>>> I3[:,70:72].shape
(80, 2)
>>> I3[:,8:10].shape
(80, 2)


if downsampshape[0]==1
  if useImagePadding:
    ds_courtXRng = (36, 156) # court x range
    ds_racketXRng = (156,160) # racket x range... when used in an image
    ds_racket0XRng = (32, 36)
  else:
    ds_courtXRng = courtXRng # court x range
    ds_racketXRng = racketXRng # racket x range... when used in an image
    ds_racket0XRng = racket0XRng


def getPaddedImage(gs_obs,padding_dim,courtXRng,racketXRng):
  expected_racket_len = 16
  input_dim = gs_obs.shape[0] + 2*padding_dim
  padded_Image = np.amin(gs_obs)*np.ones(shape=(input_dim,input_dim))
  padded_Image[padding_dim:padding_dim+gs_obs.shape[0],padding_dim:padding_dim+gs_obs.shape[1]] = gs_obs
  racket2 = gs_obs[:,courtXRng[0]-4:courtXRng[0]-1]
  if len(np.unique(racket2))>1:
    binary_racket2 = racket2 > 100
    racket2_ypixels = np.unique(np.where(binary_racket2)[0])
    racket2_len = len(racket2_ypixels)
  else:
    racket2_len =0
  racket1 = gs_obs[:,racketXRng[0]:racketXRng[1]]
  if len(np.unique(racket2))>1:
    binary_racket1 = racket1 > 100
    racket1_ypixels = np.unique(np.where(binary_racket1)[0])
    racket1_len = len(racket1_ypixels)
  else:
    racket1_len = 0
  if racket1_len>0 and expected_racket_len>racket1_len:
    missing_racket1_len = expected_racket_len-racket1_len
    if 0 in racket1_ypixels:
      for ind in range(missing_racket1_len):
        for jind in range(racketXRng[1]-racketXRng[0]+1):
          padded_Image[padding_dim-ind,racketXRng[0]+padding_dim+jind-1] = racket1[0,0]
    else:
      for ind in range(missing_racket1_len):
        for jind in range(racketXRng[1]-racketXRng[0]+1):
          padded_Image[gs_obs.shape[0]+padding_dim+ind,racketXRng[0]+padding_dim+jind-1] = racket1[-1,0]
  if racket2_len>0 and expected_racket_len>racket2_len:
    missing_racket2_len = expected_racket_len-racket2_len
    if 0 in racket2_ypixels:
      for ind in range(missing_racket2_len):
        for jind in range(racketXRng[1]-racketXRng[0]+1):
          padded_Image[padding_dim-1-ind,courtXRng[0]+padding_dim-1-jind] = racket2[0,0]
    else:
      for ind in range(missing_racket2_len):
        for jind in range(racketXRng[1]-racketXRng[0]+1):
          padded_Image[gs_obs.shape[0]+padding_dim+ind,courtXRng[0]+padding_dim-1-jind] = racket2[-1,0]
  return padded_Image



padded_I = getPaddedImage(gray_Image,16,courtXRng,racketXRng)

pI1 = downscale_local_mean(padded_I,(8,8))
pI2 = downscale_local_mean(padded_I,(4,4))
pI3 = downscale_local_mean(padded_I,(2,2))


>>> np.unique(pI1)
array([ 83.3345   ,  87.1010875,  92.8236375, 102.4176875, 109.7006125,
       111.8019125, 113.4672   , 121.29105  ])
>>> np.unique(pI3)
array([ 83.3345 , 113.4672 , 143.5999 , 159.2476 , 159.66725, 236.     ])
>>> np.unique(pI2)
array([ 83.3345   ,  98.40085  , 102.4176875, 121.29105  , 121.29105  ,
       128.53355  , 140.5840625, 143.5999   , 159.2476   ])

-- fix thresholding in the code.

def getThreshold (self, I):
  return np.amin(I)+0.1


-- might have a potential problem here

lobs_gimage_ds = np.where(lobs_gimage_ds>np.min(lobs_gimage_ds)+1,255,lobs_gimage_ds)

lobs_gimage_ds ---> this is gray scale down sampled image.

>>> np.unique(pI1)
array([ 83.3345   ,  87.1010875,  92.8236375, 102.4176875, 109.7006125,
       111.8019125, 113.4672   , 121.29105  ])

pI1 = np.where(pI1>np.min(pI1)+1,255,pI1)

.... no this works absolutely fine.....


--

def getNewCoords():
  if downsampshape[0]==8
    if useImagePadding:
      ds_courtXRng = (5, 19) # court x range
      ds_racketXRng = (19, 20) # racket x range... when used in an image
      ds_racket0XRng = (4, 5)
    else:
      ds_courtXRng = (3, 17) # court x range
      ds_racketXRng = (17, 18) # racket x range... when used in an image
      ds_racket0XRng = (2, 3)
  elif downsampshape[0]==4
    if useImagePadding:
      ds_courtXRng = (9, 39) # court x range
      ds_racketXRng = (39, 40) # racket x range... when used in an image
      ds_racket0XRng = (8, 9)  
    else:
      ds_courtXRng = (5, 35) # court x range
      ds_racketXRng = (35, 36) # racket x range... when used in an image
      ds_racket0XRng = (4, 5)
  elif downsampshape[0]==2
    if useImagePadding:
      ds_courtXRng = (18, 78)
      ds_racketXRng = (78, 80)
      ds_racket0XRng = (16, 18)  
    else:
      ds_courtXRng = (10, 70) # court x range
      ds_racketXRng = (70, 72) # racket x range... when used in an image
      ds_racket0XRng = (8, 10)
  elif downsampshape[0]==1
    if useImagePadding:
      ds_courtXRng = (36, 156) # court x range
      ds_racketXRng = (156,160) # racket x range... when used in an image
      ds_racket0XRng = (32, 36)
    else:
      ds_courtXRng = courtXRng # court x range
      ds_racketXRng = racketXRng # racket x range... when used in an image
      ds_racket0XRng = racket0XRng
  return ds_courtXRng, ds_racket0XRng, ds_racketXRng



-- testing the following for different downscales for "useReducedNetwork": 1, "captureTwoObjs":1
and "useImagePadding":1

"EV1":48, ((20+4) + (20+4))
"EA":4608, (24x24x8)
... model runs...

"EV1":96 ((40+8) + (40+8))
"EA":18432 (48x48x8)
... model runs ...

"EV1":192 ((80+16) + (80+16))
"EA":73728 (96x96x8)
... model runs ...

"EV1":384 ((160+32) + (160+32))
"EA":294912 (192x192x8)
... model runs.

---- testing the following for different downscales for "useReducedNetwork": 1, "captureTwoObjs":1
and "useImagePadding":0

"EV1":40, ((20) + (20))
"EA":3200, (20x20x8)
... model runs...

"EV1":80 ((40) + (40))
"EA":12800 (40x40x8)
... model runs ...

"EV1":160 ((80) + (80))
"EA":51200 (80x80x8)
... model runs ...

"EV1":320 ((160) + (160))
"EA":204800 (160x160x8)
... model runs.

-- checking sn.json with "useImagePadding":0 and "useReducedNetwork": 0

"EV1":6400 (80x80)
... model runs.

-- checking sn.json with "useImagePadding":1 and "useReducedNetwork": 0

"EV1":9216 (96x96)
... model runs.

-- Everything seems to work now run on cycle....

* 20nov19


-- run 2000 sec "20nov19_A0_cycle_reduced_2obj_INTF7_" with stimModVD=25 and stimModVL = 25
"EV1":48, ((20+4) + (20+4))
"EA":4608, (24x24x8)

-- run 500 sec "20nov19_A0_cycle_reduced_2obj_INTF7_" with stimModVD=25 and stimModVL = 25 and 
"EV1":192 ((80+16) + (80+16))
"EA":73728 (96x96x8)


* 20nov20

-- when using the below configuration, noticed the angles of motion were not computed correctly.


"useReducedNetwork": 1, 
"captureTwoObjs":1
"useImagePadding":1


"EV1":192 ((80+16) + (80+16))
"EA":73728 (96x96x8)



-- debugging:

there were two Problems
1. computeAllObjectsMotionDirections(UseFull=True) was returning ldflow based on dirSensitiveNeuronDim.
This worked fine with full network model that sam is using but was incorrect for reducedNet model.
... fixed by including following code in the function.

      if self.reducedNet:
        flow = np.zeros(shape=(cimage.shape[0],cimage.shape[1],2))
        mag = np.zeros(shape=(cimage.shape[0],cimage.shape[1]))
        ang = np.zeros(shape=(cimage.shape[0],cimage.shape[1]))
        ang[mag == 0] = -100
        goodInds = np.zeros(shape=(cimage.shape[0],cimage.shape[1]))
      else:
        ...

and

if not self.reducedNet:
  if np.shape(cimage)[0] != self.dirSensitiveNeuronDim or np.shape(cimage)[1] != self.dirSensitiveNeuronDim:
    dirX = resize(dirX, (self.dirSensitiveNeuronDim, self.dirSensitiveNeuronDim), anti_aliasing=True)
    ...

and making the following independent of dirSensitiveNeuronDim

flow = np.zeros(shape=(dirX.shape[0],dirX.shape[1],2))

2. second issue was in function updateDirSensitiveRates(), that wrong indices were used for the court.
updated the code to include correct indices....

      if self.useImagePadding:
        court_motiondir = motiondir[:,self.courtXRng[0]+self.padPixelEachSide:self.courtXRng[1]+self.padPixelEachSide] # only motion direction of ball in the court
      else:
        court_motiondir = motiondir[:,self.courtXRng[0]:self.courtXRng[1]] # only motion direction of ball in the court



- run 2000 sec sim in "20nov20_A0_cycle_reduced_2obj_INTF7_" with
"EV1":48,
"EA":4608,
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint":  -0.1,
        "followTarget": 0.01,
        "avoidTarget": -0.001,
        "hitBall": 0.1
    }

...save 
"20nov20_A0_cycle_reduced_2obj_INTF7_Raster.png",
"20nov20_A0_cycle_reduced_2obj_INTF7_Perf.png"

- run 2000 sec sim in "20nov20_A1_cycle_reduced_2obj_INTF7_" with
"EV1":192,
"EA":73728,
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint":  -0.1,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.2
    }



- run 200 sec sim in "20nov20_A0_falcor_reduced_2obj_INTF7_" with
"EV1":192,
"EA":73728,
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint":  -0.1,
        "followTarget": 0.01,
        "avoidTarget": -0.001,
        "hitBall": 0.1
    }


-- on new mac, i installed macos big sur and then had issues using openai gym.

the problem was with rendering.

ImportError: Can't find framework /System/Library/Frameworks/OpenGL.framework.
solution: install pyglet==1.5.11 (https://github.com/openai/gym/issues/2101)
conda install -c conda-forge pyglet

... issue resolved.

-- new mac: 
export DYLD_FALLBACK_LIBRARY_PATH=/lib:/usr/lib:/usr/bin/lib:/Users/haroonanwar/opt/anaconda3/lib/


popwts = plotMeanWeights(pdf,gca(),msz=6,xl=(0,simConfig['simConfig']['duration']),lpop=['EMDOWN','EMUP'],lclr=['r','b'],plotindiv=False)


* 20nov23 

-- run sim 
 "duration": 500000,
 "name": "20nov23_A0_cycle_reduced_2obj_INTF7_"

"RLhebbwt": 0.5,

"EV1":48,
"EA":4608,
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint":  0.0,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.2
    }

saved 20nov23_A0_cycle_reduced_2obj_INTF7_Raster.png,
20nov23_A0_cycle_reduced_2obj_INTF7_Perf.png,
20nov23_A0_cycle_reduced_2obj_INTF7_Weights.png.

-- run sim on newmac:
"useSimulatedEnv":1,

 "duration": 200000,
 "name": "20nov23_A0_newmac_reduced_2obj_INTF7_"

"RLhebbwt": 0.5,

"EV1":48,
"EA":4608,
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint":  0.0,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.2
    }


-- run sim 
 "duration": 5000000,
 "name": "20nov23_A1_cycle_reduced_2obj_INTF7_"

"RLhebbwt": 0.5,

"EV1":48,
"EA":4608,
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint":  0.0,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.2
    }

saved 20nov23_A1_cycle_reduced_2obj_INTF7_Perf.png, 20nov23_A1_cycle_reduced_2obj_INTF7_Weights.png, 20nov23_A1_cycle_reduced_2obj_INTF7_Raster.png
... Hit/Miss ratio increasing. Looks promising. resume the sim.




-- run sim 
 "duration": 500000,
 "name": "20nov23_A0_falcor_reduced_2obj_INTF7_"

"RLhebbwt": 0.5,

"EV1":48,
"EA":4608,
    "rewardcodes": {
        "scorePoint": 1.0,
        "losePoint":  -0.1,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.5
    }
save 20nov23_A0_falcor_reduced_2obj_INTF7_raster.png,
20nov23_A0_falcor_reduced_2obj_INTF7_perf.png,
20nov23_A0_falcor_reduced_2obj_INTF7_weights.png


-- run sim 
 "duration": 2000000,
 "name": "20nov23_A1_falcor_reduced_2obj_INTF7_"

"RLhebbwt": 1,

"EV1":48,
"EA":4608,
    "rewardcodes": {
        "scorePoint": 1.0,
        "losePoint":  -0.1,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.5
    }
Hit/miss ratio does not go beyond 0.3

* 20nov24

-- resume sim from  "20nov23_A1_cycle_reduced_2obj_INTF7_"
 "duration": 5000000,
 "name": "20nov24_A0_cycle_reduced_2obj_INTF7_"

... Hit/Miss ratio seems to be saturating around 0.52 but will keep running.

-- resume sim from  "20nov24_A0_cycle_reduced_2obj_INTF7_"
 "duration": 2000000,
 "name": "20nov25_A0_cycle_reduced_2obj_INTF7_"
also change learning rate
"hebbwt":2 (before it was 0.5)

... went up quickly and then dropped. may be too much learning......

-- run sim 
 "duration": 2000000,
 "name": "20nov25_A0_falcor_reduced_2obj_INTF7_"

"RLhebbwt": 5,

"EV1":48,
"EA":4608,
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint":  0.0,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.2
    }
... looks nice... improving...

-- resume sim from  "20nov24_A0_cycle_reduced_2obj_INTF7_"
 "duration": 5000000,
 "name": "20nov25_A1_cycle_reduced_2obj_INTF7_"
also change learning rate
"hebbwt":0.5 


-- run sim 
 "duration": 2000000,
 "name": "20nov25_A0_falcor_reduced_2obj_INTF7_"

"RLhebbwt": 5,

"EV1":48,
"EA":4608,
    "rewardcodes": {
        "scorePoint": 0.0,
        "losePoint":  0.0,
        "followTarget": 0.1,
        "avoidTarget": -0.01,
        "hitBall": 0.2


* 20nov27 

lfn = ['20nov23_A1_cycle_reduced_2obj_INTF7_','20nov24_A0_cycle_reduced_2obj_INTF7_','20nov25_A1_cycle_reduced_2obj_INTF7_']
pdac = getconcatactionreward(lfn)
plotPerf(pdac,yl=(0,0.5))

saved as '20nov23_A1_20nov24_A0_20nov25_A1_cycle_reduced_2obj_INTF7_Perf.png' ... also as eps.--->USE THIS.

fig = animInput(InputImages,gifpath()+'_input.mp4')
saved inputanim to gif/20nov27_20nov25_A1cycle_reduced_2obj_INTF7__input.mp4.

 drawraster(dspkT,dspkID)
 saved as 20nov25_A1_cycle_reduced_2obj_INTF7_RasterFull.png
>>> xlim((490e4,500e4))
(4900000.0, 5000000.0)
>>> xlim((499e4,500e4))
(4990000.0, 5000000.0)
>>> xlim((4995e4,500e4))
(49950000.0, 5000000.0)
>>> xlim((499.5e4,500e4))
(4995000.0, 5000000.0)

---------------
lfn = ['20nov23_A1_cycle_reduced_2obj_INTF7_','20nov24_A0_cycle_reduced_2obj_INTF7_','20nov25_A0_cycle_reduced_2obj_INTF7_']
pdac = getconcatactionreward(lfn)
plotPerf(pdac,yl=(0,0.5))

saved as '20nov23_A1_20nov24_A0_20nov25_A0_cycle_reduced_2obj_INTF7_Perf.png'


-- resume sim from: "ResumeSimFromFile": "data/20nov25_A0_cycle_reduced_2obj_INTF7_synWeights_final.pkl"
"duration": 5000,000
"name": "20nov27_A0_cycle_reduced_2obj_INTF7_",
"RLhebbwt": 2,


-- resume sim from: "ResumeSimFromFile": "data/20nov27_A0_cycle_reduced_2obj_INTF7_synWeights_final.pkl"
"duration": 5000,000
"name": "20nov28_A0_cycle_reduced_2obj_INTF7_",
"RLhebbwt": 2,


* 20nov30

python -i simdat.py backupcfg/20nov28_A0_cycle_reduced_2obj_INTF7_sim.json
lfn = ['20nov23_A1_cycle_reduced_2obj_INTF7_','20nov24_A0_cycle_reduced_2obj_INTF7_','20nov25_A0_cycle_reduced_2obj_INTF7_','20nov27_A0_cycle_reduced_2obj_INTF7_','20nov28_A0_cycle_reduced_2obj_INTF7_']
lpda = getindivactionreward(lfn)
csm = cm.ScalarMappable(cmap=cm.jet); csm.set_clim((0,1));
lclr = [csm.to_rgba(float(i)/len(lpda)) for i in range(len(lpda))]
plotComparePerf(lpda,lclr,yl=(0,1),lleg=lfn)

saved as "20nov23_A1_20nov24_A0_20nov25_A0_20nov27_A0_20nov28_A0_cycle_reduced_2obj_INTF7_Perf_compare.eps"

pdac = getconcatactionreward(lfn)
plotPerf(pdac,yl=(0,0.5))

saved as "20nov23_A1_20nov24_A0_20nov25_A0_20nov27_A0_20nov28_A0_cycle_reduced_2obj_INTF7_Perf.eps"

-- resume sim from: "ResumeSimFromFile": "data/20nov28_A0_cycle_reduced_2obj_INTF7_synWeights_final.pkl"
"duration": 5000,000
"name": "20nov30_A0_cycle_reduced_2obj_INTF7_",
"RLhebbwt": 2,


-- run sim on falcor
"duration": 5000,000
"name": "20nov30_A0_falcor_reduced_2obj_INTF7_",
"RLhebbwt": 20,


* 20dec01

-- resume sim from: "ResumeSimFromFile": "data/20nov30_A0_cycle_reduced_2obj_INTF7_synWeights_final.pkl"
"duration": 5000,000
"name": "20dec01_A0_cycle_reduced_2obj_INTF7_",
"RLhebbwt": 2,

--------

import numpy as np
import random
from simulatePongFull import simulatePong
pong = simulatePong()
for _ in range(10000):
  randaction = random.choice([3,4,1])
  obs, reward, done = pong.step(randaction)

# fig,ax = plt.subplots(1,1)
# obs, reward, done = pong.step(1)
# im = ax.imshow(obs.astype(np.uint8))
for _ in range(10000):
  randaction = random.choice([3,4,1])
  obs, reward, done = pong.step(randaction)
  # im.set_data(obs.astype(np.uint8))
  # fig.canvas.draw_idle()
  # plt.pause(0.1)
  # print('reward,done',reward,done)

the algorithm detects that the ball was missed. but does not reset the coordinates of the ball.


--- simulatedPongFull bug fixed.

-- could not update text in the game plotting.

* 20dec03
--remove "useNeuronPad" and all associated functions from aigame.py.
-- use simulatedPongFull instead of simulatedPong and test.

-- on cycle run sim "20dec03_A0_cycle_reduced_2obj_INTF7_" for 500 sec with:
"useSimulatedEnv": 1
'EV1':40
'EA':3200
'targettedRL':3

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec03_A0_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec03_A0_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec03_A0_cycle_reduced_2obj_INTF7_
loading input images from data/20dec03_A0_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec03_A0_cycle_reduced_2obj_INTF7_ on 20dec3_
EV1 4.41 Hz
EV1DE 10.98 Hz
EV1DNE 0.89 Hz
EV1DN 15.02 Hz
EV1DNW 0.45 Hz
EV1DW 6.09 Hz
EV1DSW 1.13 Hz
EV1DS 15.43 Hz
EV1DSE 2.25 Hz
EA 0.02 Hz
EMDOWN 1.42 Hz
EMUP 1.4 Hz
IM 5.7 Hz
stimModEV1 15.39 Hz
stimModEV1DE 46.95 Hz
stimModEV1DNE 4.32 Hz
stimModEV1DN 30.95 Hz
stimModEV1DNW 2.24 Hz
stimModEV1DW 25.18 Hz
stimModEV1DSW 4.96 Hz
stimModEV1DS 32.49 Hz
stimModEV1DSE 13.08 Hz

Potential Problem: I see EV1DN and EV1DS firing, which indicates that its picking up rackets direction.
check these 2 functions...
In updateDirSensitiveRates()

Issue Fixed....

this change is only for reducedNet.....
      if self.useImagePadding:
        court_motiondir = motiondir[:,self.courtXRng[0]+1+self.padPixelEachSide:self.courtXRng[1]-1+self.padPixelEachSide] # only motion direction of ball in the court
      else:
        court_motiondir = motiondir[:,self.courtXRng[0]+1:self.courtXRng[1]-1] # only motion direction of ball in the court



--

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec03_A1_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec03_A1_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec03_A1_cycle_reduced_2obj_INTF7_
loading input images from data/20dec03_A1_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec03_A1_cycle_reduced_2obj_INTF7_ on 20dec3_
EV1 4.04 Hz
EV1DE 11.07 Hz
EV1DNE 0.78 Hz
EV1DN 0.47 Hz
EV1DNW 0.49 Hz
EV1DW 7.37 Hz
EV1DSW 1.09 Hz
EV1DS 1.09 Hz
EV1DSE 2.15 Hz
EA 0.0 Hz
EMDOWN 0.38 Hz
EMUP 0.37 Hz
IM 1.11 Hz
stimModEV1 15.1 Hz
stimModEV1DE 47.5 Hz
stimModEV1DNE 3.7 Hz
stimModEV1DN 0.52 Hz
stimModEV1DNW 1.46 Hz
stimModEV1DW 27.51 Hz
stimModEV1DSW 4.93 Hz
stimModEV1DS 1.25 Hz
stimModEV1DSE 12.81 Hz

-- should increase the strength of input.

        "stimModVD": 35,
        "stimModVL": 35,

and run the sim in "20dec03_A2_cycle_reduced_2obj_INTF7_"

... look at IM and EM for this sim.....

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec03_A2_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec03_A2_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec03_A2_cycle_reduced_2obj_INTF7_
loading input images from data/20dec03_A2_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec03_A2_cycle_reduced_2obj_INTF7_ on 20dec3_
EV1 13.3 Hz --->
EV1DE 42.92 Hz --->
EV1DNE 2.76 Hz
EV1DN 1.05 Hz
EV1DNW 1.53 Hz
EV1DW 30.05 Hz --->
EV1DSW 3.48 Hz
EV1DS 1.42 Hz
EV1DSE 8.54 Hz
EA 0.06 Hz
EMDOWN 4.17 Hz
EMUP 4.04 Hz
IM 14.8 Hz
stimModEV1 15.75 Hz
stimModEV1DE 52.26 Hz
stimModEV1DNE 2.92 Hz
stimModEV1DN 1.05 Hz
stimModEV1DNW 1.58 Hz
stimModEV1DW 35.44 Hz
stimModEV1DSW 3.54 Hz
stimModEV1DS 1.42 Hz
stimModEV1DSE 8.82 Hz

-- how to run multistepSim???


python multistepSim.py sn.json 32 20 20nov10_B1_cycle_multi

32 is number of cores
20 is number of steps.
20nov10_B1_cycle_multi is output file name.


-- using "name": "20dec03_B0_cycle_reduced_2obj_INTF7_"
run multistep:

python multistepSim.py sim.json 16 10 20dec3_B0_cycle_multi


-- reduce the ball speed.

    self.ball_dx = 3  # displacement in horizontal direction
    self.ball_dy = 3  #displacement in vertical direction

* 20dec07 

-- set "followOnlyTowards": 0 and     "wiggle": 6,

-- Sam pointed out that once in a while hit-the-ball event goes undetected
... should try to figure out the situation, where hit-the-ball event goes undetected...
... meanwhile run the simulations.

-- Sam also suggested that we should add noise to EM neurons, allowing better exploration of motor action space.

-- run 5000sec sim "20dec07_A0_cycle_reduced_2obj_INTF7_" using fixed and improved simulatePongFull.

-- stopped:  python multistepSim.py sim.json 16 10 20dec3_B0_cycle_multi

-- stop and rerun for 500 sec with "followOnlyTowards": 1 in sim "20dec07_A0_cycle_reduced_2obj_INTF7_"

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec07_A0_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec07_A0_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec07_A0_cycle_reduced_2obj_INTF7_
loading input images from data/20dec07_A0_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec07_A0_cycle_reduced_2obj_INTF7_ on 20dec7_
EV1 14.34 Hz
EV1DE 3.92 Hz
EV1DNE 24.07 Hz
EV1DN 3.22 Hz
EV1DNW 9.82 Hz
EV1DW 2.31 Hz
EV1DSW 15.18 Hz
EV1DS 2.84 Hz
EV1DSE 21.81 Hz
EA 0.09 Hz
EMDOWN 5.95 Hz
EMUP 5.64 Hz
IM 23.98 Hz
stimModEV1 15.35 Hz
stimModEV1DE 4.44 Hz
stimModEV1DNE 28.32 Hz
stimModEV1DN 3.27 Hz
stimModEV1DNW 11.44 Hz
stimModEV1DW 2.32 Hz
stimModEV1DSW 16.98 Hz
stimModEV1DS 2.89 Hz
stimModEV1DSE 29.19 Hz
>>> plotPerf(actreward)
saved as "20dec07_A0_cycle_reduced_2obj_INTF7_Perf.png".... doesnt look too good.
>>> plotMeanWeights(pdf,lpop=['EMDOWN','EMUP'],lclr=['r','g'],plotindiv=False)
saved as "20dec07_A0_cycle_reduced_2obj_INTF7_MeanWeights.png"

-- to compare it with real pong. run a sim "20dec07_A1_cycle_reduced_2obj_INTF7_" using real pong ("useSimulatedEnv": 0)
useImagePadding:1
EV1:48
EA:4608

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec07_A1_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec07_A1_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec07_A1_cycle_reduced_2obj_INTF7_
loading input images from data/20dec07_A1_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec07_A1_cycle_reduced_2obj_INTF7_ on 20dec7_
EV1 10.03 Hz
EV1DE 3.85 Hz
EV1DNE 21.33 Hz
EV1DN 1.38 Hz
EV1DNW 9.82 Hz
EV1DW 4.02 Hz
EV1DSW 6.4 Hz
EV1DS 1.71 Hz
EV1DSE 17.43 Hz
EA 0.06 Hz
EMDOWN 6.09 Hz
EMUP 6.1 Hz
IM 29.75 Hz
stimModEV1 11.35 Hz
stimModEV1DE 4.31 Hz
stimModEV1DNE 26.6 Hz
stimModEV1DN 1.38 Hz
stimModEV1DNW 13.29 Hz
stimModEV1DW 5.08 Hz
stimModEV1DSW 9.28 Hz
stimModEV1DS 1.74 Hz
stimModEV1DSE 21.28 Hz



-- run sim for 5000 sec in "20dec07_A2_cycle_reduced_2obj_INTF7_"
 "RLhebbwt": 1,
  "targettedRL": 3

-- run "20dec07_A3_cycle_reduced_2obj_INTF7_"
 "RLhebbwt": 1,
  "targettedRL": 1

-- i ran using sn.json for 10 sec and didnt find the situation sam mentioned. all events were detected correctly.

* 20dec08

-- now running testsim for 100,000 actions to find situations where 

          print('Right player missed the ball')
          print('Ball:',self.ballx1,self.ballx2,self.bally1,self.bally2)
          print('Racket:',self.rightracketx1,self.rightracketx2,self.rightrackety1,self.rightrackety2)


-- added conditions for declaring miss the ball:
if self.scoreRecorded==0 and tmp_ballx1>self.rightracketx2: # for right racket

if self.scoreRecorded==0 and tmp_ballx1<self.leftracketx1: # for left racket
      
... testing....

import random
from simulatePongFull import simulatePong
pong = simulatePong()
for _ in range(10000):
  randaction = random.choice([3,4,1])
  obs, reward, done, info = pong.step(randaction)

-- Hit the ball fixed.

-- ran 500 sec sim in "20dec08_A0_cycle_reduced_2obj_INTF7_" without noise and..
"targettedRL": 1,

"tstepPerAction": 50,

        "stimModVD": 27.5,
        "stimModVL": 27.5,

"RLhebbwt": 1,

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec08_A0_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec08_A0_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec08_A0_cycle_reduced_2obj_INTF7_
loading input images from data/20dec08_A0_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec08_A0_cycle_reduced_2obj_INTF7_ on 20dec8_
EV1 6.54 Hz
EV1DE 0.81 Hz
EV1DNE 8.12 Hz
EV1DN 2.36 Hz
EV1DNW 1.62 Hz
EV1DW 0.45 Hz
EV1DSW 6.38 Hz
EV1DS 2.38 Hz
EV1DSE 9.06 Hz
EA 0.01 Hz
EMDOWN 0.6 Hz
EMUP 0.6 Hz
IM 1.5 Hz
stimModEV1 0.0 Hz
stimModEV1DE 0.0 Hz
stimModEV1DNE 0.0 Hz
stimModEV1DN 0.0 Hz
stimModEV1DNW 0.0 Hz
stimModEV1DW 0.0 Hz
stimModEV1DSW 0.0 Hz
stimModEV1DS 0.0 Hz
stimModEV1DSE 0.0 Hz

stims are 0 because not recorded (set "recordStim":0 in sim.json).

.... no good performance. (see 20dec08_A0_cycle_reduced_2obj_INTF7_Perf.png)
.... diverging weights..... (see 20dec08_A0_cycle_reduced_2obj_INTF7_MeanWeights.png)

drawraster(dspkT,dspkID)
xlim((4.5e5,5e5))
save as 20dec08_A0_cycle_reduced_2obj_INTF7_Raster1.png

ylim((3250,3500))
save as 20dec08_A0_cycle_reduced_2obj_INTF7_Raster2.png

-- start tuning the noise: start with Sam's values

        "E": {
            "Rate": 1000,
            "Weight": 5
        }

ran 500 sec sim in "20dec08_A1_cycle_reduced_2obj_INTF7_"



(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec08_A1_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec08_A1_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec08_A1_cycle_reduced_2obj_INTF7_
loading input images from data/20dec08_A1_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec08_A1_cycle_reduced_2obj_INTF7_ on 20dec8_
EV1 7.27 Hz
EV1DE 1.16 Hz
EV1DNE 9.12 Hz
EV1DN 1.67 Hz
EV1DNW 2.8 Hz
EV1DW 0.43 Hz
EV1DSW 6.46 Hz
EV1DS 1.56 Hz
EV1DSE 9.51 Hz
EA 0.01 Hz
EMDOWN 11.32 Hz
EMUP 11.34 Hz
IM 49.6 Hz

.... better follow the ball but not good hit the ball performance. (see 20dec08_A1_cycle_reduced_2obj_INTF7_Perf.png)
.... diverging weights..... (see 20dec08_A1_cycle_reduced_2obj_INTF7_MeanWeights.png)

drawraster(dspkT,dspkID)
xlim((4.5e5,5e5))
save as 20dec08_A1_cycle_reduced_2obj_INTF7_Raster1.png

ylim((3250,3500))
xlim((4.99e5,5e5))
save as 20dec08_A1_cycle_reduced_2obj_INTF7_Raster2.png


-- ran 500 sec sim in "20dec08_A2_cycle_reduced_2obj_INTF7_"
        "E": {
            "Rate": 500,
            "Weight": 5
        }

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec08_A2_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec08_A2_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec08_A2_cycle_reduced_2obj_INTF7_
loading input images from data/20dec08_A2_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec08_A2_cycle_reduced_2obj_INTF7_ on 20dec8_
EV1 7.29 Hz
EV1DE 1.41 Hz
EV1DNE 8.31 Hz
EV1DN 2.11 Hz
EV1DNW 2.72 Hz
EV1DW 0.45 Hz
EV1DSW 8.35 Hz
EV1DS 2.31 Hz
EV1DSE 7.71 Hz
EA 0.01 Hz
EMDOWN 3.62 Hz
EMUP 3.66 Hz
IM 9.33 Hz

drawraster(dspkT,dspkID)
xlim((4.5e5,5e5))
save as 20dec08_A2_cycle_reduced_2obj_INTF7_Raster1.png

ylim((3250,3500))
xlim((4.99e5,5e5))
save as 20dec08_A2_cycle_reduced_2obj_INTF7_Raster2.png

.... may have a potential. (see 20dec08_A2_cycle_reduced_2obj_INTF7_Perf.png)
.... not too much diverging weights..... (see 20dec08_A2_cycle_reduced_2obj_INTF7_MeanWeights.png)

-- run for 5000 sec "20dec08_A3_cycle_reduced_2obj_INTF7_"

        "E": {
            "Rate": 500,
            "Weight": 5
        }

* 20dec09

-- run 500 sec sim on falcor "20dec09_A0_falcor_reduced_2obj_INTF7_"
with 
        "E": {
            "Rate": 200,
            "Weight": 5
        }

EV1 6.73 Hz
EV1DE 1.12 Hz
EV1DNE 8.49 Hz
EV1DN 1.94 Hz
EV1DNW 3.92 Hz
EV1DW 0.57 Hz
EV1DSW 5.9 Hz
EV1DS 1.86 Hz
EV1DSE 11.62 Hz
EA 0.01 Hz
EMDOWN 1.16 Hz
EMUP 1.16 Hz
IM 4.07 Hz

... bad perf.

-- run 500 sec sim on falcor "20dec09_A1_falcor_reduced_2obj_INTF7_"
with 
        "E": {
            "Rate": 200,
            "Weight": 10
        }


-- analysis of ...

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec08_A3_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec08_A3_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec08_A3_cycle_reduced_2obj_INTF7_
loading input images from data/20dec08_A3_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec08_A3_cycle_reduced_2obj_INTF7_ on 20dec9_
EV1 7.35 Hz
EV1DE 1.08 Hz
EV1DNE 9.23 Hz
EV1DN 1.67 Hz
EV1DNW 3.31 Hz
EV1DW 0.53 Hz
EV1DSW 6.28 Hz
EV1DS 1.59 Hz
EV1DSE 9.43 Hz
EA 0.01 Hz
EMDOWN 3.89 Hz
EMUP 3.83 Hz
IM 11.08 Hz

.... 
 plotPerf(actreward)
saved as 20dec08_A3_cycle_reduced_2obj_INTF7_Perf.png

....
 plotMeanWeights(pdf,lpop=['EMDOWN','EMUP'],lclr=['r','g'],plotindiv=False)
saved as 20dec08_A3_cycle_reduced_2obj_INTF7_MeanWeights.png

... performance not improving... and perf is bad (Hit/miss ~ 0.35)


--- run 500 sec sim.

"name": "20dec09_A0_cycle_reduced_2obj_INTF7_",

            "EMDOWN":300,
            "EMUP":300,
            "EMSTAY":0,
            "IM":150,

ue 3 times neurons in M.

          "EA":{
            "EM":{"AM":20,"NM":0.001,"p":0.2}, (increased from p=0.1)
          },

and reduce noise

        "E": {
            "Rate": 200,
            "Weight": 5
        }


(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec09_A0_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec09_A0_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec09_A0_cycle_reduced_2obj_INTF7_
loading input images from data/20dec09_A0_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec09_A0_cycle_reduced_2obj_INTF7_ on 20dec9_
EV1 6.85 Hz
EV1DE 1.55 Hz
EV1DNE 9.93 Hz
EV1DN 1.45 Hz
EV1DNW 5.66 Hz
EV1DW 0.91 Hz
EV1DSW 5.04 Hz
EV1DS 1.51 Hz
EV1DSE 7.96 Hz
EA 0.01 Hz
EMDOWN 2.94 Hz
EMUP 2.94 Hz
IM 22.92 Hz


 plotPerf(actreward)
saved as 20dec09_A0_cycle_reduced_2obj_INTF7_Perf.png

 plotMeanWeights(pdf,lpop=['EMDOWN','EMUP'],lclr=['r','g'],plotindiv=False)
saved as 20dec09_A0_cycle_reduced_2obj_INTF7_MeanWeights.png


-- python multistepSim.py sim.json 30 10 20dec09_A0_cycle_multi


-- on falcor, analyzing 20dec09_A1_falcor_reduced_2obj_INTF7_

dact = getdActMap (totalDur, tstepPerAction, dspkT, dspkID, dnumc, dstartidx,lpop = ['EMUP','EMDOWN'])

--- run 500 sec sim (python multistepSim.py sim.json 30 5 20dec09_A0_falcor_multi)

"name": "20dec09_A2_falcor_reduced_2obj_INTF7_",

            "EMDOWN":300,
            "EMUP":300,
            "EMSTAY":0,
            "IM":150,

ue 3 times neurons in M.

        "E": {
            "Rate": 500,
            "Weight": 5
        }


* 20dec10

-- still running multistepSim.... but analyzing first few....

lfn = ['20dec09_A0_cycle_reduced_2obj_INTF7_','20dec09_A1_cycle_reduced_2obj_INTF7__step_0_','20dec09_A1_cycle_reduced_2obj_INTF7__step_1_']
lpda = getindivactionreward(lfn)
csm = cm.ScalarMappable(cmap=cm.jet); csm.set_clim((0,1));
lclr = [csm.to_rgba(float(i)/len(lpda)) for i in range(len(lpda))]
plotComparePerf(lpda,lclr,yl=(0,1),lleg=lfn)

saved a snapshot on desktop (will plot properly later with more steps)

pdac = getconcatactionreward(lfn)
plotPerf(pdac,yl=(0,1))

saved a snapshot on desktop (will plot properly later with more steps)

... SEEMS TO BE WORKING AS THE PERFORMANCE IS GETTING BETTER OVER STEPS.



--- python multistepSim.py sim.json 30 5 20dec09_A0_falcor_multi didnt work on falcor.

for some reason, it got stuck after __step_0

looked at perf, and didnt look good.

... it seems that higher connectivity will help.

--- run 500 sec sim of falcor...

"name": "20dec10_A0_falcor_reduced_2obj_INTF7_",

            "EMDOWN":100,
            "EMUP":100,
            "EMSTAY":0,
            "IM":50,

ue 3 times neurons in M.

          "EA":{
            "EM":{"AM":20,"NM":0.001,"p":0.25}, (increased from p=0.1)
          },

and reduce noise

        "E": {
            "Rate": 100,
            "Weight": 5
        }

-- create simplePong without opponent racket.
-- while using simplePong, make sure to either use 'scorePoint' or 'hitBall'. because hitBall is same as reward of 1.
-- testing simplePong in sim.

-- need to change the court dimensions.


-- ran 500 sec sim

(base) hanwar@cycle:~/GamesProject/SMARTAgent$ python -i simdat.py backupcfg/20dec10_B0_cycle_reduced_2obj_INTF7_sim.json 
reading  backupcfg/20dec10_B0_cycle_reduced_2obj_INTF7_sim.json
-1
lpop:  ['EV1', 'EV1DE', 'EV1DNE', 'EV1DN', 'EV1DNW', 'EV1DW', 'EV1DSW', 'EV1DS', 'EV1DSE', 'EMDOWN', 'EMUP', 'IM']
loading data from 20dec10_B0_cycle_reduced_2obj_INTF7_
loading input images from data/20dec10_B0_cycle_reduced_2obj_INTF7_InputImages.txt
loaded simulation data 20dec10_B0_cycle_reduced_2obj_INTF7_ on 20dec10_
EV1 6.48 Hz
EV1DE 0.4 Hz
EV1DNE 10.27 Hz
EV1DN 1.6 Hz
EV1DNW 4.9 Hz
EV1DW 0.14 Hz
EV1DSW 2.88 Hz
EV1DS 2.09 Hz
EV1DSE 11.06 Hz
EA 0.01 Hz
EMDOWN 1.9 Hz
EMUP 1.92 Hz
IM 20.05 Hz


-- run multistep:

 python multistepSim.py sim.json 30 10 20dec10_C0_cycle_multi

 ... looking at step_0, too much synchrony. need to decrease strength from EA->EM and rerun.

-- ran sim on falcor '20dec10_B0_falcor_reduced_2obj_INTF7_'
duration: 1000 sec
EA:{EM:{AM:20,p:0.3}}
noise: rate:100, weight:5
... should reduce weight from EA to EM and rerun.

* 20dec11


-- run 20dec11_A0_falcor_reduced_2obj_INTF7_
duration: 100 sec
EA:{EM:{AM:8,p:0.3}}
noise: rate:100, weight:5

-- run 20dec11_A0_cycle_reduced_2obj_INTF7_
duration: 50 sec
EA:{EM:{AM:10,p:0.2}}

--a bug fixed only related to reducedNetwork.


-- run 20dec11_A0_falcor_reduced_2obj_INTF7_
duration: 10 sec
EA:{EM:{AM:10,p:0.2}}
VD to EA: 16 (from 12)

-- run 20dec11_A0_falcor_reduced_2obj_INTF7_
duration: 10 sec
EA:{EM:{AM:5,p:0.2}}
VD to EA: 16 (from 12)

-- set "EXPDir": 0 for reducedNet.
the issue was using just 8 neurons to encode directions. It was activating neurons variably and therefore was not activating EA neurons uniformly.

--debugged reducedNet when using EXPDir=0:

              if abs(getangdiff(a,dAngPeak[pop])) <= self.AngRFSigma:
                self.dFiringRates[pop][0] = MaxRate